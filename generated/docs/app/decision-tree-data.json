{
  "1028": {
    "id": "1028",
    "label": "take"
  },
  "1193": {
    "id": "1193",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "65f7",
      "0c12"
    ]
  },
  "1551": {
    "id": "1551",
    "label": "observeOn"
  },
  "2768": {
    "id": "2768",
    "label": "according to value equality",
    "options": [
      "9d0a",
      "ea32"
    ]
  },
  "2911": {
    "id": "2911",
    "label": "takeLast"
  },
  "2918": {
    "id": "2918",
    "label": "repeatWhen"
  },
  "2991": {
    "id": "2991",
    "label": "Observable",
    "method": "toPromise"
  },
  "3349": {
    "id": "3349",
    "label": "interval"
  },
  "4048": {
    "id": "4048",
    "label": "partition"
  },
  "4296": {
    "id": "4296",
    "label": "race"
  },
  "4387": {
    "id": "4387",
    "label": "according to a key or object property",
    "options": [
      "c5e0"
    ]
  },
  "4500": {
    "id": "4500",
    "label": "merge"
  },
  "4583": {
    "id": "4583",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "f31f",
      "8b41"
    ]
  },
  "4942": {
    "id": "4942",
    "label": "startWith"
  },
  "5014": {
    "id": "5014",
    "label": "takeWhile"
  },
  "5169": {
    "id": "5169",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "8c53"
    ]
  },
  "5220": {
    "id": "5220",
    "label": "I want to know how many values it emits",
    "options": [
      "ba2a"
    ]
  },
  "5821": {
    "id": "5821",
    "label": "audit"
  },
  "6211": {
    "id": "6211",
    "label": "I want to re-subscribe",
    "options": [
      "802a",
      "46d1"
    ]
  },
  "6691": {
    "id": "6691",
    "label": "map"
  },
  "7016": {
    "id": "7016",
    "label": "bufferCount"
  },
  "7095": {
    "id": "7095",
    "label": "publishReplay"
  },
  "7191": {
    "id": "7191",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "5dbc",
      "75c5"
    ]
  },
  "7414": {
    "id": "7414",
    "label": "mergeScan"
  },
  "7423": {
    "id": "7423",
    "label": "retry"
  },
  "8565": {
    "id": "8565",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "0358"
    ]
  },
  "8896": {
    "id": "8896",
    "label": "buffer"
  },
  "9001": {
    "id": "9001",
    "label": "NEVER"
  },
  "9261": {
    "id": "9261",
    "label": "merge"
  },
  "ae61": {
    "id": "ae61",
    "label": "mapTo"
  },
  "666a": {
    "id": "666a",
    "label": "to be a constant value",
    "options": [
      "ae61"
    ]
  },
  "26b8": {
    "id": "26b8",
    "label": "to be a value calculated through a formula",
    "options": [
      "6691"
    ]
  },
  "79c5": {
    "id": "79c5",
    "label": "I want to change each emitted value",
    "options": [
      "666a",
      "26b8"
    ]
  },
  "10ae": {
    "id": "10ae",
    "label": "pluck"
  },
  "0d34": {
    "id": "0d34",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "10ae"
    ]
  },
  "a72e": {
    "id": "a72e",
    "label": "tap"
  },
  "01f0": {
    "id": "01f0",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "a72e"
    ]
  },
  "bded": {
    "id": "bded",
    "label": "filter"
  },
  "c0f0": {
    "id": "c0f0",
    "label": "based on custom logic",
    "options": [
      "bded"
    ]
  },
  "3c57": {
    "id": "3c57",
    "label": "first"
  },
  "55ee": {
    "id": "55ee",
    "label": "and only the first value",
    "options": [
      "3c57"
    ]
  },
  "0cbd": {
    "id": "0cbd",
    "label": "based on a given amount",
    "options": [
      "1028"
    ]
  },
  "0bce": {
    "id": "0bce",
    "label": "based on custom logic",
    "options": [
      "5014"
    ]
  },
  "3f10": {
    "id": "3f10",
    "label": "if they are at the start of the Observable",
    "options": [
      "55ee",
      "0cbd",
      "0bce"
    ]
  },
  "753d": {
    "id": "753d",
    "label": "elementAt"
  },
  "0c03": {
    "id": "0c03",
    "label": "if they are exactly the n-th emission",
    "options": [
      "753d"
    ]
  },
  "12b5": {
    "id": "12b5",
    "label": "last"
  },
  "19bd": {
    "id": "19bd",
    "label": "and only the last value",
    "options": [
      "12b5"
    ]
  },
  "9cd8": {
    "id": "9cd8",
    "label": "based on a given amount",
    "options": [
      "2911"
    ]
  },
  "abb1": {
    "id": "abb1",
    "label": "if they are at the end of the Observable",
    "options": [
      "19bd",
      "9cd8"
    ]
  },
  "5ca3": {
    "id": "5ca3",
    "label": "takeUntil"
  },
  "5dc4": {
    "id": "5dc4",
    "label": "until another Observable emits a value",
    "options": [
      "5ca3"
    ]
  },
  "3a83": {
    "id": "3a83",
    "label": "I want to allow some values to pass",
    "options": [
      "c0f0",
      "3f10",
      "0c03",
      "abb1",
      "5dc4"
    ]
  },
  "b5ac": {
    "id": "b5ac",
    "label": "ignoreElements"
  },
  "ab1e": {
    "id": "ab1e",
    "label": "altogether",
    "options": [
      "b5ac"
    ]
  },
  "5b7c": {
    "id": "5b7c",
    "label": "skip"
  },
  "978d": {
    "id": "978d",
    "label": "based on a given amount",
    "options": [
      "5b7c"
    ]
  },
  "15ba": {
    "id": "15ba",
    "label": "skipWhile"
  },
  "0658": {
    "id": "0658",
    "label": "based on custom logic",
    "options": [
      "15ba"
    ]
  },
  "14fc": {
    "id": "14fc",
    "label": "from the start of the Observable",
    "options": [
      "978d",
      "0658"
    ]
  },
  "3b45": {
    "id": "3b45",
    "label": "skipLast"
  },
  "1b85": {
    "id": "1b85",
    "label": "from the end of the Observable",
    "options": [
      "3b45"
    ]
  },
  "9ce6": {
    "id": "9ce6",
    "label": "skipUntil"
  },
  "c6c8": {
    "id": "c6c8",
    "label": "until another Observable emits a value",
    "options": [
      "9ce6"
    ]
  },
  "eb50": {
    "id": "eb50",
    "label": "distinctUntilChanged"
  },
  "9d0a": {
    "id": "9d0a",
    "label": "emitted just before the current value",
    "options": [
      "eb50"
    ]
  },
  "9a74": {
    "id": "9a74",
    "label": "distinct"
  },
  "ea32": {
    "id": "ea32",
    "label": "emitted some time in the past",
    "options": [
      "9a74"
    ]
  },
  "b9e2": {
    "id": "b9e2",
    "label": "distinctUntilKeyChanged"
  },
  "c5e0": {
    "id": "c5e0",
    "label": "emitted just before the current value",
    "options": [
      "b9e2"
    ]
  },
  "63ec": {
    "id": "63ec",
    "label": "that match some previous value",
    "options": [
      "2768",
      "4387"
    ]
  },
  "d025": {
    "id": "d025",
    "label": "throttle"
  },
  "ae80": {
    "id": "ae80",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "d025"
    ]
  },
  "7e57": {
    "id": "7e57",
    "label": "throttleTime"
  },
  "42da": {
    "id": "42da",
    "label": "where time windows are determined by a time duration",
    "options": [
      "7e57"
    ]
  },
  "4b41": {
    "id": "4b41",
    "label": "by emitting the first value in each time window",
    "options": [
      "ae80",
      "42da"
    ]
  },
  "d7eb": {
    "id": "d7eb",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "5821"
    ]
  },
  "5eb7": {
    "id": "5eb7",
    "label": "auditTime"
  },
  "75a5": {
    "id": "75a5",
    "label": "where time windows are determined by a time duration",
    "options": [
      "5eb7"
    ]
  },
  "acbf": {
    "id": "acbf",
    "label": "by emitting the last value in each time window",
    "options": [
      "d7eb",
      "75a5"
    ]
  },
  "0595": {
    "id": "0595",
    "label": "debounce"
  },
  "56ee": {
    "id": "56ee",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "0595"
    ]
  },
  "8c53": {
    "id": "8c53",
    "label": "debounceTime"
  },
  "92d0": {
    "id": "92d0",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "56ee",
      "5169"
    ]
  },
  "d5d4": {
    "id": "d5d4",
    "label": "that occur too frequently",
    "options": [
      "4b41",
      "acbf",
      "92d0"
    ]
  },
  "a9dc": {
    "id": "a9dc",
    "label": "I want to ignore values",
    "options": [
      "ab1e",
      "14fc",
      "1b85",
      "c6c8",
      "63ec",
      "d5d4"
    ]
  },
  "1ab8": {
    "id": "1ab8",
    "label": "reduce"
  },
  "717e": {
    "id": "717e",
    "label": "and only output the final computed value",
    "options": [
      "1ab8"
    ]
  },
  "094a": {
    "id": "094a",
    "label": "scan"
  },
  "0bfa": {
    "id": "0bfa",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "094a"
    ]
  },
  "a6f2": {
    "id": "a6f2",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "7414"
    ]
  },
  "c378": {
    "id": "c378",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "717e",
      "0bfa",
      "a6f2"
    ]
  },
  "774b": {
    "id": "774b",
    "label": "materialize"
  },
  "cfad": {
    "id": "cfad",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "774b"
    ]
  },
  "1b89": {
    "id": "1b89",
    "label": "timeInterval"
  },
  "a25d": {
    "id": "a25d",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "1b89"
    ]
  },
  "dd82": {
    "id": "dd82",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "cfad",
      "a25d"
    ]
  },
  "c62f": {
    "id": "c62f",
    "label": "timeout"
  },
  "202a": {
    "id": "202a",
    "label": "I want to throw an error",
    "options": [
      "c62f"
    ]
  },
  "623b": {
    "id": "623b",
    "label": "timeoutWith"
  },
  "32ac": {
    "id": "32ac",
    "label": "I want to switch to another Observable",
    "options": [
      "623b"
    ]
  },
  "ad28": {
    "id": "ad28",
    "label": "after a period of inactivity",
    "options": [
      "202a",
      "32ac"
    ]
  },
  "33fb": {
    "id": "33fb",
    "label": "single"
  },
  "c705": {
    "id": "c705",
    "label": "I want to ensure there is only one value",
    "options": [
      "33fb"
    ]
  },
  "ba2a": {
    "id": "ba2a",
    "label": "count"
  },
  "8eb6": {
    "id": "8eb6",
    "label": "I want to prepend one value",
    "options": [
      "4942"
    ]
  },
  "861f": {
    "id": "861f",
    "label": "delay"
  },
  "ac72": {
    "id": "ac72",
    "label": "based on a given amount of time",
    "options": [
      "861f"
    ]
  },
  "9cfa": {
    "id": "9cfa",
    "label": "delayWhen"
  },
  "de1d": {
    "id": "de1d",
    "label": "based on the emissions of another Observable",
    "options": [
      "9cfa"
    ]
  },
  "6d16": {
    "id": "6d16",
    "label": "I want to delay the emissions",
    "options": [
      "ac72",
      "de1d"
    ]
  },
  "94ed": {
    "id": "94ed",
    "label": "toArray"
  },
  "22e1": {
    "id": "22e1",
    "label": "and convert to an array",
    "options": [
      "94ed"
    ]
  },
  "a791": {
    "id": "a791",
    "label": "and convert to a Promise",
    "options": [
      "2991"
    ]
  },
  "98a0": {
    "id": "98a0",
    "label": "until the Observable completes",
    "options": [
      "22e1",
      "a791"
    ]
  },
  "ab04": {
    "id": "ab04",
    "label": "pairwise"
  },
  "731c": {
    "id": "731c",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "ab04"
    ]
  },
  "0200": {
    "id": "0200",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "4048"
    ]
  },
  "b15c": {
    "id": "b15c",
    "label": "and emit the group as an array",
    "options": [
      "7016"
    ]
  },
  "0d01": {
    "id": "0d01",
    "label": "windowCount"
  },
  "643f": {
    "id": "643f",
    "label": "and emit the group as a nested Observable",
    "options": [
      "0d01"
    ]
  },
  "126c": {
    "id": "126c",
    "label": "in batches of a particular size",
    "options": [
      "b15c",
      "643f"
    ]
  },
  "60e9": {
    "id": "60e9",
    "label": "bufferTime"
  },
  "dc16": {
    "id": "dc16",
    "label": "and emit the group as an array",
    "options": [
      "60e9"
    ]
  },
  "9d13": {
    "id": "9d13",
    "label": "windowTime"
  },
  "cbdd": {
    "id": "cbdd",
    "label": "and emit the group as a nested Observable",
    "options": [
      "9d13"
    ]
  },
  "71ea": {
    "id": "71ea",
    "label": "based on time",
    "options": [
      "dc16",
      "cbdd"
    ]
  },
  "e60c": {
    "id": "e60c",
    "label": "and emit the group as an array",
    "options": [
      "8896"
    ]
  },
  "c736": {
    "id": "c736",
    "label": "window"
  },
  "b199": {
    "id": "b199",
    "label": "and emit the group as a nested Observable",
    "options": [
      "c736"
    ]
  },
  "9f50": {
    "id": "9f50",
    "label": "until another Observable emits",
    "options": [
      "e60c",
      "b199"
    ]
  },
  "223e": {
    "id": "223e",
    "label": "bufferWhen"
  },
  "bc05": {
    "id": "bc05",
    "label": "and emit the group as an array",
    "options": [
      "223e"
    ]
  },
  "a596": {
    "id": "a596",
    "label": "windowWhen"
  },
  "90f1": {
    "id": "90f1",
    "label": "and emit the group as a nested Observable",
    "options": [
      "a596"
    ]
  },
  "1afd": {
    "id": "1afd",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "bc05",
      "90f1"
    ]
  },
  "d4b9": {
    "id": "d4b9",
    "label": "bufferToggle"
  },
  "f31f": {
    "id": "f31f",
    "label": "and emit the group as an array",
    "options": [
      "d4b9"
    ]
  },
  "fe85": {
    "id": "fe85",
    "label": "windowToggle"
  },
  "8b41": {
    "id": "8b41",
    "label": "and emit the group as a nested Observable",
    "options": [
      "fe85"
    ]
  },
  "1a3c": {
    "id": "1a3c",
    "label": "groupBy"
  },
  "a487": {
    "id": "a487",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "1a3c"
    ]
  },
  "2ed0": {
    "id": "2ed0",
    "label": "I want to group the values",
    "options": [
      "98a0",
      "731c",
      "0200",
      "126c",
      "71ea",
      "9f50",
      "1afd",
      "4583",
      "a487"
    ]
  },
  "58cf": {
    "id": "58cf",
    "label": "mergeMapTo"
  },
  "65f7": {
    "id": "65f7",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "58cf"
    ]
  },
  "8ca2": {
    "id": "8ca2",
    "label": "mergeMap"
  },
  "0c12": {
    "id": "0c12",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "8ca2"
    ]
  },
  "87aa": {
    "id": "87aa",
    "label": "concatMapTo"
  },
  "cf9b": {
    "id": "cf9b",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "87aa"
    ]
  },
  "c03e": {
    "id": "c03e",
    "label": "concatMap"
  },
  "08d2": {
    "id": "08d2",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "c03e"
    ]
  },
  "eab7": {
    "id": "eab7",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "cf9b",
      "08d2"
    ]
  },
  "6dd3": {
    "id": "6dd3",
    "label": "switchMapTo"
  },
  "5dbc": {
    "id": "5dbc",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "6dd3"
    ]
  },
  "f086": {
    "id": "f086",
    "label": "switchMap"
  },
  "75c5": {
    "id": "75c5",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "f086"
    ]
  },
  "6b26": {
    "id": "6b26",
    "label": "exhaustMap"
  },
  "41f8": {
    "id": "41f8",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "6b26"
    ]
  },
  "988a": {
    "id": "988a",
    "label": "expand"
  },
  "a253": {
    "id": "a253",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "988a"
    ]
  },
  "9c49": {
    "id": "9c49",
    "label": "I want to start a new Observable for each value",
    "options": [
      "1193",
      "eab7",
      "7191",
      "41f8",
      "a253"
    ]
  },
  "6c32": {
    "id": "6c32",
    "label": "pipe"
  },
  "77e4": {
    "id": "77e4",
    "label": "I want to perform custom operations",
    "options": [
      "6c32"
    ]
  },
  "bb2d": {
    "id": "bb2d",
    "label": "share"
  },
  "e029": {
    "id": "e029",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "bb2d"
    ]
  },
  "2ac0": {
    "id": "2ac0",
    "label": "publish"
  },
  "15ea": {
    "id": "15ea",
    "label": "and start it manually or imperatively",
    "options": [
      "2ac0"
    ]
  },
  "9d97": {
    "id": "9d97",
    "label": "using a conventional Subject",
    "options": [
      "e029",
      "15ea"
    ]
  },
  "c305": {
    "id": "c305",
    "label": "publishBehavior"
  },
  "eddd": {
    "id": "eddd",
    "label": "using a BehaviorSubject",
    "options": [
      "c305"
    ]
  },
  "81f0": {
    "id": "81f0",
    "label": "using a ReplaySubject",
    "options": [
      "7095"
    ]
  },
  "a378": {
    "id": "a378",
    "label": "publishLast"
  },
  "fd4d": {
    "id": "fd4d",
    "label": "using an AsyncSubject",
    "options": [
      "a378"
    ]
  },
  "31e0": {
    "id": "31e0",
    "label": "multicast"
  },
  "ecc3": {
    "id": "ecc3",
    "label": "using a specific subject implementation",
    "options": [
      "31e0"
    ]
  },
  "953e": {
    "id": "953e",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "9d97",
      "eddd",
      "81f0",
      "fd4d",
      "ecc3"
    ]
  },
  "0c62": {
    "id": "0c62",
    "label": "catchError"
  },
  "e345": {
    "id": "e345",
    "label": "I want to start a new Observable",
    "options": [
      "0c62"
    ]
  },
  "01ad": {
    "id": "01ad",
    "label": "immediately",
    "options": [
      "7423"
    ]
  },
  "42e1": {
    "id": "42e1",
    "label": "retryWhen"
  },
  "5fd6": {
    "id": "5fd6",
    "label": "when another Observable emits",
    "options": [
      "42e1"
    ]
  },
  "2b62": {
    "id": "2b62",
    "label": "I want to re-subscribe",
    "options": [
      "01ad",
      "5fd6"
    ]
  },
  "e256": {
    "id": "e256",
    "label": "when an error occurs",
    "options": [
      "e345",
      "2b62"
    ]
  },
  "711e": {
    "id": "711e",
    "label": "repeat"
  },
  "802a": {
    "id": "802a",
    "label": "immediately",
    "options": [
      "711e"
    ]
  },
  "46d1": {
    "id": "46d1",
    "label": "when another Observable emits",
    "options": [
      "2918"
    ]
  },
  "e143": {
    "id": "e143",
    "label": "concat"
  },
  "80f3": {
    "id": "80f3",
    "label": "I want to start a new Observable",
    "options": [
      "e143"
    ]
  },
  "f8ae": {
    "id": "f8ae",
    "label": "when it completes",
    "options": [
      "6211",
      "80f3"
    ]
  },
  "cc54": {
    "id": "cc54",
    "label": "finalize"
  },
  "30b9": {
    "id": "30b9",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "cc54"
    ]
  },
  "f120": {
    "id": "f120",
    "label": "subscribeOn"
  },
  "c822": {
    "id": "c822",
    "label": "that routes calls to subscribe",
    "options": [
      "f120"
    ]
  },
  "64ec": {
    "id": "64ec",
    "label": "that routes values to observers",
    "options": [
      "1551"
    ]
  },
  "34bd": {
    "id": "34bd",
    "label": "I want to change the scheduler",
    "options": [
      "c822",
      "64ec"
    ]
  },
  "94c8": {
    "id": "94c8",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "4296"
    ]
  },
  "e731": {
    "id": "e731",
    "label": "I want to output the values from either of them",
    "options": [
      "9261"
    ]
  },
  "48a3": {
    "id": "48a3",
    "label": "combineLatest"
  },
  "ac9b": {
    "id": "ac9b",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "48a3"
    ]
  },
  "411c": {
    "id": "411c",
    "label": "withLatestFrom"
  },
  "f8ea": {
    "id": "f8ea",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "411c"
    ]
  },
  "b577": {
    "id": "b577",
    "label": "zip"
  },
  "6e13": {
    "id": "6e13",
    "label": "using each source value only once",
    "options": [
      "b577"
    ]
  },
  "e064": {
    "id": "e064",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "ac9b",
      "f8ea",
      "6e13"
    ]
  },
  "c333": {
    "id": "c333",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "94c8",
      "e731",
      "e064"
    ]
  },
  "8e3c": {
    "id": "8e3c",
    "label": "I have one existing Observable, and",
    "options": [
      "79c5",
      "0d34",
      "01f0",
      "3a83",
      "a9dc",
      "c378",
      "dd82",
      "ad28",
      "c705",
      "5220",
      "8eb6",
      "6d16",
      "2ed0",
      "9c49",
      "77e4",
      "953e",
      "e256",
      "f8ae",
      "30b9",
      "34bd",
      "c333"
    ]
  },
  "b66a": {
    "id": "b66a",
    "label": "race"
  },
  "ba12": {
    "id": "ba12",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "b66a"
    ]
  },
  "5bf9": {
    "id": "5bf9",
    "label": "forkJoin"
  },
  "8fec": {
    "id": "8fec",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "5bf9"
    ]
  },
  "b69e": {
    "id": "b69e",
    "label": "I want to output the values from either of them",
    "options": [
      "4500"
    ]
  },
  "b569": {
    "id": "b569",
    "label": "combineLatest"
  },
  "8bc0": {
    "id": "8bc0",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "b569"
    ]
  },
  "63f6": {
    "id": "63f6",
    "label": "zip"
  },
  "0acb": {
    "id": "0acb",
    "label": "using each source value only once",
    "options": [
      "63f6"
    ]
  },
  "9be6": {
    "id": "9be6",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "8bc0",
      "0acb"
    ]
  },
  "c9ea": {
    "id": "c9ea",
    "label": "concat"
  },
  "68a8": {
    "id": "68a8",
    "label": "I want to subscribe to each in order",
    "options": [
      "c9ea"
    ]
  },
  "594e": {
    "id": "594e",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "ba12",
      "8fec",
      "b69e",
      "9be6",
      "68a8"
    ]
  },
  "336b": {
    "id": "336b",
    "label": "Observable",
    "method": "create"
  },
  "ef39": {
    "id": "ef39",
    "label": "using custom logic",
    "options": [
      "336b"
    ]
  },
  "babb": {
    "id": "babb",
    "label": "generate"
  },
  "ce6c": {
    "id": "ce6c",
    "label": "using a state machine similar to a for loop",
    "options": [
      "babb"
    ]
  },
  "a0e0": {
    "id": "a0e0",
    "label": "throwError"
  },
  "0cc6": {
    "id": "0cc6",
    "label": "that throws an error",
    "options": [
      "a0e0"
    ]
  },
  "79ce": {
    "id": "79ce",
    "label": "EMPTY"
  },
  "1c65": {
    "id": "1c65",
    "label": "that just completes, without emitting values",
    "options": [
      "79ce"
    ]
  },
  "2f29": {
    "id": "2f29",
    "label": "that never emits anything",
    "options": [
      "9001"
    ]
  },
  "0358": {
    "id": "0358",
    "label": "fromEvent"
  },
  "ca2a": {
    "id": "ca2a",
    "label": "fromEventPattern"
  },
  "70bd": {
    "id": "70bd",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "ca2a"
    ]
  },
  "17e5": {
    "id": "17e5",
    "label": "from an existing source of events",
    "options": [
      "8565",
      "70bd"
    ]
  },
  "b43f": {
    "id": "b43f",
    "label": "from"
  },
  "bc6a": {
    "id": "bc6a",
    "label": "from a Promise or an event source",
    "options": [
      "b43f"
    ]
  },
  "9a3c": {
    "id": "9a3c",
    "label": "from"
  },
  "0578": {
    "id": "0578",
    "label": "over the values in an array",
    "options": [
      "9a3c"
    ]
  },
  "d959": {
    "id": "d959",
    "label": "range"
  },
  "cb67": {
    "id": "cb67",
    "label": "over values in a numeric range",
    "options": [
      "d959"
    ]
  },
  "d889": {
    "id": "d889",
    "label": "of"
  },
  "12f9": {
    "id": "12f9",
    "label": "over prefined values given as arguments",
    "options": [
      "d889"
    ]
  },
  "bed2": {
    "id": "bed2",
    "label": "that iterates",
    "options": [
      "0578",
      "cb67",
      "12f9"
    ]
  },
  "e383": {
    "id": "e383",
    "label": "regularly",
    "options": [
      "3349"
    ]
  },
  "8ff3": {
    "id": "8ff3",
    "label": "timer"
  },
  "3c3b": {
    "id": "3c3b",
    "label": "with an optional initial delay",
    "options": [
      "8ff3"
    ]
  },
  "d44d": {
    "id": "d44d",
    "label": "that emits values on a timer",
    "options": [
      "e383",
      "3c3b"
    ]
  },
  "554d": {
    "id": "554d",
    "label": "defer"
  },
  "321c": {
    "id": "321c",
    "label": "which is built on demand when subscribed",
    "options": [
      "554d"
    ]
  },
  "c4ef": {
    "id": "c4ef",
    "label": "I want to create a new Observable",
    "options": [
      "ef39",
      "ce6c",
      "0cc6",
      "1c65",
      "2f29",
      "17e5",
      "bc6a",
      "bed2",
      "d44d",
      "321c"
    ]
  },
  "76e9": {
    "id": "76e9",
    "label": "bindCallback"
  },
  "bc84": {
    "id": "bc84",
    "label": "supporting a conventional callback API",
    "options": [
      "76e9"
    ]
  },
  "7cea": {
    "id": "7cea",
    "label": "bindNodeCallback"
  },
  "1c88": {
    "id": "1c88",
    "label": "supporting Node.js callback style API",
    "options": [
      "7cea"
    ]
  },
  "a87b": {
    "id": "a87b",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "bc84",
      "1c88"
    ]
  },
  "9e7d": {
    "id": "9e7d",
    "label": "I have no Observables yet, and",
    "options": [
      "c4ef",
      "a87b"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "8e3c",
      "594e",
      "9e7d"
    ]
  }
}