{
  "1053": {
    "id": "1053",
    "label": "interval"
  },
  "1189": {
    "id": "1189",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "8a1b",
      "3443"
    ]
  },
  "1520": {
    "id": "1520",
    "label": "scan"
  },
  "1592": {
    "id": "1592",
    "label": "partition"
  },
  "1714": {
    "id": "1714",
    "label": "of"
  },
  "1738": {
    "id": "1738",
    "label": "I want to perform custom operations",
    "options": [
      "249c"
    ]
  },
  "1764": {
    "id": "1764",
    "label": "exhaustMap"
  },
  "1989": {
    "id": "1989",
    "label": "and emit the group as a nested Observable",
    "options": [
      "5dac"
    ]
  },
  "2108": {
    "id": "2108",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "9b7d"
    ]
  },
  "2212": {
    "id": "2212",
    "label": "observeOn"
  },
  "2662": {
    "id": "2662",
    "label": "catchError"
  },
  "2763": {
    "id": "2763",
    "label": "that iterates",
    "options": [
      "ccd2",
      "2b51",
      "fa38"
    ]
  },
  "2853": {
    "id": "2853",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "3719"
    ]
  },
  "3070": {
    "id": "3070",
    "label": "mergeScan"
  },
  "3253": {
    "id": "3253",
    "label": "skipUntil"
  },
  "3443": {
    "id": "3443",
    "label": "and emit the group as a nested Observable",
    "options": [
      "b5a6"
    ]
  },
  "3451": {
    "id": "3451",
    "label": "when an error occurs",
    "options": [
      "a740",
      "4862"
    ]
  },
  "3711": {
    "id": "3711",
    "label": "I want to throw an error",
    "options": [
      "e673"
    ]
  },
  "3719": {
    "id": "3719",
    "label": "combineLatest"
  },
  "4008": {
    "id": "4008",
    "label": "when another Observable emits",
    "options": [
      "206c"
    ]
  },
  "4155": {
    "id": "4155",
    "label": "and emit the group as a nested Observable",
    "options": [
      "c9cf"
    ]
  },
  "4232": {
    "id": "4232",
    "label": "take"
  },
  "4440": {
    "id": "4440",
    "label": "withLatestFrom"
  },
  "4607": {
    "id": "4607",
    "label": "expand"
  },
  "4862": {
    "id": "4862",
    "label": "I want to re-subscribe",
    "options": [
      "2dba",
      "4008"
    ]
  },
  "4904": {
    "id": "4904",
    "label": "I have one existing Observable, and",
    "options": [
      "0cbe",
      "1dc8",
      "ec1b",
      "3b76",
      "e558",
      "b7a3",
      "dde8",
      "a240",
      "ce64",
      "dd9d",
      "afd7",
      "be3d",
      "9997",
      "4f9b",
      "1738",
      "f670",
      "3451",
      "3b11",
      "1c21",
      "2e07",
      "5bf7"
    ]
  },
  "5033": {
    "id": "5033",
    "label": "fromEvent"
  },
  "5277": {
    "id": "5277",
    "label": "emitted just before the current value",
    "options": [
      "213b"
    ]
  },
  "5389": {
    "id": "5389",
    "label": "using a conventional Subject",
    "options": [
      "0e31",
      "08f0"
    ]
  },
  "6308": {
    "id": "6308",
    "label": "that occur too frequently",
    "options": [
      "31de",
      "0f27",
      "649d"
    ]
  },
  "6342": {
    "id": "6342",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "1764"
    ]
  },
  "6475": {
    "id": "6475",
    "label": "supporting a conventional callback API",
    "options": [
      "4c7a"
    ]
  },
  "6502": {
    "id": "6502",
    "label": "based on time",
    "options": [
      "b7fc",
      "1989"
    ]
  },
  "7412": {
    "id": "7412",
    "label": "I want to subscribe to each in order",
    "options": [
      "02a4"
    ]
  },
  "7944": {
    "id": "7944",
    "label": "repeatWhen"
  },
  "8034": {
    "id": "8034",
    "label": "windowCount"
  },
  "8824": {
    "id": "8824",
    "label": "that emits values on a timer",
    "options": [
      "e901",
      "7c0e"
    ]
  },
  "8832": {
    "id": "8832",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "719b",
      "99fe"
    ]
  },
  "8851": {
    "id": "8851",
    "label": "zip"
  },
  "9070": {
    "id": "9070",
    "label": "buffer"
  },
  "9116": {
    "id": "9116",
    "label": "using a specific subject implementation",
    "options": [
      "2dac"
    ]
  },
  "9516": {
    "id": "9516",
    "label": "and only the last value",
    "options": [
      "a3ff"
    ]
  },
  "9754": {
    "id": "9754",
    "label": "that just completes, without emitting values",
    "options": [
      "c342"
    ]
  },
  "9992": {
    "id": "9992",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "53ba"
    ]
  },
  "9997": {
    "id": "9997",
    "label": "I want to group the values",
    "options": [
      "a45e",
      "6d99",
      "b6b8",
      "3ec4",
      "6502",
      "14dd",
      "537b",
      "1189",
      "01ae"
    ]
  },
  "5ce8": {
    "id": "5ce8",
    "label": "mapTo"
  },
  "db2c": {
    "id": "db2c",
    "label": "to be a constant value",
    "options": [
      "5ce8"
    ]
  },
  "e33a": {
    "id": "e33a",
    "label": "map"
  },
  "89e5": {
    "id": "89e5",
    "label": "to be a value calculated through a formula",
    "options": [
      "e33a"
    ]
  },
  "0cbe": {
    "id": "0cbe",
    "label": "I want to change each emitted value",
    "options": [
      "db2c",
      "89e5"
    ]
  },
  "88b3": {
    "id": "88b3",
    "label": "pluck"
  },
  "1dc8": {
    "id": "1dc8",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "88b3"
    ]
  },
  "fb43": {
    "id": "fb43",
    "label": "tap"
  },
  "ec1b": {
    "id": "ec1b",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "fb43"
    ]
  },
  "1c9f": {
    "id": "1c9f",
    "label": "filter"
  },
  "f6de": {
    "id": "f6de",
    "label": "based on custom logic",
    "options": [
      "1c9f"
    ]
  },
  "f0b3": {
    "id": "f0b3",
    "label": "first"
  },
  "92a9": {
    "id": "92a9",
    "label": "and only the first value",
    "options": [
      "f0b3"
    ]
  },
  "99fd": {
    "id": "99fd",
    "label": "based on a given amount",
    "options": [
      "4232"
    ]
  },
  "d4a4": {
    "id": "d4a4",
    "label": "takeWhile"
  },
  "381d": {
    "id": "381d",
    "label": "based on custom logic",
    "options": [
      "d4a4"
    ]
  },
  "c890": {
    "id": "c890",
    "label": "if they are at the start of the Observable",
    "options": [
      "92a9",
      "99fd",
      "381d"
    ]
  },
  "f560": {
    "id": "f560",
    "label": "elementAt"
  },
  "3c92": {
    "id": "3c92",
    "label": "if they are exactly the n-th emission",
    "options": [
      "f560"
    ]
  },
  "a3ff": {
    "id": "a3ff",
    "label": "last"
  },
  "9b56": {
    "id": "9b56",
    "label": "takeLast"
  },
  "ce32": {
    "id": "ce32",
    "label": "based on a given amount",
    "options": [
      "9b56"
    ]
  },
  "4b44": {
    "id": "4b44",
    "label": "if they are at the end of the Observable",
    "options": [
      "9516",
      "ce32"
    ]
  },
  "d734": {
    "id": "d734",
    "label": "takeUntil"
  },
  "1d03": {
    "id": "1d03",
    "label": "until another Observable emits a value",
    "options": [
      "d734"
    ]
  },
  "3b76": {
    "id": "3b76",
    "label": "I want to allow some values to pass",
    "options": [
      "f6de",
      "c890",
      "3c92",
      "4b44",
      "1d03"
    ]
  },
  "d0ef": {
    "id": "d0ef",
    "label": "ignoreElements"
  },
  "f64a": {
    "id": "f64a",
    "label": "altogether",
    "options": [
      "d0ef"
    ]
  },
  "4f9f": {
    "id": "4f9f",
    "label": "skip"
  },
  "d83b": {
    "id": "d83b",
    "label": "based on a given amount",
    "options": [
      "4f9f"
    ]
  },
  "7afa": {
    "id": "7afa",
    "label": "skipWhile"
  },
  "be12": {
    "id": "be12",
    "label": "based on custom logic",
    "options": [
      "7afa"
    ]
  },
  "b2c3": {
    "id": "b2c3",
    "label": "from the start of the Observable",
    "options": [
      "d83b",
      "be12"
    ]
  },
  "8ffe": {
    "id": "8ffe",
    "label": "skipLast"
  },
  "ddb7": {
    "id": "ddb7",
    "label": "from the end of the Observable",
    "options": [
      "8ffe"
    ]
  },
  "9f63": {
    "id": "9f63",
    "label": "until another Observable emits a value",
    "options": [
      "3253"
    ]
  },
  "213b": {
    "id": "213b",
    "label": "distinctUntilChanged"
  },
  "c04c": {
    "id": "c04c",
    "label": "distinct"
  },
  "b5e9": {
    "id": "b5e9",
    "label": "emitted some time in the past",
    "options": [
      "c04c"
    ]
  },
  "da37": {
    "id": "da37",
    "label": "according to value equality",
    "options": [
      "5277",
      "b5e9"
    ]
  },
  "6b3e": {
    "id": "6b3e",
    "label": "distinctUntilKeyChanged"
  },
  "d004": {
    "id": "d004",
    "label": "emitted just before the current value",
    "options": [
      "6b3e"
    ]
  },
  "5cec": {
    "id": "5cec",
    "label": "according to a key or object property",
    "options": [
      "d004"
    ]
  },
  "7f68": {
    "id": "7f68",
    "label": "that match some previous value",
    "options": [
      "da37",
      "5cec"
    ]
  },
  "77ed": {
    "id": "77ed",
    "label": "throttle"
  },
  "a8d7": {
    "id": "a8d7",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "77ed"
    ]
  },
  "3f04": {
    "id": "3f04",
    "label": "throttleTime"
  },
  "510b": {
    "id": "510b",
    "label": "where time windows are determined by a time duration",
    "options": [
      "3f04"
    ]
  },
  "31de": {
    "id": "31de",
    "label": "by emitting the first value in each time window",
    "options": [
      "a8d7",
      "510b"
    ]
  },
  "fe93": {
    "id": "fe93",
    "label": "audit"
  },
  "fac3": {
    "id": "fac3",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "fe93"
    ]
  },
  "4aa6": {
    "id": "4aa6",
    "label": "auditTime"
  },
  "2b29": {
    "id": "2b29",
    "label": "where time windows are determined by a time duration",
    "options": [
      "4aa6"
    ]
  },
  "0f27": {
    "id": "0f27",
    "label": "by emitting the last value in each time window",
    "options": [
      "fac3",
      "2b29"
    ]
  },
  "e9cb": {
    "id": "e9cb",
    "label": "debounce"
  },
  "52ed": {
    "id": "52ed",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "e9cb"
    ]
  },
  "1aaf": {
    "id": "1aaf",
    "label": "debounceTime"
  },
  "f783": {
    "id": "f783",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "1aaf"
    ]
  },
  "649d": {
    "id": "649d",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "52ed",
      "f783"
    ]
  },
  "e558": {
    "id": "e558",
    "label": "I want to ignore values",
    "options": [
      "f64a",
      "b2c3",
      "ddb7",
      "9f63",
      "7f68",
      "6308"
    ]
  },
  "a1d0": {
    "id": "a1d0",
    "label": "reduce"
  },
  "aba3": {
    "id": "aba3",
    "label": "and only output the final computed value",
    "options": [
      "a1d0"
    ]
  },
  "cf5a": {
    "id": "cf5a",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "1520"
    ]
  },
  "cd3c": {
    "id": "cd3c",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "3070"
    ]
  },
  "b7a3": {
    "id": "b7a3",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "aba3",
      "cf5a",
      "cd3c"
    ]
  },
  "e2ec": {
    "id": "e2ec",
    "label": "materialize"
  },
  "6cad": {
    "id": "6cad",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "e2ec"
    ]
  },
  "12e0": {
    "id": "12e0",
    "label": "timeInterval"
  },
  "bf91": {
    "id": "bf91",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "12e0"
    ]
  },
  "dde8": {
    "id": "dde8",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "6cad",
      "bf91"
    ]
  },
  "e673": {
    "id": "e673",
    "label": "timeout"
  },
  "b1a4": {
    "id": "b1a4",
    "label": "timeoutWith"
  },
  "0383": {
    "id": "0383",
    "label": "I want to switch to another Observable",
    "options": [
      "b1a4"
    ]
  },
  "a240": {
    "id": "a240",
    "label": "after a period of inactivity",
    "options": [
      "3711",
      "0383"
    ]
  },
  "5b55": {
    "id": "5b55",
    "label": "single"
  },
  "ce64": {
    "id": "ce64",
    "label": "I want to ensure there is only one value",
    "options": [
      "5b55"
    ]
  },
  "b1a8": {
    "id": "b1a8",
    "label": "count"
  },
  "dd9d": {
    "id": "dd9d",
    "label": "I want to know how many values it emits",
    "options": [
      "b1a8"
    ]
  },
  "0731": {
    "id": "0731",
    "label": "startWith"
  },
  "afd7": {
    "id": "afd7",
    "label": "I want to prepend one value",
    "options": [
      "0731"
    ]
  },
  "bd62": {
    "id": "bd62",
    "label": "delay"
  },
  "d456": {
    "id": "d456",
    "label": "based on a given amount of time",
    "options": [
      "bd62"
    ]
  },
  "a16a": {
    "id": "a16a",
    "label": "delayWhen"
  },
  "6e9d": {
    "id": "6e9d",
    "label": "based on the emissions of another Observable",
    "options": [
      "a16a"
    ]
  },
  "be3d": {
    "id": "be3d",
    "label": "I want to delay the emissions",
    "options": [
      "d456",
      "6e9d"
    ]
  },
  "4f27": {
    "id": "4f27",
    "label": "toArray"
  },
  "af8f": {
    "id": "af8f",
    "label": "and convert to an array",
    "options": [
      "4f27"
    ]
  },
  "b031": {
    "id": "b031",
    "label": "Observable",
    "method": "toPromise"
  },
  "ae16": {
    "id": "ae16",
    "label": "and convert to a Promise",
    "options": [
      "b031"
    ]
  },
  "a45e": {
    "id": "a45e",
    "label": "until the Observable completes",
    "options": [
      "af8f",
      "ae16"
    ]
  },
  "22d4": {
    "id": "22d4",
    "label": "pairwise"
  },
  "6d99": {
    "id": "6d99",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "22d4"
    ]
  },
  "b6b8": {
    "id": "b6b8",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "1592"
    ]
  },
  "1da4": {
    "id": "1da4",
    "label": "bufferCount"
  },
  "260b": {
    "id": "260b",
    "label": "and emit the group as an array",
    "options": [
      "1da4"
    ]
  },
  "214d": {
    "id": "214d",
    "label": "and emit the group as a nested Observable",
    "options": [
      "8034"
    ]
  },
  "3ec4": {
    "id": "3ec4",
    "label": "in batches of a particular size",
    "options": [
      "260b",
      "214d"
    ]
  },
  "e84d": {
    "id": "e84d",
    "label": "bufferTime"
  },
  "b7fc": {
    "id": "b7fc",
    "label": "and emit the group as an array",
    "options": [
      "e84d"
    ]
  },
  "5dac": {
    "id": "5dac",
    "label": "windowTime"
  },
  "858a": {
    "id": "858a",
    "label": "and emit the group as an array",
    "options": [
      "9070"
    ]
  },
  "c9cf": {
    "id": "c9cf",
    "label": "window"
  },
  "14dd": {
    "id": "14dd",
    "label": "until another Observable emits",
    "options": [
      "858a",
      "4155"
    ]
  },
  "bef8": {
    "id": "bef8",
    "label": "bufferWhen"
  },
  "6e56": {
    "id": "6e56",
    "label": "and emit the group as an array",
    "options": [
      "bef8"
    ]
  },
  "a453": {
    "id": "a453",
    "label": "windowWhen"
  },
  "f2f7": {
    "id": "f2f7",
    "label": "and emit the group as a nested Observable",
    "options": [
      "a453"
    ]
  },
  "537b": {
    "id": "537b",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "6e56",
      "f2f7"
    ]
  },
  "f863": {
    "id": "f863",
    "label": "bufferToggle"
  },
  "8a1b": {
    "id": "8a1b",
    "label": "and emit the group as an array",
    "options": [
      "f863"
    ]
  },
  "b5a6": {
    "id": "b5a6",
    "label": "windowToggle"
  },
  "521a": {
    "id": "521a",
    "label": "groupBy"
  },
  "01ae": {
    "id": "01ae",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "521a"
    ]
  },
  "53ba": {
    "id": "53ba",
    "label": "mergeMapTo"
  },
  "d151": {
    "id": "d151",
    "label": "mergeMap"
  },
  "2b76": {
    "id": "2b76",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "d151"
    ]
  },
  "95c5": {
    "id": "95c5",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "9992",
      "2b76"
    ]
  },
  "3c5a": {
    "id": "3c5a",
    "label": "concatMapTo"
  },
  "719b": {
    "id": "719b",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "3c5a"
    ]
  },
  "e27b": {
    "id": "e27b",
    "label": "concatMap"
  },
  "99fe": {
    "id": "99fe",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "e27b"
    ]
  },
  "d1ec": {
    "id": "d1ec",
    "label": "switchMapTo"
  },
  "1f69": {
    "id": "1f69",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "d1ec"
    ]
  },
  "88f8": {
    "id": "88f8",
    "label": "switchMap"
  },
  "909a": {
    "id": "909a",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "88f8"
    ]
  },
  "006e": {
    "id": "006e",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "1f69",
      "909a"
    ]
  },
  "14fa": {
    "id": "14fa",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "4607"
    ]
  },
  "4f9b": {
    "id": "4f9b",
    "label": "I want to start a new Observable for each value",
    "options": [
      "95c5",
      "8832",
      "006e",
      "6342",
      "14fa"
    ]
  },
  "249c": {
    "id": "249c",
    "label": "pipe"
  },
  "a326": {
    "id": "a326",
    "label": "share"
  },
  "0e31": {
    "id": "0e31",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "a326"
    ]
  },
  "e46c": {
    "id": "e46c",
    "label": "publish"
  },
  "08f0": {
    "id": "08f0",
    "label": "and start it manually or imperatively",
    "options": [
      "e46c"
    ]
  },
  "e4b4": {
    "id": "e4b4",
    "label": "publishBehavior"
  },
  "a9ef": {
    "id": "a9ef",
    "label": "using a BehaviorSubject",
    "options": [
      "e4b4"
    ]
  },
  "bd17": {
    "id": "bd17",
    "label": "publishReplay"
  },
  "60d7": {
    "id": "60d7",
    "label": "using a ReplaySubject",
    "options": [
      "bd17"
    ]
  },
  "b095": {
    "id": "b095",
    "label": "publishLast"
  },
  "6c38": {
    "id": "6c38",
    "label": "using an AsyncSubject",
    "options": [
      "b095"
    ]
  },
  "2dac": {
    "id": "2dac",
    "label": "multicast"
  },
  "f670": {
    "id": "f670",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "5389",
      "a9ef",
      "60d7",
      "6c38",
      "9116"
    ]
  },
  "a740": {
    "id": "a740",
    "label": "I want to start a new Observable",
    "options": [
      "2662"
    ]
  },
  "e3b7": {
    "id": "e3b7",
    "label": "retry"
  },
  "2dba": {
    "id": "2dba",
    "label": "immediately",
    "options": [
      "e3b7"
    ]
  },
  "206c": {
    "id": "206c",
    "label": "retryWhen"
  },
  "46d1": {
    "id": "46d1",
    "label": "repeat"
  },
  "1b3e": {
    "id": "1b3e",
    "label": "immediately",
    "options": [
      "46d1"
    ]
  },
  "af2e": {
    "id": "af2e",
    "label": "when another Observable emits",
    "options": [
      "7944"
    ]
  },
  "6fe7": {
    "id": "6fe7",
    "label": "I want to re-subscribe",
    "options": [
      "1b3e",
      "af2e"
    ]
  },
  "53b6": {
    "id": "53b6",
    "label": "concat"
  },
  "a0bb": {
    "id": "a0bb",
    "label": "I want to start a new Observable",
    "options": [
      "53b6"
    ]
  },
  "3b11": {
    "id": "3b11",
    "label": "when it completes",
    "options": [
      "6fe7",
      "a0bb"
    ]
  },
  "dbf7": {
    "id": "dbf7",
    "label": "finalize"
  },
  "1c21": {
    "id": "1c21",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "dbf7"
    ]
  },
  "0481": {
    "id": "0481",
    "label": "subscribeOn"
  },
  "a590": {
    "id": "a590",
    "label": "that routes calls to subscribe",
    "options": [
      "0481"
    ]
  },
  "af9d": {
    "id": "af9d",
    "label": "that routes values to observers",
    "options": [
      "2212"
    ]
  },
  "2e07": {
    "id": "2e07",
    "label": "I want to change the scheduler",
    "options": [
      "a590",
      "af9d"
    ]
  },
  "82b0": {
    "id": "82b0",
    "label": "race"
  },
  "40b9": {
    "id": "40b9",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "82b0"
    ]
  },
  "55b2": {
    "id": "55b2",
    "label": "merge"
  },
  "31ca": {
    "id": "31ca",
    "label": "I want to output the values from either of them",
    "options": [
      "55b2"
    ]
  },
  "e888": {
    "id": "e888",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "4440"
    ]
  },
  "5b87": {
    "id": "5b87",
    "label": "using each source value only once",
    "options": [
      "8851"
    ]
  },
  "523a": {
    "id": "523a",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "2853",
      "e888",
      "5b87"
    ]
  },
  "5bf7": {
    "id": "5bf7",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "40b9",
      "31ca",
      "523a"
    ]
  },
  "72cb": {
    "id": "72cb",
    "label": "race"
  },
  "41d9": {
    "id": "41d9",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "72cb"
    ]
  },
  "9b7d": {
    "id": "9b7d",
    "label": "forkJoin"
  },
  "69cb": {
    "id": "69cb",
    "label": "merge"
  },
  "309f": {
    "id": "309f",
    "label": "I want to output the values from either of them",
    "options": [
      "69cb"
    ]
  },
  "bbf6": {
    "id": "bbf6",
    "label": "combineLatest"
  },
  "a8fa": {
    "id": "a8fa",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "bbf6"
    ]
  },
  "548e": {
    "id": "548e",
    "label": "zip"
  },
  "ff26": {
    "id": "ff26",
    "label": "using each source value only once",
    "options": [
      "548e"
    ]
  },
  "3dde": {
    "id": "3dde",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "a8fa",
      "ff26"
    ]
  },
  "02a4": {
    "id": "02a4",
    "label": "concat"
  },
  "fb0a": {
    "id": "fb0a",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "41d9",
      "2108",
      "309f",
      "3dde",
      "7412"
    ]
  },
  "4bfc": {
    "id": "4bfc",
    "label": "Observable",
    "method": "create"
  },
  "446b": {
    "id": "446b",
    "label": "using custom logic",
    "options": [
      "4bfc"
    ]
  },
  "fa75": {
    "id": "fa75",
    "label": "generate"
  },
  "089e": {
    "id": "089e",
    "label": "using a state machine similar to a for loop",
    "options": [
      "fa75"
    ]
  },
  "386f": {
    "id": "386f",
    "label": "throwError"
  },
  "51d4": {
    "id": "51d4",
    "label": "that throws an error",
    "options": [
      "386f"
    ]
  },
  "c342": {
    "id": "c342",
    "label": "EMPTY"
  },
  "c68a": {
    "id": "c68a",
    "label": "NEVER"
  },
  "562b": {
    "id": "562b",
    "label": "that never emits anything",
    "options": [
      "c68a"
    ]
  },
  "c426": {
    "id": "c426",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "5033"
    ]
  },
  "b3d1": {
    "id": "b3d1",
    "label": "fromEventPattern"
  },
  "a1d2": {
    "id": "a1d2",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "b3d1"
    ]
  },
  "94b1": {
    "id": "94b1",
    "label": "from an existing source of events",
    "options": [
      "c426",
      "a1d2"
    ]
  },
  "11a5": {
    "id": "11a5",
    "label": "from"
  },
  "4acb": {
    "id": "4acb",
    "label": "from a Promise or an event source",
    "options": [
      "11a5"
    ]
  },
  "ce23": {
    "id": "ce23",
    "label": "from"
  },
  "ccd2": {
    "id": "ccd2",
    "label": "over the values in an array",
    "options": [
      "ce23"
    ]
  },
  "e1fe": {
    "id": "e1fe",
    "label": "range"
  },
  "2b51": {
    "id": "2b51",
    "label": "over values in a numeric range",
    "options": [
      "e1fe"
    ]
  },
  "fa38": {
    "id": "fa38",
    "label": "over prefined values given as arguments",
    "options": [
      "1714"
    ]
  },
  "e901": {
    "id": "e901",
    "label": "regularly",
    "options": [
      "1053"
    ]
  },
  "5aab": {
    "id": "5aab",
    "label": "timer"
  },
  "7c0e": {
    "id": "7c0e",
    "label": "with an optional initial delay",
    "options": [
      "5aab"
    ]
  },
  "4d5e": {
    "id": "4d5e",
    "label": "defer"
  },
  "f593": {
    "id": "f593",
    "label": "which is built on demand when subscribed",
    "options": [
      "4d5e"
    ]
  },
  "8a65": {
    "id": "8a65",
    "label": "I want to create a new Observable",
    "options": [
      "446b",
      "089e",
      "51d4",
      "9754",
      "562b",
      "94b1",
      "4acb",
      "2763",
      "8824",
      "f593"
    ]
  },
  "4c7a": {
    "id": "4c7a",
    "label": "bindCallback"
  },
  "5eae": {
    "id": "5eae",
    "label": "bindNodeCallback"
  },
  "61bb": {
    "id": "61bb",
    "label": "supporting Node.js callback style API",
    "options": [
      "5eae"
    ]
  },
  "bb2b": {
    "id": "bb2b",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "6475",
      "61bb"
    ]
  },
  "66a2": {
    "id": "66a2",
    "label": "I have no Observables yet, and",
    "options": [
      "8a65",
      "bb2b"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "4904",
      "fb0a",
      "66a2"
    ]
  }
}