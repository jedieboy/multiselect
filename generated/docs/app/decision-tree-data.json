{
  "1099": {
    "id": "1099",
    "label": "tap"
  },
  "1298": {
    "id": "1298",
    "label": "distinctUntilChanged"
  },
  "1322": {
    "id": "1322",
    "label": "using custom logic",
    "options": [
      "cbd5"
    ]
  },
  "1490": {
    "id": "1490",
    "label": "bindNodeCallback"
  },
  "1970": {
    "id": "1970",
    "label": "until the Observable completes",
    "options": [
      "22ae",
      "5787"
    ]
  },
  "2110": {
    "id": "2110",
    "label": "range"
  },
  "2136": {
    "id": "2136",
    "label": "and start it manually or imperatively",
    "options": [
      "24f4"
    ]
  },
  "2287": {
    "id": "2287",
    "label": "I want to ensure there is only one value",
    "options": [
      "1b95"
    ]
  },
  "2556": {
    "id": "2556",
    "label": "concat"
  },
  "3020": {
    "id": "3020",
    "label": "skipLast"
  },
  "3530": {
    "id": "3530",
    "label": "based on custom logic",
    "options": [
      "52bc"
    ]
  },
  "4024": {
    "id": "4024",
    "label": "audit"
  },
  "4318": {
    "id": "4318",
    "label": "I want to perform custom operations",
    "options": [
      "6f1e"
    ]
  },
  "4525": {
    "id": "4525",
    "label": "based on custom logic",
    "options": [
      "b9cf"
    ]
  },
  "4617": {
    "id": "4617",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "3d9d"
    ]
  },
  "4799": {
    "id": "4799",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "ab6c",
      "bd42",
      "9b57"
    ]
  },
  "5064": {
    "id": "5064",
    "label": "if they are exactly the n-th emission",
    "options": [
      "59c7"
    ]
  },
  "5726": {
    "id": "5726",
    "label": "immediately",
    "options": [
      "844e"
    ]
  },
  "5753": {
    "id": "5753",
    "label": "when it completes",
    "options": [
      "065f",
      "9729"
    ]
  },
  "5774": {
    "id": "5774",
    "label": "in batches of a particular size",
    "options": [
      "2d0f",
      "c2a8"
    ]
  },
  "5787": {
    "id": "5787",
    "label": "and convert to a Promise",
    "options": [
      "d70e"
    ]
  },
  "5835": {
    "id": "5835",
    "label": "and only the first value",
    "options": [
      "0a38"
    ]
  },
  "6048": {
    "id": "6048",
    "label": "and emit the group as a nested Observable",
    "options": [
      "fecc"
    ]
  },
  "6073": {
    "id": "6073",
    "label": "buffer"
  },
  "6120": {
    "id": "6120",
    "label": "debounceTime"
  },
  "6352": {
    "id": "6352",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "8f15",
      "3e5d"
    ]
  },
  "7003": {
    "id": "7003",
    "label": "I want to subscribe to each in order",
    "options": [
      "bc8f"
    ]
  },
  "7156": {
    "id": "7156",
    "label": "distinct"
  },
  "7220": {
    "id": "7220",
    "label": "altogether",
    "options": [
      "3d46"
    ]
  },
  "7391": {
    "id": "7391",
    "label": "that just completes, without emitting values",
    "options": [
      "26d0"
    ]
  },
  "7625": {
    "id": "7625",
    "label": "that never emits anything",
    "options": [
      "765d"
    ]
  },
  "7764": {
    "id": "7764",
    "label": "windowTime"
  },
  "8105": {
    "id": "8105",
    "label": "forkJoin"
  },
  "8179": {
    "id": "8179",
    "label": "I want to throw an error",
    "options": [
      "9d94"
    ]
  },
  "8240": {
    "id": "8240",
    "label": "publishLast"
  },
  "8267": {
    "id": "8267",
    "label": "that occur too frequently",
    "options": [
      "3c9a",
      "bfe2",
      "a29a"
    ]
  },
  "8876": {
    "id": "8876",
    "label": "mapTo"
  },
  "9557": {
    "id": "9557",
    "label": "I want to delay the emissions",
    "options": [
      "bfff",
      "9925"
    ]
  },
  "9729": {
    "id": "9729",
    "label": "I want to start a new Observable",
    "options": [
      "2556"
    ]
  },
  "9925": {
    "id": "9925",
    "label": "based on the emissions of another Observable",
    "options": [
      "7f2f"
    ]
  },
  "ae85": {
    "id": "ae85",
    "label": "to be a constant value",
    "options": [
      "8876"
    ]
  },
  "dacd": {
    "id": "dacd",
    "label": "map"
  },
  "53de": {
    "id": "53de",
    "label": "to be a value calculated through a formula",
    "options": [
      "dacd"
    ]
  },
  "c52d": {
    "id": "c52d",
    "label": "I want to change each emitted value",
    "options": [
      "ae85",
      "53de"
    ]
  },
  "8ce1": {
    "id": "8ce1",
    "label": "pluck"
  },
  "1c59": {
    "id": "1c59",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "8ce1"
    ]
  },
  "c05a": {
    "id": "c05a",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "1099"
    ]
  },
  "bd67": {
    "id": "bd67",
    "label": "filter"
  },
  "a82c": {
    "id": "a82c",
    "label": "based on custom logic",
    "options": [
      "bd67"
    ]
  },
  "0a38": {
    "id": "0a38",
    "label": "first"
  },
  "abfe": {
    "id": "abfe",
    "label": "take"
  },
  "6a05": {
    "id": "6a05",
    "label": "based on a given amount",
    "options": [
      "abfe"
    ]
  },
  "b9cf": {
    "id": "b9cf",
    "label": "takeWhile"
  },
  "dd4f": {
    "id": "dd4f",
    "label": "if they are at the start of the Observable",
    "options": [
      "5835",
      "6a05",
      "4525"
    ]
  },
  "59c7": {
    "id": "59c7",
    "label": "elementAt"
  },
  "a308": {
    "id": "a308",
    "label": "last"
  },
  "18ca": {
    "id": "18ca",
    "label": "and only the last value",
    "options": [
      "a308"
    ]
  },
  "633f": {
    "id": "633f",
    "label": "takeLast"
  },
  "8dbd": {
    "id": "8dbd",
    "label": "based on a given amount",
    "options": [
      "633f"
    ]
  },
  "86be": {
    "id": "86be",
    "label": "if they are at the end of the Observable",
    "options": [
      "18ca",
      "8dbd"
    ]
  },
  "588d": {
    "id": "588d",
    "label": "takeUntil"
  },
  "cf83": {
    "id": "cf83",
    "label": "until another Observable emits a value",
    "options": [
      "588d"
    ]
  },
  "0d29": {
    "id": "0d29",
    "label": "I want to allow some values to pass",
    "options": [
      "a82c",
      "dd4f",
      "5064",
      "86be",
      "cf83"
    ]
  },
  "3d46": {
    "id": "3d46",
    "label": "ignoreElements"
  },
  "5c7f": {
    "id": "5c7f",
    "label": "skip"
  },
  "93d5": {
    "id": "93d5",
    "label": "based on a given amount",
    "options": [
      "5c7f"
    ]
  },
  "52bc": {
    "id": "52bc",
    "label": "skipWhile"
  },
  "189c": {
    "id": "189c",
    "label": "from the start of the Observable",
    "options": [
      "93d5",
      "3530"
    ]
  },
  "c2dd": {
    "id": "c2dd",
    "label": "from the end of the Observable",
    "options": [
      "3020"
    ]
  },
  "0d7f": {
    "id": "0d7f",
    "label": "skipUntil"
  },
  "f7d7": {
    "id": "f7d7",
    "label": "until another Observable emits a value",
    "options": [
      "0d7f"
    ]
  },
  "317a": {
    "id": "317a",
    "label": "emitted just before the current value",
    "options": [
      "1298"
    ]
  },
  "91e0": {
    "id": "91e0",
    "label": "emitted some time in the past",
    "options": [
      "7156"
    ]
  },
  "98d6": {
    "id": "98d6",
    "label": "according to value equality",
    "options": [
      "317a",
      "91e0"
    ]
  },
  "72d8": {
    "id": "72d8",
    "label": "distinctUntilKeyChanged"
  },
  "0924": {
    "id": "0924",
    "label": "emitted just before the current value",
    "options": [
      "72d8"
    ]
  },
  "41e0": {
    "id": "41e0",
    "label": "according to a key or object property",
    "options": [
      "0924"
    ]
  },
  "65f2": {
    "id": "65f2",
    "label": "that match some previous value",
    "options": [
      "98d6",
      "41e0"
    ]
  },
  "588e": {
    "id": "588e",
    "label": "throttle"
  },
  "b5d1": {
    "id": "b5d1",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "588e"
    ]
  },
  "02a8": {
    "id": "02a8",
    "label": "throttleTime"
  },
  "ad05": {
    "id": "ad05",
    "label": "where time windows are determined by a time duration",
    "options": [
      "02a8"
    ]
  },
  "3c9a": {
    "id": "3c9a",
    "label": "by emitting the first value in each time window",
    "options": [
      "b5d1",
      "ad05"
    ]
  },
  "2b36": {
    "id": "2b36",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "4024"
    ]
  },
  "a4b1": {
    "id": "a4b1",
    "label": "auditTime"
  },
  "5e79": {
    "id": "5e79",
    "label": "where time windows are determined by a time duration",
    "options": [
      "a4b1"
    ]
  },
  "bfe2": {
    "id": "bfe2",
    "label": "by emitting the last value in each time window",
    "options": [
      "2b36",
      "5e79"
    ]
  },
  "66e7": {
    "id": "66e7",
    "label": "debounce"
  },
  "b96a": {
    "id": "b96a",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "66e7"
    ]
  },
  "0135": {
    "id": "0135",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "6120"
    ]
  },
  "a29a": {
    "id": "a29a",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "b96a",
      "0135"
    ]
  },
  "958e": {
    "id": "958e",
    "label": "I want to ignore values",
    "options": [
      "7220",
      "189c",
      "c2dd",
      "f7d7",
      "65f2",
      "8267"
    ]
  },
  "9d1d": {
    "id": "9d1d",
    "label": "reduce"
  },
  "7a69": {
    "id": "7a69",
    "label": "and only output the final computed value",
    "options": [
      "9d1d"
    ]
  },
  "42c7": {
    "id": "42c7",
    "label": "scan"
  },
  "aa00": {
    "id": "aa00",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "42c7"
    ]
  },
  "3d9d": {
    "id": "3d9d",
    "label": "mergeScan"
  },
  "137e": {
    "id": "137e",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "7a69",
      "aa00",
      "4617"
    ]
  },
  "d7ae": {
    "id": "d7ae",
    "label": "materialize"
  },
  "72e5": {
    "id": "72e5",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "d7ae"
    ]
  },
  "125e": {
    "id": "125e",
    "label": "timeInterval"
  },
  "4e4a": {
    "id": "4e4a",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "125e"
    ]
  },
  "af3a": {
    "id": "af3a",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "72e5",
      "4e4a"
    ]
  },
  "9d94": {
    "id": "9d94",
    "label": "timeout"
  },
  "ed3e": {
    "id": "ed3e",
    "label": "timeoutWith"
  },
  "238f": {
    "id": "238f",
    "label": "I want to switch to another Observable",
    "options": [
      "ed3e"
    ]
  },
  "1a72": {
    "id": "1a72",
    "label": "after a period of inactivity",
    "options": [
      "8179",
      "238f"
    ]
  },
  "1b95": {
    "id": "1b95",
    "label": "single"
  },
  "17ed": {
    "id": "17ed",
    "label": "count"
  },
  "d761": {
    "id": "d761",
    "label": "I want to know how many values it emits",
    "options": [
      "17ed"
    ]
  },
  "87b8": {
    "id": "87b8",
    "label": "startWith"
  },
  "dcaf": {
    "id": "dcaf",
    "label": "I want to prepend one value",
    "options": [
      "87b8"
    ]
  },
  "3d65": {
    "id": "3d65",
    "label": "delay"
  },
  "bfff": {
    "id": "bfff",
    "label": "based on a given amount of time",
    "options": [
      "3d65"
    ]
  },
  "7f2f": {
    "id": "7f2f",
    "label": "delayWhen"
  },
  "cc3d": {
    "id": "cc3d",
    "label": "toArray"
  },
  "22ae": {
    "id": "22ae",
    "label": "and convert to an array",
    "options": [
      "cc3d"
    ]
  },
  "d70e": {
    "id": "d70e",
    "label": "Observable",
    "method": "toPromise"
  },
  "95a5": {
    "id": "95a5",
    "label": "pairwise"
  },
  "0f18": {
    "id": "0f18",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "95a5"
    ]
  },
  "897a": {
    "id": "897a",
    "label": "partition"
  },
  "37a5": {
    "id": "37a5",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "897a"
    ]
  },
  "762c": {
    "id": "762c",
    "label": "bufferCount"
  },
  "2d0f": {
    "id": "2d0f",
    "label": "and emit the group as an array",
    "options": [
      "762c"
    ]
  },
  "3dbd": {
    "id": "3dbd",
    "label": "windowCount"
  },
  "c2a8": {
    "id": "c2a8",
    "label": "and emit the group as a nested Observable",
    "options": [
      "3dbd"
    ]
  },
  "c6a2": {
    "id": "c6a2",
    "label": "bufferTime"
  },
  "37f0": {
    "id": "37f0",
    "label": "and emit the group as an array",
    "options": [
      "c6a2"
    ]
  },
  "15e6": {
    "id": "15e6",
    "label": "and emit the group as a nested Observable",
    "options": [
      "7764"
    ]
  },
  "86f1": {
    "id": "86f1",
    "label": "based on time",
    "options": [
      "37f0",
      "15e6"
    ]
  },
  "42e7": {
    "id": "42e7",
    "label": "and emit the group as an array",
    "options": [
      "6073"
    ]
  },
  "fecc": {
    "id": "fecc",
    "label": "window"
  },
  "19a4": {
    "id": "19a4",
    "label": "until another Observable emits",
    "options": [
      "42e7",
      "6048"
    ]
  },
  "b0c9": {
    "id": "b0c9",
    "label": "bufferWhen"
  },
  "78e9": {
    "id": "78e9",
    "label": "and emit the group as an array",
    "options": [
      "b0c9"
    ]
  },
  "bf4a": {
    "id": "bf4a",
    "label": "windowWhen"
  },
  "5a55": {
    "id": "5a55",
    "label": "and emit the group as a nested Observable",
    "options": [
      "bf4a"
    ]
  },
  "8ecd": {
    "id": "8ecd",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "78e9",
      "5a55"
    ]
  },
  "a8b7": {
    "id": "a8b7",
    "label": "bufferToggle"
  },
  "77db": {
    "id": "77db",
    "label": "and emit the group as an array",
    "options": [
      "a8b7"
    ]
  },
  "d405": {
    "id": "d405",
    "label": "windowToggle"
  },
  "4cc3": {
    "id": "4cc3",
    "label": "and emit the group as a nested Observable",
    "options": [
      "d405"
    ]
  },
  "6ec6": {
    "id": "6ec6",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "77db",
      "4cc3"
    ]
  },
  "f4f5": {
    "id": "f4f5",
    "label": "groupBy"
  },
  "7c41": {
    "id": "7c41",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "f4f5"
    ]
  },
  "ea1f": {
    "id": "ea1f",
    "label": "I want to group the values",
    "options": [
      "1970",
      "0f18",
      "37a5",
      "5774",
      "86f1",
      "19a4",
      "8ecd",
      "6ec6",
      "7c41"
    ]
  },
  "37d0": {
    "id": "37d0",
    "label": "mergeMapTo"
  },
  "2aa4": {
    "id": "2aa4",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "37d0"
    ]
  },
  "1a85": {
    "id": "1a85",
    "label": "mergeMap"
  },
  "dc7e": {
    "id": "dc7e",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "1a85"
    ]
  },
  "292c": {
    "id": "292c",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "2aa4",
      "dc7e"
    ]
  },
  "6da5": {
    "id": "6da5",
    "label": "concatMapTo"
  },
  "8f15": {
    "id": "8f15",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "6da5"
    ]
  },
  "ffd3": {
    "id": "ffd3",
    "label": "concatMap"
  },
  "3e5d": {
    "id": "3e5d",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "ffd3"
    ]
  },
  "ee8c": {
    "id": "ee8c",
    "label": "switchMapTo"
  },
  "ead7": {
    "id": "ead7",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "ee8c"
    ]
  },
  "9a01": {
    "id": "9a01",
    "label": "switchMap"
  },
  "6b67": {
    "id": "6b67",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "9a01"
    ]
  },
  "8f23": {
    "id": "8f23",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "ead7",
      "6b67"
    ]
  },
  "721b": {
    "id": "721b",
    "label": "exhaustMap"
  },
  "701d": {
    "id": "701d",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "721b"
    ]
  },
  "f5cb": {
    "id": "f5cb",
    "label": "expand"
  },
  "597b": {
    "id": "597b",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "f5cb"
    ]
  },
  "998b": {
    "id": "998b",
    "label": "I want to start a new Observable for each value",
    "options": [
      "292c",
      "6352",
      "8f23",
      "701d",
      "597b"
    ]
  },
  "6f1e": {
    "id": "6f1e",
    "label": "pipe"
  },
  "25c0": {
    "id": "25c0",
    "label": "share"
  },
  "0120": {
    "id": "0120",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "25c0"
    ]
  },
  "24f4": {
    "id": "24f4",
    "label": "publish"
  },
  "d5fa": {
    "id": "d5fa",
    "label": "using a conventional Subject",
    "options": [
      "0120",
      "2136"
    ]
  },
  "c41b": {
    "id": "c41b",
    "label": "publishBehavior"
  },
  "e338": {
    "id": "e338",
    "label": "using a BehaviorSubject",
    "options": [
      "c41b"
    ]
  },
  "ed12": {
    "id": "ed12",
    "label": "publishReplay"
  },
  "23c7": {
    "id": "23c7",
    "label": "using a ReplaySubject",
    "options": [
      "ed12"
    ]
  },
  "ceb8": {
    "id": "ceb8",
    "label": "using an AsyncSubject",
    "options": [
      "8240"
    ]
  },
  "73bf": {
    "id": "73bf",
    "label": "multicast"
  },
  "7bf7": {
    "id": "7bf7",
    "label": "using a specific subject implementation",
    "options": [
      "73bf"
    ]
  },
  "8c3a": {
    "id": "8c3a",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "d5fa",
      "e338",
      "23c7",
      "ceb8",
      "7bf7"
    ]
  },
  "9e77": {
    "id": "9e77",
    "label": "catchError"
  },
  "0bee": {
    "id": "0bee",
    "label": "I want to start a new Observable",
    "options": [
      "9e77"
    ]
  },
  "826a": {
    "id": "826a",
    "label": "retry"
  },
  "f801": {
    "id": "f801",
    "label": "immediately",
    "options": [
      "826a"
    ]
  },
  "13e6": {
    "id": "13e6",
    "label": "retryWhen"
  },
  "3d6c": {
    "id": "3d6c",
    "label": "when another Observable emits",
    "options": [
      "13e6"
    ]
  },
  "055e": {
    "id": "055e",
    "label": "I want to re-subscribe",
    "options": [
      "f801",
      "3d6c"
    ]
  },
  "7bd4": {
    "id": "7bd4",
    "label": "when an error occurs",
    "options": [
      "0bee",
      "055e"
    ]
  },
  "844e": {
    "id": "844e",
    "label": "repeat"
  },
  "31b6": {
    "id": "31b6",
    "label": "repeatWhen"
  },
  "92df": {
    "id": "92df",
    "label": "when another Observable emits",
    "options": [
      "31b6"
    ]
  },
  "065f": {
    "id": "065f",
    "label": "I want to re-subscribe",
    "options": [
      "5726",
      "92df"
    ]
  },
  "c7a7": {
    "id": "c7a7",
    "label": "finalize"
  },
  "bef1": {
    "id": "bef1",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "c7a7"
    ]
  },
  "1e06": {
    "id": "1e06",
    "label": "subscribeOn"
  },
  "3e66": {
    "id": "3e66",
    "label": "that routes calls to subscribe",
    "options": [
      "1e06"
    ]
  },
  "33ec": {
    "id": "33ec",
    "label": "observeOn"
  },
  "2fd4": {
    "id": "2fd4",
    "label": "that routes values to observers",
    "options": [
      "33ec"
    ]
  },
  "c6e3": {
    "id": "c6e3",
    "label": "I want to change the scheduler",
    "options": [
      "3e66",
      "2fd4"
    ]
  },
  "deaf": {
    "id": "deaf",
    "label": "race"
  },
  "d0e6": {
    "id": "d0e6",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "deaf"
    ]
  },
  "3c3c": {
    "id": "3c3c",
    "label": "merge"
  },
  "15da": {
    "id": "15da",
    "label": "I want to output the values from either of them",
    "options": [
      "3c3c"
    ]
  },
  "ce7e": {
    "id": "ce7e",
    "label": "combineLatest"
  },
  "ab6c": {
    "id": "ab6c",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "ce7e"
    ]
  },
  "a61d": {
    "id": "a61d",
    "label": "withLatestFrom"
  },
  "bd42": {
    "id": "bd42",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "a61d"
    ]
  },
  "10e5": {
    "id": "10e5",
    "label": "zip"
  },
  "9b57": {
    "id": "9b57",
    "label": "using each source value only once",
    "options": [
      "10e5"
    ]
  },
  "6d37": {
    "id": "6d37",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "d0e6",
      "15da",
      "4799"
    ]
  },
  "5cb3": {
    "id": "5cb3",
    "label": "I have one existing Observable, and",
    "options": [
      "c52d",
      "1c59",
      "c05a",
      "0d29",
      "958e",
      "137e",
      "af3a",
      "1a72",
      "2287",
      "d761",
      "dcaf",
      "9557",
      "ea1f",
      "998b",
      "4318",
      "8c3a",
      "7bd4",
      "5753",
      "bef1",
      "c6e3",
      "6d37"
    ]
  },
  "6d66": {
    "id": "6d66",
    "label": "race"
  },
  "f723": {
    "id": "f723",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "6d66"
    ]
  },
  "46fb": {
    "id": "46fb",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "8105"
    ]
  },
  "81d9": {
    "id": "81d9",
    "label": "merge"
  },
  "4e0d": {
    "id": "4e0d",
    "label": "I want to output the values from either of them",
    "options": [
      "81d9"
    ]
  },
  "19d1": {
    "id": "19d1",
    "label": "combineLatest"
  },
  "22e5": {
    "id": "22e5",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "19d1"
    ]
  },
  "0196": {
    "id": "0196",
    "label": "zip"
  },
  "2d0b": {
    "id": "2d0b",
    "label": "using each source value only once",
    "options": [
      "0196"
    ]
  },
  "3d78": {
    "id": "3d78",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "22e5",
      "2d0b"
    ]
  },
  "bc8f": {
    "id": "bc8f",
    "label": "concat"
  },
  "0e3c": {
    "id": "0e3c",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "f723",
      "46fb",
      "4e0d",
      "3d78",
      "7003"
    ]
  },
  "cbd5": {
    "id": "cbd5",
    "label": "Observable",
    "method": "create"
  },
  "34f2": {
    "id": "34f2",
    "label": "generate"
  },
  "dbf5": {
    "id": "dbf5",
    "label": "using a state machine similar to a for loop",
    "options": [
      "34f2"
    ]
  },
  "28ae": {
    "id": "28ae",
    "label": "throwError"
  },
  "9b38": {
    "id": "9b38",
    "label": "that throws an error",
    "options": [
      "28ae"
    ]
  },
  "26d0": {
    "id": "26d0",
    "label": "EMPTY"
  },
  "765d": {
    "id": "765d",
    "label": "NEVER"
  },
  "37ac": {
    "id": "37ac",
    "label": "fromEvent"
  },
  "5c41": {
    "id": "5c41",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "37ac"
    ]
  },
  "9ce5": {
    "id": "9ce5",
    "label": "fromEventPattern"
  },
  "c519": {
    "id": "c519",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "9ce5"
    ]
  },
  "6a24": {
    "id": "6a24",
    "label": "from an existing source of events",
    "options": [
      "5c41",
      "c519"
    ]
  },
  "c9ec": {
    "id": "c9ec",
    "label": "from"
  },
  "ba92": {
    "id": "ba92",
    "label": "from a Promise or an event source",
    "options": [
      "c9ec"
    ]
  },
  "2fda": {
    "id": "2fda",
    "label": "from"
  },
  "dae9": {
    "id": "dae9",
    "label": "over the values in an array",
    "options": [
      "2fda"
    ]
  },
  "5e43": {
    "id": "5e43",
    "label": "over values in a numeric range",
    "options": [
      "2110"
    ]
  },
  "db1b": {
    "id": "db1b",
    "label": "of"
  },
  "fe77": {
    "id": "fe77",
    "label": "over prefined values given as arguments",
    "options": [
      "db1b"
    ]
  },
  "f62e": {
    "id": "f62e",
    "label": "that iterates",
    "options": [
      "dae9",
      "5e43",
      "fe77"
    ]
  },
  "0ac0": {
    "id": "0ac0",
    "label": "interval"
  },
  "e4c8": {
    "id": "e4c8",
    "label": "regularly",
    "options": [
      "0ac0"
    ]
  },
  "8dc3": {
    "id": "8dc3",
    "label": "timer"
  },
  "c737": {
    "id": "c737",
    "label": "with an optional initial delay",
    "options": [
      "8dc3"
    ]
  },
  "0764": {
    "id": "0764",
    "label": "that emits values on a timer",
    "options": [
      "e4c8",
      "c737"
    ]
  },
  "0c5d": {
    "id": "0c5d",
    "label": "defer"
  },
  "f552": {
    "id": "f552",
    "label": "which is built on demand when subscribed",
    "options": [
      "0c5d"
    ]
  },
  "42bf": {
    "id": "42bf",
    "label": "I want to create a new Observable",
    "options": [
      "1322",
      "dbf5",
      "9b38",
      "7391",
      "7625",
      "6a24",
      "ba92",
      "f62e",
      "0764",
      "f552"
    ]
  },
  "ab33": {
    "id": "ab33",
    "label": "bindCallback"
  },
  "def7": {
    "id": "def7",
    "label": "supporting a conventional callback API",
    "options": [
      "ab33"
    ]
  },
  "5c42": {
    "id": "5c42",
    "label": "supporting Node.js callback style API",
    "options": [
      "1490"
    ]
  },
  "d3fc": {
    "id": "d3fc",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "def7",
      "5c42"
    ]
  },
  "c79d": {
    "id": "c79d",
    "label": "I have no Observables yet, and",
    "options": [
      "42bf",
      "d3fc"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "5cb3",
      "0e3c",
      "c79d"
    ]
  }
}