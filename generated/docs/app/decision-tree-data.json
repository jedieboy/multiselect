{
  "1111": {
    "id": "1111",
    "label": "that iterates",
    "options": [
      "ffa4",
      "de3a",
      "122f"
    ]
  },
  "1239": {
    "id": "1239",
    "label": "based on custom logic",
    "options": [
      "509b"
    ]
  },
  "1507": {
    "id": "1507",
    "label": "based on custom logic",
    "options": [
      "39a9"
    ]
  },
  "1573": {
    "id": "1573",
    "label": "I want to create a new Observable",
    "options": [
      "9d71",
      "ed9f",
      "25f5",
      "0041",
      "1df6",
      "65a0",
      "d412",
      "1111",
      "1fa6",
      "eee0"
    ]
  },
  "2374": {
    "id": "2374",
    "label": "repeat"
  },
  "2632": {
    "id": "2632",
    "label": "from the start of the Observable",
    "options": [
      "cbb7",
      "1239"
    ]
  },
  "2700": {
    "id": "2700",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "41dc"
    ]
  },
  "2866": {
    "id": "2866",
    "label": "windowWhen"
  },
  "3208": {
    "id": "3208",
    "label": "elementAt"
  },
  "3497": {
    "id": "3497",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "bbb6",
      "c06e"
    ]
  },
  "3593": {
    "id": "3593",
    "label": "where time windows are determined by a time duration",
    "options": [
      "33b1"
    ]
  },
  "3655": {
    "id": "3655",
    "label": "delayWhen"
  },
  "4436": {
    "id": "4436",
    "label": "defer"
  },
  "4574": {
    "id": "4574",
    "label": "until another Observable emits",
    "options": [
      "9955",
      "a20b"
    ]
  },
  "4767": {
    "id": "4767",
    "label": "publishReplay"
  },
  "4824": {
    "id": "4824",
    "label": "using each source value only once",
    "options": [
      "0ee6"
    ]
  },
  "5099": {
    "id": "5099",
    "label": "timer"
  },
  "5232": {
    "id": "5232",
    "label": "to be a value calculated through a formula",
    "options": [
      "edb0"
    ]
  },
  "5617": {
    "id": "5617",
    "label": "bufferWhen"
  },
  "5767": {
    "id": "5767",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "aaaf"
    ]
  },
  "5825": {
    "id": "5825",
    "label": "debounce"
  },
  "6035": {
    "id": "6035",
    "label": "distinct"
  },
  "6618": {
    "id": "6618",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "e230",
      "17bc"
    ]
  },
  "6906": {
    "id": "6906",
    "label": "I want to allow some values to pass",
    "options": [
      "232e",
      "dc18",
      "e5c8",
      "c0ba",
      "aeeb"
    ]
  },
  "7154": {
    "id": "7154",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "3b90",
      "b89b"
    ]
  },
  "8299": {
    "id": "8299",
    "label": "subscribeOn"
  },
  "8300": {
    "id": "8300",
    "label": "switchMapTo"
  },
  "8757": {
    "id": "8757",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "26af",
      "e4d7",
      "f21b"
    ]
  },
  "8792": {
    "id": "8792",
    "label": "based on the emissions of another Observable",
    "options": [
      "3655"
    ]
  },
  "9030": {
    "id": "9030",
    "label": "and emit the group as an array",
    "options": [
      "b96c"
    ]
  },
  "9347": {
    "id": "9347",
    "label": "emitted just before the current value",
    "options": [
      "daab"
    ]
  },
  "9635": {
    "id": "9635",
    "label": "supporting a conventional callback API",
    "options": [
      "fc69"
    ]
  },
  "9955": {
    "id": "9955",
    "label": "and emit the group as an array",
    "options": [
      "9ba7"
    ]
  },
  "ce9b": {
    "id": "ce9b",
    "label": "mapTo"
  },
  "0b42": {
    "id": "0b42",
    "label": "to be a constant value",
    "options": [
      "ce9b"
    ]
  },
  "edb0": {
    "id": "edb0",
    "label": "map"
  },
  "a129": {
    "id": "a129",
    "label": "I want to change each emitted value",
    "options": [
      "0b42",
      "5232"
    ]
  },
  "a811": {
    "id": "a811",
    "label": "pluck"
  },
  "bdb4": {
    "id": "bdb4",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "a811"
    ]
  },
  "bb59": {
    "id": "bb59",
    "label": "tap"
  },
  "18db": {
    "id": "18db",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "bb59"
    ]
  },
  "2ab6": {
    "id": "2ab6",
    "label": "filter"
  },
  "232e": {
    "id": "232e",
    "label": "based on custom logic",
    "options": [
      "2ab6"
    ]
  },
  "a124": {
    "id": "a124",
    "label": "first"
  },
  "1fc7": {
    "id": "1fc7",
    "label": "and only the first value",
    "options": [
      "a124"
    ]
  },
  "cf70": {
    "id": "cf70",
    "label": "take"
  },
  "8af5": {
    "id": "8af5",
    "label": "based on a given amount",
    "options": [
      "cf70"
    ]
  },
  "39a9": {
    "id": "39a9",
    "label": "takeWhile"
  },
  "dc18": {
    "id": "dc18",
    "label": "if they are at the start of the Observable",
    "options": [
      "1fc7",
      "8af5",
      "1507"
    ]
  },
  "e5c8": {
    "id": "e5c8",
    "label": "if they are exactly the n-th emission",
    "options": [
      "3208"
    ]
  },
  "0390": {
    "id": "0390",
    "label": "last"
  },
  "165f": {
    "id": "165f",
    "label": "and only the last value",
    "options": [
      "0390"
    ]
  },
  "5ee6": {
    "id": "5ee6",
    "label": "takeLast"
  },
  "020a": {
    "id": "020a",
    "label": "based on a given amount",
    "options": [
      "5ee6"
    ]
  },
  "c0ba": {
    "id": "c0ba",
    "label": "if they are at the end of the Observable",
    "options": [
      "165f",
      "020a"
    ]
  },
  "ca30": {
    "id": "ca30",
    "label": "takeUntil"
  },
  "aeeb": {
    "id": "aeeb",
    "label": "until another Observable emits a value",
    "options": [
      "ca30"
    ]
  },
  "f4c5": {
    "id": "f4c5",
    "label": "ignoreElements"
  },
  "af88": {
    "id": "af88",
    "label": "altogether",
    "options": [
      "f4c5"
    ]
  },
  "039d": {
    "id": "039d",
    "label": "skip"
  },
  "cbb7": {
    "id": "cbb7",
    "label": "based on a given amount",
    "options": [
      "039d"
    ]
  },
  "509b": {
    "id": "509b",
    "label": "skipWhile"
  },
  "b40d": {
    "id": "b40d",
    "label": "skipLast"
  },
  "54a8": {
    "id": "54a8",
    "label": "from the end of the Observable",
    "options": [
      "b40d"
    ]
  },
  "22cc": {
    "id": "22cc",
    "label": "skipUntil"
  },
  "0d2d": {
    "id": "0d2d",
    "label": "until another Observable emits a value",
    "options": [
      "22cc"
    ]
  },
  "daab": {
    "id": "daab",
    "label": "distinctUntilChanged"
  },
  "9dd9": {
    "id": "9dd9",
    "label": "emitted some time in the past",
    "options": [
      "6035"
    ]
  },
  "dc31": {
    "id": "dc31",
    "label": "according to value equality",
    "options": [
      "9347",
      "9dd9"
    ]
  },
  "ada8": {
    "id": "ada8",
    "label": "distinctUntilKeyChanged"
  },
  "c033": {
    "id": "c033",
    "label": "emitted just before the current value",
    "options": [
      "ada8"
    ]
  },
  "a895": {
    "id": "a895",
    "label": "according to a key or object property",
    "options": [
      "c033"
    ]
  },
  "39f6": {
    "id": "39f6",
    "label": "that match some previous value",
    "options": [
      "dc31",
      "a895"
    ]
  },
  "ed2a": {
    "id": "ed2a",
    "label": "throttle"
  },
  "a915": {
    "id": "a915",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "ed2a"
    ]
  },
  "ed35": {
    "id": "ed35",
    "label": "throttleTime"
  },
  "3ef3": {
    "id": "3ef3",
    "label": "where time windows are determined by a time duration",
    "options": [
      "ed35"
    ]
  },
  "4ba1": {
    "id": "4ba1",
    "label": "by emitting the first value in each time window",
    "options": [
      "a915",
      "3ef3"
    ]
  },
  "cabd": {
    "id": "cabd",
    "label": "audit"
  },
  "df17": {
    "id": "df17",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "cabd"
    ]
  },
  "33b1": {
    "id": "33b1",
    "label": "auditTime"
  },
  "44a8": {
    "id": "44a8",
    "label": "by emitting the last value in each time window",
    "options": [
      "df17",
      "3593"
    ]
  },
  "60cc": {
    "id": "60cc",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "5825"
    ]
  },
  "aaaf": {
    "id": "aaaf",
    "label": "debounceTime"
  },
  "1e8c": {
    "id": "1e8c",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "60cc",
      "5767"
    ]
  },
  "938d": {
    "id": "938d",
    "label": "that occur too frequently",
    "options": [
      "4ba1",
      "44a8",
      "1e8c"
    ]
  },
  "1f40": {
    "id": "1f40",
    "label": "I want to ignore values",
    "options": [
      "af88",
      "2632",
      "54a8",
      "0d2d",
      "39f6",
      "938d"
    ]
  },
  "da6a": {
    "id": "da6a",
    "label": "reduce"
  },
  "26af": {
    "id": "26af",
    "label": "and only output the final computed value",
    "options": [
      "da6a"
    ]
  },
  "e432": {
    "id": "e432",
    "label": "scan"
  },
  "e4d7": {
    "id": "e4d7",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "e432"
    ]
  },
  "0bf6": {
    "id": "0bf6",
    "label": "mergeScan"
  },
  "f21b": {
    "id": "f21b",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "0bf6"
    ]
  },
  "f89c": {
    "id": "f89c",
    "label": "materialize"
  },
  "bbb6": {
    "id": "bbb6",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "f89c"
    ]
  },
  "a01a": {
    "id": "a01a",
    "label": "timeInterval"
  },
  "c06e": {
    "id": "c06e",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "a01a"
    ]
  },
  "124b": {
    "id": "124b",
    "label": "timeout"
  },
  "c105": {
    "id": "c105",
    "label": "I want to throw an error",
    "options": [
      "124b"
    ]
  },
  "6ccc": {
    "id": "6ccc",
    "label": "timeoutWith"
  },
  "0afe": {
    "id": "0afe",
    "label": "I want to switch to another Observable",
    "options": [
      "6ccc"
    ]
  },
  "1c81": {
    "id": "1c81",
    "label": "after a period of inactivity",
    "options": [
      "c105",
      "0afe"
    ]
  },
  "f348": {
    "id": "f348",
    "label": "single"
  },
  "2b38": {
    "id": "2b38",
    "label": "I want to ensure there is only one value",
    "options": [
      "f348"
    ]
  },
  "90a0": {
    "id": "90a0",
    "label": "count"
  },
  "29eb": {
    "id": "29eb",
    "label": "I want to know how many values it emits",
    "options": [
      "90a0"
    ]
  },
  "b295": {
    "id": "b295",
    "label": "startWith"
  },
  "fc7d": {
    "id": "fc7d",
    "label": "I want to prepend one value",
    "options": [
      "b295"
    ]
  },
  "38af": {
    "id": "38af",
    "label": "delay"
  },
  "4ec8": {
    "id": "4ec8",
    "label": "based on a given amount of time",
    "options": [
      "38af"
    ]
  },
  "dd89": {
    "id": "dd89",
    "label": "I want to delay the emissions",
    "options": [
      "4ec8",
      "8792"
    ]
  },
  "f01a": {
    "id": "f01a",
    "label": "toArray"
  },
  "c1b8": {
    "id": "c1b8",
    "label": "and convert to an array",
    "options": [
      "f01a"
    ]
  },
  "5f55": {
    "id": "5f55",
    "label": "Observable",
    "method": "toPromise"
  },
  "d0ec": {
    "id": "d0ec",
    "label": "and convert to a Promise",
    "options": [
      "5f55"
    ]
  },
  "e7c3": {
    "id": "e7c3",
    "label": "until the Observable completes",
    "options": [
      "c1b8",
      "d0ec"
    ]
  },
  "0d07": {
    "id": "0d07",
    "label": "pairwise"
  },
  "9bd7": {
    "id": "9bd7",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "0d07"
    ]
  },
  "fc2f": {
    "id": "fc2f",
    "label": "partition"
  },
  "5f8e": {
    "id": "5f8e",
    "label": "EMPTY"
  },
  "d84f": {
    "id": "d84f",
    "label": "bufferCount"
  },
  "19a2": {
    "id": "19a2",
    "label": "and emit the group as an array",
    "options": [
      "d84f"
    ]
  },
  "461e": {
    "id": "461e",
    "label": "windowCount"
  },
  "aa7e": {
    "id": "aa7e",
    "label": "and emit the group as a nested Observable",
    "options": [
      "461e"
    ]
  },
  "3c23": {
    "id": "3c23",
    "label": "in batches of a particular size",
    "options": [
      "19a2",
      "aa7e"
    ]
  },
  "b96c": {
    "id": "b96c",
    "label": "bufferTime"
  },
  "0117": {
    "id": "0117",
    "label": "windowTime"
  },
  "7da0": {
    "id": "7da0",
    "label": "and emit the group as a nested Observable",
    "options": [
      "0117"
    ]
  },
  "dce9": {
    "id": "dce9",
    "label": "based on time",
    "options": [
      "9030",
      "7da0"
    ]
  },
  "9ba7": {
    "id": "9ba7",
    "label": "buffer"
  },
  "b642": {
    "id": "b642",
    "label": "window"
  },
  "a20b": {
    "id": "a20b",
    "label": "and emit the group as a nested Observable",
    "options": [
      "b642"
    ]
  },
  "2d0d": {
    "id": "2d0d",
    "label": "and emit the group as an array",
    "options": [
      "5617"
    ]
  },
  "cc48": {
    "id": "cc48",
    "label": "and emit the group as a nested Observable",
    "options": [
      "2866"
    ]
  },
  "3db6": {
    "id": "3db6",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "2d0d",
      "cc48"
    ]
  },
  "7fce": {
    "id": "7fce",
    "label": "bufferToggle"
  },
  "a3ae": {
    "id": "a3ae",
    "label": "and emit the group as an array",
    "options": [
      "7fce"
    ]
  },
  "b8bb": {
    "id": "b8bb",
    "label": "windowToggle"
  },
  "26f0": {
    "id": "26f0",
    "label": "and emit the group as a nested Observable",
    "options": [
      "b8bb"
    ]
  },
  "cfe1": {
    "id": "cfe1",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "a3ae",
      "26f0"
    ]
  },
  "41dc": {
    "id": "41dc",
    "label": "groupBy"
  },
  "ab70": {
    "id": "ab70",
    "label": "I want to group the values",
    "options": [
      "e7c3",
      "9bd7",
      "5f8e",
      "3c23",
      "dce9",
      "4574",
      "3db6",
      "cfe1",
      "2700"
    ]
  },
  "6cbd": {
    "id": "6cbd",
    "label": "mergeMapTo"
  },
  "3b90": {
    "id": "3b90",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "6cbd"
    ]
  },
  "6da5": {
    "id": "6da5",
    "label": "mergeMap"
  },
  "b89b": {
    "id": "b89b",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "6da5"
    ]
  },
  "51cf": {
    "id": "51cf",
    "label": "concatMapTo"
  },
  "e230": {
    "id": "e230",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "51cf"
    ]
  },
  "61ec": {
    "id": "61ec",
    "label": "concatMap"
  },
  "17bc": {
    "id": "17bc",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "61ec"
    ]
  },
  "a801": {
    "id": "a801",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "8300"
    ]
  },
  "2fd0": {
    "id": "2fd0",
    "label": "switchMap"
  },
  "77a1": {
    "id": "77a1",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "2fd0"
    ]
  },
  "fdab": {
    "id": "fdab",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "a801",
      "77a1"
    ]
  },
  "971d": {
    "id": "971d",
    "label": "exhaustMap"
  },
  "c636": {
    "id": "c636",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "971d"
    ]
  },
  "9df0": {
    "id": "9df0",
    "label": "expand"
  },
  "20df": {
    "id": "20df",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "9df0"
    ]
  },
  "0743": {
    "id": "0743",
    "label": "I want to start a new Observable for each value",
    "options": [
      "7154",
      "6618",
      "fdab",
      "c636",
      "20df"
    ]
  },
  "f8b9": {
    "id": "f8b9",
    "label": "pipe"
  },
  "3f00": {
    "id": "3f00",
    "label": "I want to perform custom operations",
    "options": [
      "f8b9"
    ]
  },
  "44e0": {
    "id": "44e0",
    "label": "share"
  },
  "821e": {
    "id": "821e",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "44e0"
    ]
  },
  "d7b0": {
    "id": "d7b0",
    "label": "publish"
  },
  "7dae": {
    "id": "7dae",
    "label": "and start it manually or imperatively",
    "options": [
      "d7b0"
    ]
  },
  "8d13": {
    "id": "8d13",
    "label": "using a conventional Subject",
    "options": [
      "821e",
      "7dae"
    ]
  },
  "ae46": {
    "id": "ae46",
    "label": "publishBehavior"
  },
  "b39c": {
    "id": "b39c",
    "label": "using a BehaviorSubject",
    "options": [
      "ae46"
    ]
  },
  "d025": {
    "id": "d025",
    "label": "using a ReplaySubject",
    "options": [
      "4767"
    ]
  },
  "bb56": {
    "id": "bb56",
    "label": "publishLast"
  },
  "313a": {
    "id": "313a",
    "label": "using an AsyncSubject",
    "options": [
      "bb56"
    ]
  },
  "30a2": {
    "id": "30a2",
    "label": "multicast"
  },
  "c72f": {
    "id": "c72f",
    "label": "using a specific subject implementation",
    "options": [
      "30a2"
    ]
  },
  "fedb": {
    "id": "fedb",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "8d13",
      "b39c",
      "d025",
      "313a",
      "c72f"
    ]
  },
  "da54": {
    "id": "da54",
    "label": "catchError"
  },
  "a2c4": {
    "id": "a2c4",
    "label": "I want to start a new Observable",
    "options": [
      "da54"
    ]
  },
  "2a48": {
    "id": "2a48",
    "label": "retry"
  },
  "c831": {
    "id": "c831",
    "label": "immediately",
    "options": [
      "2a48"
    ]
  },
  "b6f3": {
    "id": "b6f3",
    "label": "retryWhen"
  },
  "7f02": {
    "id": "7f02",
    "label": "when another Observable emits",
    "options": [
      "b6f3"
    ]
  },
  "55c8": {
    "id": "55c8",
    "label": "I want to re-subscribe",
    "options": [
      "c831",
      "7f02"
    ]
  },
  "a268": {
    "id": "a268",
    "label": "when an error occurs",
    "options": [
      "a2c4",
      "55c8"
    ]
  },
  "daf2": {
    "id": "daf2",
    "label": "immediately",
    "options": [
      "2374"
    ]
  },
  "7e24": {
    "id": "7e24",
    "label": "repeatWhen"
  },
  "5e61": {
    "id": "5e61",
    "label": "when another Observable emits",
    "options": [
      "7e24"
    ]
  },
  "d910": {
    "id": "d910",
    "label": "I want to re-subscribe",
    "options": [
      "daf2",
      "5e61"
    ]
  },
  "e0f6": {
    "id": "e0f6",
    "label": "concat"
  },
  "ec03": {
    "id": "ec03",
    "label": "I want to start a new Observable",
    "options": [
      "e0f6"
    ]
  },
  "c2c9": {
    "id": "c2c9",
    "label": "when it completes",
    "options": [
      "d910",
      "ec03"
    ]
  },
  "2d9c": {
    "id": "2d9c",
    "label": "finalize"
  },
  "f3f1": {
    "id": "f3f1",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "2d9c"
    ]
  },
  "b33e": {
    "id": "b33e",
    "label": "that routes calls to subscribe",
    "options": [
      "8299"
    ]
  },
  "dcbf": {
    "id": "dcbf",
    "label": "observeOn"
  },
  "fb79": {
    "id": "fb79",
    "label": "that routes values to observers",
    "options": [
      "dcbf"
    ]
  },
  "0404": {
    "id": "0404",
    "label": "I want to change the scheduler",
    "options": [
      "b33e",
      "fb79"
    ]
  },
  "77f7": {
    "id": "77f7",
    "label": "race"
  },
  "ff23": {
    "id": "ff23",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "77f7"
    ]
  },
  "2a2c": {
    "id": "2a2c",
    "label": "merge"
  },
  "d9c9": {
    "id": "d9c9",
    "label": "I want to output the values from either of them",
    "options": [
      "2a2c"
    ]
  },
  "bd1e": {
    "id": "bd1e",
    "label": "combineLatest"
  },
  "00e3": {
    "id": "00e3",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "bd1e"
    ]
  },
  "effa": {
    "id": "effa",
    "label": "withLatestFrom"
  },
  "4de9": {
    "id": "4de9",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "effa"
    ]
  },
  "0ee6": {
    "id": "0ee6",
    "label": "zip"
  },
  "a8fe": {
    "id": "a8fe",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "00e3",
      "4de9",
      "4824"
    ]
  },
  "b0f1": {
    "id": "b0f1",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "ff23",
      "d9c9",
      "a8fe"
    ]
  },
  "319c": {
    "id": "319c",
    "label": "I have one existing Observable, and",
    "options": [
      "a129",
      "bdb4",
      "18db",
      "6906",
      "1f40",
      "8757",
      "3497",
      "1c81",
      "2b38",
      "29eb",
      "fc7d",
      "dd89",
      "ab70",
      "0743",
      "3f00",
      "fedb",
      "a268",
      "c2c9",
      "f3f1",
      "0404",
      "b0f1"
    ]
  },
  "842b": {
    "id": "842b",
    "label": "race"
  },
  "f40b": {
    "id": "f40b",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "842b"
    ]
  },
  "831b": {
    "id": "831b",
    "label": "forkJoin"
  },
  "b59c": {
    "id": "b59c",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "831b"
    ]
  },
  "29bb": {
    "id": "29bb",
    "label": "merge"
  },
  "c15b": {
    "id": "c15b",
    "label": "I want to output the values from either of them",
    "options": [
      "29bb"
    ]
  },
  "299e": {
    "id": "299e",
    "label": "combineLatest"
  },
  "955f": {
    "id": "955f",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "299e"
    ]
  },
  "642e": {
    "id": "642e",
    "label": "zip"
  },
  "c9cf": {
    "id": "c9cf",
    "label": "using each source value only once",
    "options": [
      "642e"
    ]
  },
  "efe2": {
    "id": "efe2",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "955f",
      "c9cf"
    ]
  },
  "43b6": {
    "id": "43b6",
    "label": "concat"
  },
  "c0ab": {
    "id": "c0ab",
    "label": "I want to subscribe to each in order",
    "options": [
      "43b6"
    ]
  },
  "fd3c": {
    "id": "fd3c",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "f40b",
      "b59c",
      "c15b",
      "efe2",
      "c0ab"
    ]
  },
  "dc89": {
    "id": "dc89",
    "label": "Observable",
    "method": "create"
  },
  "9d71": {
    "id": "9d71",
    "label": "using custom logic",
    "options": [
      "dc89"
    ]
  },
  "ed3f": {
    "id": "ed3f",
    "label": "generate"
  },
  "ed9f": {
    "id": "ed9f",
    "label": "using a state machine similar to a for loop",
    "options": [
      "ed3f"
    ]
  },
  "24c9": {
    "id": "24c9",
    "label": "throwError"
  },
  "25f5": {
    "id": "25f5",
    "label": "that throws an error",
    "options": [
      "24c9"
    ]
  },
  "0041": {
    "id": "0041",
    "label": "that just completes, without emitting values",
    "options": [
      "5f8e"
    ]
  },
  "5ba4": {
    "id": "5ba4",
    "label": "NEVER"
  },
  "1df6": {
    "id": "1df6",
    "label": "that never emits anything",
    "options": [
      "5ba4"
    ]
  },
  "15f1": {
    "id": "15f1",
    "label": "fromEvent"
  },
  "a595": {
    "id": "a595",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "15f1"
    ]
  },
  "62cf": {
    "id": "62cf",
    "label": "fromEventPattern"
  },
  "0df6": {
    "id": "0df6",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "62cf"
    ]
  },
  "65a0": {
    "id": "65a0",
    "label": "from an existing source of events",
    "options": [
      "a595",
      "0df6"
    ]
  },
  "07f2": {
    "id": "07f2",
    "label": "from"
  },
  "d412": {
    "id": "d412",
    "label": "from a Promise or an event source",
    "options": [
      "07f2"
    ]
  },
  "171f": {
    "id": "171f",
    "label": "from"
  },
  "ffa4": {
    "id": "ffa4",
    "label": "over the values in an array",
    "options": [
      "171f"
    ]
  },
  "1da3": {
    "id": "1da3",
    "label": "range"
  },
  "de3a": {
    "id": "de3a",
    "label": "over values in a numeric range",
    "options": [
      "1da3"
    ]
  },
  "e5a0": {
    "id": "e5a0",
    "label": "of"
  },
  "122f": {
    "id": "122f",
    "label": "over prefined values given as arguments",
    "options": [
      "e5a0"
    ]
  },
  "6a12": {
    "id": "6a12",
    "label": "interval"
  },
  "9e2c": {
    "id": "9e2c",
    "label": "regularly",
    "options": [
      "6a12"
    ]
  },
  "ada3": {
    "id": "ada3",
    "label": "with an optional initial delay",
    "options": [
      "5099"
    ]
  },
  "1fa6": {
    "id": "1fa6",
    "label": "that emits values on a timer",
    "options": [
      "9e2c",
      "ada3"
    ]
  },
  "eee0": {
    "id": "eee0",
    "label": "which is built on demand when subscribed",
    "options": [
      "4436"
    ]
  },
  "fc69": {
    "id": "fc69",
    "label": "bindCallback"
  },
  "2a1b": {
    "id": "2a1b",
    "label": "bindNodeCallback"
  },
  "876d": {
    "id": "876d",
    "label": "supporting Node.js callback style API",
    "options": [
      "2a1b"
    ]
  },
  "3ebf": {
    "id": "3ebf",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "9635",
      "876d"
    ]
  },
  "b02e": {
    "id": "b02e",
    "label": "I have no Observables yet, and",
    "options": [
      "1573",
      "3ebf"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "319c",
      "fd3c",
      "b02e"
    ]
  }
}