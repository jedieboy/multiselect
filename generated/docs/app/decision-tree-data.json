{
  "1040": {
    "id": "1040",
    "label": "until another Observable emits a value",
    "options": [
      "06e5"
    ]
  },
  "1474": {
    "id": "1474",
    "label": "when another Observable emits",
    "options": [
      "36a0"
    ]
  },
  "1611": {
    "id": "1611",
    "label": "that throws an error",
    "options": [
      "6c18"
    ]
  },
  "1713": {
    "id": "1713",
    "label": "immediately",
    "options": [
      "d7cd"
    ]
  },
  "2061": {
    "id": "2061",
    "label": "over prefined values given as arguments",
    "options": [
      "08ec"
    ]
  },
  "2068": {
    "id": "2068",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "24e1",
      "a6af",
      "3730",
      "60e8",
      "764e"
    ]
  },
  "2101": {
    "id": "2101",
    "label": "range"
  },
  "2536": {
    "id": "2536",
    "label": "where time windows are determined by a time duration",
    "options": [
      "0f0c"
    ]
  },
  "2547": {
    "id": "2547",
    "label": "based on custom logic",
    "options": [
      "ef31"
    ]
  },
  "3153": {
    "id": "3153",
    "label": "and convert to a Promise",
    "options": [
      "64cb"
    ]
  },
  "3365": {
    "id": "3365",
    "label": "from a Promise or an event source",
    "options": [
      "45f3"
    ]
  },
  "3730": {
    "id": "3730",
    "label": "I want to output the values from either of them",
    "options": [
      "f190"
    ]
  },
  "3896": {
    "id": "3896",
    "label": "from"
  },
  "4318": {
    "id": "4318",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "16af",
      "8068",
      "43d9"
    ]
  },
  "4431": {
    "id": "4431",
    "label": "bufferWhen"
  },
  "4556": {
    "id": "4556",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "3bcf"
    ]
  },
  "4937": {
    "id": "4937",
    "label": "multicast"
  },
  "5069": {
    "id": "5069",
    "label": "until another Observable emits",
    "options": [
      "d7aa",
      "0f98"
    ]
  },
  "5155": {
    "id": "5155",
    "label": "and emit the group as a nested Observable",
    "options": [
      "34f5"
    ]
  },
  "5969": {
    "id": "5969",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "e2db",
      "7917"
    ]
  },
  "6175": {
    "id": "6175",
    "label": "fromEventPattern"
  },
  "6399": {
    "id": "6399",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "bc88"
    ]
  },
  "6400": {
    "id": "6400",
    "label": "reduce"
  },
  "6851": {
    "id": "6851",
    "label": "withLatestFrom"
  },
  "7378": {
    "id": "7378",
    "label": "I want to start a new Observable",
    "options": [
      "0cd9"
    ]
  },
  "7533": {
    "id": "7533",
    "label": "and emit the group as an array",
    "options": [
      "a9de"
    ]
  },
  "7876": {
    "id": "7876",
    "label": "emitted some time in the past",
    "options": [
      "9491"
    ]
  },
  "7917": {
    "id": "7917",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "f44b"
    ]
  },
  "8043": {
    "id": "8043",
    "label": "I want to switch to another Observable",
    "options": [
      "892b"
    ]
  },
  "8056": {
    "id": "8056",
    "label": "merge"
  },
  "8068": {
    "id": "8068",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "6f3a"
    ]
  },
  "8334": {
    "id": "8334",
    "label": "I want to group the values",
    "options": [
      "32f6",
      "1a09",
      "a8d8",
      "cf1e",
      "95f6",
      "5069",
      "0327",
      "095b",
      "233d"
    ]
  },
  "8733": {
    "id": "8733",
    "label": "partition"
  },
  "8821": {
    "id": "8821",
    "label": "ignoreElements"
  },
  "8862": {
    "id": "8862",
    "label": "interval"
  },
  "9469": {
    "id": "9469",
    "label": "zip"
  },
  "9491": {
    "id": "9491",
    "label": "distinct"
  },
  "9917": {
    "id": "9917",
    "label": "timer"
  },
  "0d10": {
    "id": "0d10",
    "label": "mapTo"
  },
  "bb4f": {
    "id": "bb4f",
    "label": "to be a constant value",
    "options": [
      "0d10"
    ]
  },
  "84ac": {
    "id": "84ac",
    "label": "map"
  },
  "ae9d": {
    "id": "ae9d",
    "label": "to be a value calculated through a formula",
    "options": [
      "84ac"
    ]
  },
  "e1c3": {
    "id": "e1c3",
    "label": "I want to change each emitted value",
    "options": [
      "bb4f",
      "ae9d"
    ]
  },
  "3bcf": {
    "id": "3bcf",
    "label": "pluck"
  },
  "2a13": {
    "id": "2a13",
    "label": "tap"
  },
  "77ba": {
    "id": "77ba",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "2a13"
    ]
  },
  "ef31": {
    "id": "ef31",
    "label": "filter"
  },
  "b170": {
    "id": "b170",
    "label": "first"
  },
  "83d5": {
    "id": "83d5",
    "label": "and only the first value",
    "options": [
      "b170"
    ]
  },
  "7cf3": {
    "id": "7cf3",
    "label": "take"
  },
  "d721": {
    "id": "d721",
    "label": "based on a given amount",
    "options": [
      "7cf3"
    ]
  },
  "5ca6": {
    "id": "5ca6",
    "label": "takeWhile"
  },
  "93c0": {
    "id": "93c0",
    "label": "based on custom logic",
    "options": [
      "5ca6"
    ]
  },
  "c2c9": {
    "id": "c2c9",
    "label": "if they are at the start of the Observable",
    "options": [
      "83d5",
      "d721",
      "93c0"
    ]
  },
  "7d75": {
    "id": "7d75",
    "label": "elementAt"
  },
  "c7c4": {
    "id": "c7c4",
    "label": "if they are exactly the n-th emission",
    "options": [
      "7d75"
    ]
  },
  "0b86": {
    "id": "0b86",
    "label": "last"
  },
  "c403": {
    "id": "c403",
    "label": "and only the last value",
    "options": [
      "0b86"
    ]
  },
  "21bf": {
    "id": "21bf",
    "label": "takeLast"
  },
  "80ed": {
    "id": "80ed",
    "label": "based on a given amount",
    "options": [
      "21bf"
    ]
  },
  "a728": {
    "id": "a728",
    "label": "if they are at the end of the Observable",
    "options": [
      "c403",
      "80ed"
    ]
  },
  "06e5": {
    "id": "06e5",
    "label": "takeUntil"
  },
  "6a84": {
    "id": "6a84",
    "label": "I want to allow some values to pass",
    "options": [
      "2547",
      "c2c9",
      "c7c4",
      "a728",
      "1040"
    ]
  },
  "fa28": {
    "id": "fa28",
    "label": "altogether",
    "options": [
      "8821"
    ]
  },
  "270a": {
    "id": "270a",
    "label": "skip"
  },
  "4c24": {
    "id": "4c24",
    "label": "based on a given amount",
    "options": [
      "270a"
    ]
  },
  "db14": {
    "id": "db14",
    "label": "skipWhile"
  },
  "75be": {
    "id": "75be",
    "label": "based on custom logic",
    "options": [
      "db14"
    ]
  },
  "e751": {
    "id": "e751",
    "label": "from the start of the Observable",
    "options": [
      "4c24",
      "75be"
    ]
  },
  "7cf9": {
    "id": "7cf9",
    "label": "skipLast"
  },
  "fcef": {
    "id": "fcef",
    "label": "from the end of the Observable",
    "options": [
      "7cf9"
    ]
  },
  "6f76": {
    "id": "6f76",
    "label": "skipUntil"
  },
  "273e": {
    "id": "273e",
    "label": "until another Observable emits a value",
    "options": [
      "6f76"
    ]
  },
  "2cfc": {
    "id": "2cfc",
    "label": "distinctUntilChanged"
  },
  "d7e3": {
    "id": "d7e3",
    "label": "emitted just before the current value",
    "options": [
      "2cfc"
    ]
  },
  "616e": {
    "id": "616e",
    "label": "according to value equality",
    "options": [
      "d7e3",
      "7876"
    ]
  },
  "2b50": {
    "id": "2b50",
    "label": "distinctUntilKeyChanged"
  },
  "c035": {
    "id": "c035",
    "label": "emitted just before the current value",
    "options": [
      "2b50"
    ]
  },
  "c6f8": {
    "id": "c6f8",
    "label": "according to a key or object property",
    "options": [
      "c035"
    ]
  },
  "f464": {
    "id": "f464",
    "label": "that match some previous value",
    "options": [
      "616e",
      "c6f8"
    ]
  },
  "544e": {
    "id": "544e",
    "label": "throttle"
  },
  "57c7": {
    "id": "57c7",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "544e"
    ]
  },
  "0f0c": {
    "id": "0f0c",
    "label": "throttleTime"
  },
  "ce7a": {
    "id": "ce7a",
    "label": "by emitting the first value in each time window",
    "options": [
      "57c7",
      "2536"
    ]
  },
  "276c": {
    "id": "276c",
    "label": "audit"
  },
  "e00a": {
    "id": "e00a",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "276c"
    ]
  },
  "e922": {
    "id": "e922",
    "label": "auditTime"
  },
  "1d26": {
    "id": "1d26",
    "label": "where time windows are determined by a time duration",
    "options": [
      "e922"
    ]
  },
  "f907": {
    "id": "f907",
    "label": "by emitting the last value in each time window",
    "options": [
      "e00a",
      "1d26"
    ]
  },
  "8eac": {
    "id": "8eac",
    "label": "debounce"
  },
  "c2b9": {
    "id": "c2b9",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "8eac"
    ]
  },
  "46a1": {
    "id": "46a1",
    "label": "debounceTime"
  },
  "0eb4": {
    "id": "0eb4",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "46a1"
    ]
  },
  "e9c5": {
    "id": "e9c5",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "c2b9",
      "0eb4"
    ]
  },
  "7f8c": {
    "id": "7f8c",
    "label": "that occur too frequently",
    "options": [
      "ce7a",
      "f907",
      "e9c5"
    ]
  },
  "15de": {
    "id": "15de",
    "label": "I want to ignore values",
    "options": [
      "fa28",
      "e751",
      "fcef",
      "273e",
      "f464",
      "7f8c"
    ]
  },
  "16af": {
    "id": "16af",
    "label": "and only output the final computed value",
    "options": [
      "6400"
    ]
  },
  "6f3a": {
    "id": "6f3a",
    "label": "scan"
  },
  "acfa": {
    "id": "acfa",
    "label": "mergeScan"
  },
  "43d9": {
    "id": "43d9",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "acfa"
    ]
  },
  "6ff6": {
    "id": "6ff6",
    "label": "materialize"
  },
  "a16e": {
    "id": "a16e",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "6ff6"
    ]
  },
  "ac41": {
    "id": "ac41",
    "label": "timeInterval"
  },
  "e18b": {
    "id": "e18b",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "ac41"
    ]
  },
  "0254": {
    "id": "0254",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "a16e",
      "e18b"
    ]
  },
  "e12f": {
    "id": "e12f",
    "label": "timeout"
  },
  "0835": {
    "id": "0835",
    "label": "I want to throw an error",
    "options": [
      "e12f"
    ]
  },
  "892b": {
    "id": "892b",
    "label": "timeoutWith"
  },
  "584c": {
    "id": "584c",
    "label": "after a period of inactivity",
    "options": [
      "0835",
      "8043"
    ]
  },
  "056c": {
    "id": "056c",
    "label": "single"
  },
  "b964": {
    "id": "b964",
    "label": "I want to ensure there is only one value",
    "options": [
      "056c"
    ]
  },
  "ec3f": {
    "id": "ec3f",
    "label": "count"
  },
  "617f": {
    "id": "617f",
    "label": "I want to know how many values it emits",
    "options": [
      "ec3f"
    ]
  },
  "00a6": {
    "id": "00a6",
    "label": "startWith"
  },
  "8ae3": {
    "id": "8ae3",
    "label": "I want to prepend one value",
    "options": [
      "00a6"
    ]
  },
  "e79a": {
    "id": "e79a",
    "label": "delay"
  },
  "a105": {
    "id": "a105",
    "label": "based on a given amount of time",
    "options": [
      "e79a"
    ]
  },
  "88b9": {
    "id": "88b9",
    "label": "delayWhen"
  },
  "d536": {
    "id": "d536",
    "label": "based on the emissions of another Observable",
    "options": [
      "88b9"
    ]
  },
  "191b": {
    "id": "191b",
    "label": "I want to delay the emissions",
    "options": [
      "a105",
      "d536"
    ]
  },
  "7e03": {
    "id": "7e03",
    "label": "toArray"
  },
  "2f03": {
    "id": "2f03",
    "label": "and convert to an array",
    "options": [
      "7e03"
    ]
  },
  "64cb": {
    "id": "64cb",
    "label": "Observable",
    "method": "toPromise"
  },
  "32f6": {
    "id": "32f6",
    "label": "until the Observable completes",
    "options": [
      "2f03",
      "3153"
    ]
  },
  "c1ac": {
    "id": "c1ac",
    "label": "pairwise"
  },
  "1a09": {
    "id": "1a09",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "c1ac"
    ]
  },
  "a8d8": {
    "id": "a8d8",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "8733"
    ]
  },
  "a9de": {
    "id": "a9de",
    "label": "bufferCount"
  },
  "20e2": {
    "id": "20e2",
    "label": "windowCount"
  },
  "a068": {
    "id": "a068",
    "label": "and emit the group as a nested Observable",
    "options": [
      "20e2"
    ]
  },
  "cf1e": {
    "id": "cf1e",
    "label": "in batches of a particular size",
    "options": [
      "7533",
      "a068"
    ]
  },
  "b089": {
    "id": "b089",
    "label": "bufferTime"
  },
  "3c36": {
    "id": "3c36",
    "label": "and emit the group as an array",
    "options": [
      "b089"
    ]
  },
  "618b": {
    "id": "618b",
    "label": "windowTime"
  },
  "e0ce": {
    "id": "e0ce",
    "label": "and emit the group as a nested Observable",
    "options": [
      "618b"
    ]
  },
  "95f6": {
    "id": "95f6",
    "label": "based on time",
    "options": [
      "3c36",
      "e0ce"
    ]
  },
  "2c60": {
    "id": "2c60",
    "label": "buffer"
  },
  "d7aa": {
    "id": "d7aa",
    "label": "and emit the group as an array",
    "options": [
      "2c60"
    ]
  },
  "5e37": {
    "id": "5e37",
    "label": "window"
  },
  "0f98": {
    "id": "0f98",
    "label": "and emit the group as a nested Observable",
    "options": [
      "5e37"
    ]
  },
  "f244": {
    "id": "f244",
    "label": "and emit the group as an array",
    "options": [
      "4431"
    ]
  },
  "34f5": {
    "id": "34f5",
    "label": "windowWhen"
  },
  "0327": {
    "id": "0327",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "f244",
      "5155"
    ]
  },
  "c6cf": {
    "id": "c6cf",
    "label": "bufferToggle"
  },
  "23d1": {
    "id": "23d1",
    "label": "and emit the group as an array",
    "options": [
      "c6cf"
    ]
  },
  "2e78": {
    "id": "2e78",
    "label": "windowToggle"
  },
  "ce6e": {
    "id": "ce6e",
    "label": "and emit the group as a nested Observable",
    "options": [
      "2e78"
    ]
  },
  "095b": {
    "id": "095b",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "23d1",
      "ce6e"
    ]
  },
  "d802": {
    "id": "d802",
    "label": "groupBy"
  },
  "233d": {
    "id": "233d",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "d802"
    ]
  },
  "8de8": {
    "id": "8de8",
    "label": "mergeMapTo"
  },
  "8d1a": {
    "id": "8d1a",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "8de8"
    ]
  },
  "36b2": {
    "id": "36b2",
    "label": "mergeMap"
  },
  "fc94": {
    "id": "fc94",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "36b2"
    ]
  },
  "d1f6": {
    "id": "d1f6",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "8d1a",
      "fc94"
    ]
  },
  "dc01": {
    "id": "dc01",
    "label": "concatMapTo"
  },
  "a68d": {
    "id": "a68d",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "dc01"
    ]
  },
  "870f": {
    "id": "870f",
    "label": "concatMap"
  },
  "c002": {
    "id": "c002",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "870f"
    ]
  },
  "acb5": {
    "id": "acb5",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "a68d",
      "c002"
    ]
  },
  "0a35": {
    "id": "0a35",
    "label": "switchMapTo"
  },
  "e2db": {
    "id": "e2db",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "0a35"
    ]
  },
  "f44b": {
    "id": "f44b",
    "label": "switchMap"
  },
  "e7b3": {
    "id": "e7b3",
    "label": "exhaustMap"
  },
  "29af": {
    "id": "29af",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "e7b3"
    ]
  },
  "50d6": {
    "id": "50d6",
    "label": "expand"
  },
  "0203": {
    "id": "0203",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "50d6"
    ]
  },
  "b1bf": {
    "id": "b1bf",
    "label": "I want to start a new Observable for each value",
    "options": [
      "d1f6",
      "acb5",
      "5969",
      "29af",
      "0203"
    ]
  },
  "dd57": {
    "id": "dd57",
    "label": "pipe"
  },
  "5a97": {
    "id": "5a97",
    "label": "I want to perform custom operations",
    "options": [
      "dd57"
    ]
  },
  "bc88": {
    "id": "bc88",
    "label": "share"
  },
  "42fd": {
    "id": "42fd",
    "label": "publish"
  },
  "68c7": {
    "id": "68c7",
    "label": "and start it manually or imperatively",
    "options": [
      "42fd"
    ]
  },
  "6eef": {
    "id": "6eef",
    "label": "using a conventional Subject",
    "options": [
      "6399",
      "68c7"
    ]
  },
  "bfbb": {
    "id": "bfbb",
    "label": "publishBehavior"
  },
  "5a5d": {
    "id": "5a5d",
    "label": "using a BehaviorSubject",
    "options": [
      "bfbb"
    ]
  },
  "73ad": {
    "id": "73ad",
    "label": "publishReplay"
  },
  "daed": {
    "id": "daed",
    "label": "using a ReplaySubject",
    "options": [
      "73ad"
    ]
  },
  "0b08": {
    "id": "0b08",
    "label": "publishLast"
  },
  "ed8d": {
    "id": "ed8d",
    "label": "using an AsyncSubject",
    "options": [
      "0b08"
    ]
  },
  "9bee": {
    "id": "9bee",
    "label": "using a specific subject implementation",
    "options": [
      "4937"
    ]
  },
  "6fb2": {
    "id": "6fb2",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "6eef",
      "5a5d",
      "daed",
      "ed8d",
      "9bee"
    ]
  },
  "0cd9": {
    "id": "0cd9",
    "label": "catchError"
  },
  "d7cd": {
    "id": "d7cd",
    "label": "retry"
  },
  "b4f0": {
    "id": "b4f0",
    "label": "retryWhen"
  },
  "c10e": {
    "id": "c10e",
    "label": "when another Observable emits",
    "options": [
      "b4f0"
    ]
  },
  "3baf": {
    "id": "3baf",
    "label": "I want to re-subscribe",
    "options": [
      "1713",
      "c10e"
    ]
  },
  "a916": {
    "id": "a916",
    "label": "when an error occurs",
    "options": [
      "7378",
      "3baf"
    ]
  },
  "9ff9": {
    "id": "9ff9",
    "label": "repeat"
  },
  "b008": {
    "id": "b008",
    "label": "immediately",
    "options": [
      "9ff9"
    ]
  },
  "36a0": {
    "id": "36a0",
    "label": "repeatWhen"
  },
  "b40b": {
    "id": "b40b",
    "label": "I want to re-subscribe",
    "options": [
      "b008",
      "1474"
    ]
  },
  "f359": {
    "id": "f359",
    "label": "concat"
  },
  "17c5": {
    "id": "17c5",
    "label": "I want to start a new Observable",
    "options": [
      "f359"
    ]
  },
  "23e1": {
    "id": "23e1",
    "label": "when it completes",
    "options": [
      "b40b",
      "17c5"
    ]
  },
  "b068": {
    "id": "b068",
    "label": "finalize"
  },
  "8f34": {
    "id": "8f34",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "b068"
    ]
  },
  "7d42": {
    "id": "7d42",
    "label": "subscribeOn"
  },
  "c2b6": {
    "id": "c2b6",
    "label": "that routes calls to subscribe",
    "options": [
      "7d42"
    ]
  },
  "9ecc": {
    "id": "9ecc",
    "label": "observeOn"
  },
  "35bd": {
    "id": "35bd",
    "label": "that routes values to observers",
    "options": [
      "9ecc"
    ]
  },
  "b7da": {
    "id": "b7da",
    "label": "I want to change the scheduler",
    "options": [
      "c2b6",
      "35bd"
    ]
  },
  "72e0": {
    "id": "72e0",
    "label": "race"
  },
  "71a2": {
    "id": "71a2",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "72e0"
    ]
  },
  "a1dc": {
    "id": "a1dc",
    "label": "I want to output the values from either of them",
    "options": [
      "8056"
    ]
  },
  "1ff9": {
    "id": "1ff9",
    "label": "combineLatest"
  },
  "b3fa": {
    "id": "b3fa",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "1ff9"
    ]
  },
  "fc5d": {
    "id": "fc5d",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "6851"
    ]
  },
  "43c7": {
    "id": "43c7",
    "label": "zip"
  },
  "8b6a": {
    "id": "8b6a",
    "label": "using each source value only once",
    "options": [
      "43c7"
    ]
  },
  "d825": {
    "id": "d825",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "b3fa",
      "fc5d",
      "8b6a"
    ]
  },
  "a731": {
    "id": "a731",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "71a2",
      "a1dc",
      "d825"
    ]
  },
  "58b7": {
    "id": "58b7",
    "label": "I have one existing Observable, and",
    "options": [
      "e1c3",
      "4556",
      "77ba",
      "6a84",
      "15de",
      "4318",
      "0254",
      "584c",
      "b964",
      "617f",
      "8ae3",
      "191b",
      "8334",
      "b1bf",
      "5a97",
      "6fb2",
      "a916",
      "23e1",
      "8f34",
      "b7da",
      "a731"
    ]
  },
  "3f25": {
    "id": "3f25",
    "label": "race"
  },
  "24e1": {
    "id": "24e1",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "3f25"
    ]
  },
  "0e3d": {
    "id": "0e3d",
    "label": "forkJoin"
  },
  "a6af": {
    "id": "a6af",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "0e3d"
    ]
  },
  "f190": {
    "id": "f190",
    "label": "merge"
  },
  "58a1": {
    "id": "58a1",
    "label": "combineLatest"
  },
  "1c65": {
    "id": "1c65",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "58a1"
    ]
  },
  "41af": {
    "id": "41af",
    "label": "using each source value only once",
    "options": [
      "9469"
    ]
  },
  "60e8": {
    "id": "60e8",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "1c65",
      "41af"
    ]
  },
  "02c5": {
    "id": "02c5",
    "label": "concat"
  },
  "764e": {
    "id": "764e",
    "label": "I want to subscribe to each in order",
    "options": [
      "02c5"
    ]
  },
  "be87": {
    "id": "be87",
    "label": "Observable",
    "method": "create"
  },
  "aa32": {
    "id": "aa32",
    "label": "using custom logic",
    "options": [
      "be87"
    ]
  },
  "56eb": {
    "id": "56eb",
    "label": "generate"
  },
  "794c": {
    "id": "794c",
    "label": "using a state machine similar to a for loop",
    "options": [
      "56eb"
    ]
  },
  "6c18": {
    "id": "6c18",
    "label": "throwError"
  },
  "8ca7": {
    "id": "8ca7",
    "label": "EMPTY"
  },
  "aede": {
    "id": "aede",
    "label": "that just completes, without emitting values",
    "options": [
      "8ca7"
    ]
  },
  "30da": {
    "id": "30da",
    "label": "NEVER"
  },
  "85ae": {
    "id": "85ae",
    "label": "that never emits anything",
    "options": [
      "30da"
    ]
  },
  "ab6e": {
    "id": "ab6e",
    "label": "fromEvent"
  },
  "05f8": {
    "id": "05f8",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "ab6e"
    ]
  },
  "bd79": {
    "id": "bd79",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "6175"
    ]
  },
  "4bf7": {
    "id": "4bf7",
    "label": "from an existing source of events",
    "options": [
      "05f8",
      "bd79"
    ]
  },
  "45f3": {
    "id": "45f3",
    "label": "from"
  },
  "a67d": {
    "id": "a67d",
    "label": "over the values in an array",
    "options": [
      "3896"
    ]
  },
  "4eb7": {
    "id": "4eb7",
    "label": "over values in a numeric range",
    "options": [
      "2101"
    ]
  },
  "08ec": {
    "id": "08ec",
    "label": "of"
  },
  "12e0": {
    "id": "12e0",
    "label": "that iterates",
    "options": [
      "a67d",
      "4eb7",
      "2061"
    ]
  },
  "232f": {
    "id": "232f",
    "label": "regularly",
    "options": [
      "8862"
    ]
  },
  "374b": {
    "id": "374b",
    "label": "with an optional initial delay",
    "options": [
      "9917"
    ]
  },
  "df6d": {
    "id": "df6d",
    "label": "that emits values on a timer",
    "options": [
      "232f",
      "374b"
    ]
  },
  "54eb": {
    "id": "54eb",
    "label": "defer"
  },
  "4db7": {
    "id": "4db7",
    "label": "which is built on demand when subscribed",
    "options": [
      "54eb"
    ]
  },
  "dec7": {
    "id": "dec7",
    "label": "I want to create a new Observable",
    "options": [
      "aa32",
      "794c",
      "1611",
      "aede",
      "85ae",
      "4bf7",
      "3365",
      "12e0",
      "df6d",
      "4db7"
    ]
  },
  "e7ab": {
    "id": "e7ab",
    "label": "bindCallback"
  },
  "59cd": {
    "id": "59cd",
    "label": "supporting a conventional callback API",
    "options": [
      "e7ab"
    ]
  },
  "d4d8": {
    "id": "d4d8",
    "label": "bindNodeCallback"
  },
  "31c8": {
    "id": "31c8",
    "label": "supporting Node.js callback style API",
    "options": [
      "d4d8"
    ]
  },
  "fea4": {
    "id": "fea4",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "59cd",
      "31c8"
    ]
  },
  "a72c": {
    "id": "a72c",
    "label": "I have no Observables yet, and",
    "options": [
      "dec7",
      "fea4"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "58b7",
      "2068",
      "a72c"
    ]
  }
}