{
  "1117": {
    "id": "1117",
    "label": "that match some previous value",
    "options": [
      "f438",
      "5ea8"
    ]
  },
  "1320": {
    "id": "1320",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "1d21"
    ]
  },
  "2242": {
    "id": "2242",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "4c0b",
      "3b8e",
      "ea43"
    ]
  },
  "2394": {
    "id": "2394",
    "label": "takeWhile"
  },
  "2406": {
    "id": "2406",
    "label": "from"
  },
  "2641": {
    "id": "2641",
    "label": "timeInterval"
  },
  "2998": {
    "id": "2998",
    "label": "scan"
  },
  "3633": {
    "id": "3633",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "f3bb"
    ]
  },
  "3836": {
    "id": "3836",
    "label": "that emits values on a timer",
    "options": [
      "90c7",
      "98be"
    ]
  },
  "4646": {
    "id": "4646",
    "label": "windowCount"
  },
  "4813": {
    "id": "4813",
    "label": "and emit the group as an array",
    "options": [
      "fb00"
    ]
  },
  "5272": {
    "id": "5272",
    "label": "exhaustMap"
  },
  "5579": {
    "id": "5579",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "b96c"
    ]
  },
  "5828": {
    "id": "5828",
    "label": "based on custom logic",
    "options": [
      "2394"
    ]
  },
  "6443": {
    "id": "6443",
    "label": "and only the first value",
    "options": [
      "c62a"
    ]
  },
  "6455": {
    "id": "6455",
    "label": "range"
  },
  "6490": {
    "id": "6490",
    "label": "EMPTY"
  },
  "6779": {
    "id": "6779",
    "label": "I want to start a new Observable for each value",
    "options": [
      "08ad",
      "7109",
      "ec18",
      "833b",
      "a0a7"
    ]
  },
  "6859": {
    "id": "6859",
    "label": "when an error occurs",
    "options": [
      "275a",
      "d285"
    ]
  },
  "6983": {
    "id": "6983",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "cd58"
    ]
  },
  "7109": {
    "id": "7109",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "b597",
      "b37d"
    ]
  },
  "7385": {
    "id": "7385",
    "label": "based on a given amount",
    "options": [
      "746b"
    ]
  },
  "8453": {
    "id": "8453",
    "label": "window"
  },
  "8664": {
    "id": "8664",
    "label": "I want to ensure there is only one value",
    "options": [
      "6bf9"
    ]
  },
  "9040": {
    "id": "9040",
    "label": "concat"
  },
  "9302": {
    "id": "9302",
    "label": "delayWhen"
  },
  "9359": {
    "id": "9359",
    "label": "Observable",
    "method": "create"
  },
  "9650": {
    "id": "9650",
    "label": "from a Promise or an event source",
    "options": [
      "2406"
    ]
  },
  "9791": {
    "id": "9791",
    "label": "and convert to an array",
    "options": [
      "bb39"
    ]
  },
  "0312": {
    "id": "0312",
    "label": "mapTo"
  },
  "ed0e": {
    "id": "ed0e",
    "label": "to be a constant value",
    "options": [
      "0312"
    ]
  },
  "2b02": {
    "id": "2b02",
    "label": "map"
  },
  "a676": {
    "id": "a676",
    "label": "to be a value calculated through a formula",
    "options": [
      "2b02"
    ]
  },
  "687a": {
    "id": "687a",
    "label": "I want to change each emitted value",
    "options": [
      "ed0e",
      "a676"
    ]
  },
  "455b": {
    "id": "455b",
    "label": "pluck"
  },
  "e158": {
    "id": "e158",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "455b"
    ]
  },
  "cd58": {
    "id": "cd58",
    "label": "tap"
  },
  "ea62": {
    "id": "ea62",
    "label": "filter"
  },
  "b254": {
    "id": "b254",
    "label": "based on custom logic",
    "options": [
      "ea62"
    ]
  },
  "c62a": {
    "id": "c62a",
    "label": "first"
  },
  "746b": {
    "id": "746b",
    "label": "take"
  },
  "c365": {
    "id": "c365",
    "label": "if they are at the start of the Observable",
    "options": [
      "6443",
      "7385",
      "5828"
    ]
  },
  "b415": {
    "id": "b415",
    "label": "elementAt"
  },
  "a1b6": {
    "id": "a1b6",
    "label": "if they are exactly the n-th emission",
    "options": [
      "b415"
    ]
  },
  "25bf": {
    "id": "25bf",
    "label": "last"
  },
  "da88": {
    "id": "da88",
    "label": "and only the last value",
    "options": [
      "25bf"
    ]
  },
  "6b4c": {
    "id": "6b4c",
    "label": "takeLast"
  },
  "a2b8": {
    "id": "a2b8",
    "label": "based on a given amount",
    "options": [
      "6b4c"
    ]
  },
  "5c71": {
    "id": "5c71",
    "label": "if they are at the end of the Observable",
    "options": [
      "da88",
      "a2b8"
    ]
  },
  "ca7e": {
    "id": "ca7e",
    "label": "takeUntil"
  },
  "7aaa": {
    "id": "7aaa",
    "label": "until another Observable emits a value",
    "options": [
      "ca7e"
    ]
  },
  "c16b": {
    "id": "c16b",
    "label": "I want to allow some values to pass",
    "options": [
      "b254",
      "c365",
      "a1b6",
      "5c71",
      "7aaa"
    ]
  },
  "4f78": {
    "id": "4f78",
    "label": "ignoreElements"
  },
  "ee34": {
    "id": "ee34",
    "label": "altogether",
    "options": [
      "4f78"
    ]
  },
  "03a7": {
    "id": "03a7",
    "label": "skip"
  },
  "f9a5": {
    "id": "f9a5",
    "label": "based on a given amount",
    "options": [
      "03a7"
    ]
  },
  "378f": {
    "id": "378f",
    "label": "skipWhile"
  },
  "efe0": {
    "id": "efe0",
    "label": "based on custom logic",
    "options": [
      "378f"
    ]
  },
  "0265": {
    "id": "0265",
    "label": "from the start of the Observable",
    "options": [
      "f9a5",
      "efe0"
    ]
  },
  "f0e4": {
    "id": "f0e4",
    "label": "skipLast"
  },
  "72d1": {
    "id": "72d1",
    "label": "from the end of the Observable",
    "options": [
      "f0e4"
    ]
  },
  "62a1": {
    "id": "62a1",
    "label": "skipUntil"
  },
  "e0c3": {
    "id": "e0c3",
    "label": "until another Observable emits a value",
    "options": [
      "62a1"
    ]
  },
  "06db": {
    "id": "06db",
    "label": "distinctUntilChanged"
  },
  "175c": {
    "id": "175c",
    "label": "emitted just before the current value",
    "options": [
      "06db"
    ]
  },
  "99c9": {
    "id": "99c9",
    "label": "distinct"
  },
  "0c02": {
    "id": "0c02",
    "label": "emitted some time in the past",
    "options": [
      "99c9"
    ]
  },
  "f438": {
    "id": "f438",
    "label": "according to value equality",
    "options": [
      "175c",
      "0c02"
    ]
  },
  "459d": {
    "id": "459d",
    "label": "distinctUntilKeyChanged"
  },
  "fb86": {
    "id": "fb86",
    "label": "emitted just before the current value",
    "options": [
      "459d"
    ]
  },
  "5ea8": {
    "id": "5ea8",
    "label": "according to a key or object property",
    "options": [
      "fb86"
    ]
  },
  "bc08": {
    "id": "bc08",
    "label": "throttle"
  },
  "70a4": {
    "id": "70a4",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "bc08"
    ]
  },
  "bf45": {
    "id": "bf45",
    "label": "throttleTime"
  },
  "0081": {
    "id": "0081",
    "label": "where time windows are determined by a time duration",
    "options": [
      "bf45"
    ]
  },
  "d724": {
    "id": "d724",
    "label": "by emitting the first value in each time window",
    "options": [
      "70a4",
      "0081"
    ]
  },
  "cff4": {
    "id": "cff4",
    "label": "audit"
  },
  "c0d2": {
    "id": "c0d2",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "cff4"
    ]
  },
  "b5b9": {
    "id": "b5b9",
    "label": "auditTime"
  },
  "80d8": {
    "id": "80d8",
    "label": "where time windows are determined by a time duration",
    "options": [
      "b5b9"
    ]
  },
  "7fa5": {
    "id": "7fa5",
    "label": "by emitting the last value in each time window",
    "options": [
      "c0d2",
      "80d8"
    ]
  },
  "f3bb": {
    "id": "f3bb",
    "label": "debounce"
  },
  "c65e": {
    "id": "c65e",
    "label": "debounceTime"
  },
  "bf8f": {
    "id": "bf8f",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "c65e"
    ]
  },
  "cc25": {
    "id": "cc25",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "3633",
      "bf8f"
    ]
  },
  "197d": {
    "id": "197d",
    "label": "that occur too frequently",
    "options": [
      "d724",
      "7fa5",
      "cc25"
    ]
  },
  "fba1": {
    "id": "fba1",
    "label": "I want to ignore values",
    "options": [
      "ee34",
      "0265",
      "72d1",
      "e0c3",
      "1117",
      "197d"
    ]
  },
  "d681": {
    "id": "d681",
    "label": "reduce"
  },
  "7ec2": {
    "id": "7ec2",
    "label": "and only output the final computed value",
    "options": [
      "d681"
    ]
  },
  "e9a4": {
    "id": "e9a4",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "2998"
    ]
  },
  "1a81": {
    "id": "1a81",
    "label": "mergeScan"
  },
  "d111": {
    "id": "d111",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "1a81"
    ]
  },
  "508b": {
    "id": "508b",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "7ec2",
      "e9a4",
      "d111"
    ]
  },
  "9e19": {
    "id": "9e19",
    "label": "materialize"
  },
  "38cb": {
    "id": "38cb",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "9e19"
    ]
  },
  "b4a1": {
    "id": "b4a1",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "2641"
    ]
  },
  "402a": {
    "id": "402a",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "38cb",
      "b4a1"
    ]
  },
  "07bd": {
    "id": "07bd",
    "label": "timeout"
  },
  "89e7": {
    "id": "89e7",
    "label": "I want to throw an error",
    "options": [
      "07bd"
    ]
  },
  "b168": {
    "id": "b168",
    "label": "timeoutWith"
  },
  "d43c": {
    "id": "d43c",
    "label": "I want to switch to another Observable",
    "options": [
      "b168"
    ]
  },
  "313d": {
    "id": "313d",
    "label": "after a period of inactivity",
    "options": [
      "89e7",
      "d43c"
    ]
  },
  "6bf9": {
    "id": "6bf9",
    "label": "single"
  },
  "92d0": {
    "id": "92d0",
    "label": "count"
  },
  "3dbe": {
    "id": "3dbe",
    "label": "I want to know how many values it emits",
    "options": [
      "92d0"
    ]
  },
  "7b80": {
    "id": "7b80",
    "label": "startWith"
  },
  "065e": {
    "id": "065e",
    "label": "I want to prepend one value",
    "options": [
      "7b80"
    ]
  },
  "b77f": {
    "id": "b77f",
    "label": "delay"
  },
  "af0e": {
    "id": "af0e",
    "label": "based on a given amount of time",
    "options": [
      "b77f"
    ]
  },
  "398c": {
    "id": "398c",
    "label": "based on the emissions of another Observable",
    "options": [
      "9302"
    ]
  },
  "5f52": {
    "id": "5f52",
    "label": "I want to delay the emissions",
    "options": [
      "af0e",
      "398c"
    ]
  },
  "bb39": {
    "id": "bb39",
    "label": "toArray"
  },
  "1dc9": {
    "id": "1dc9",
    "label": "Observable",
    "method": "toPromise"
  },
  "0c00": {
    "id": "0c00",
    "label": "and convert to a Promise",
    "options": [
      "1dc9"
    ]
  },
  "fe6b": {
    "id": "fe6b",
    "label": "until the Observable completes",
    "options": [
      "9791",
      "0c00"
    ]
  },
  "92a6": {
    "id": "92a6",
    "label": "pairwise"
  },
  "ca80": {
    "id": "ca80",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "92a6"
    ]
  },
  "e4ea": {
    "id": "e4ea",
    "label": "partition"
  },
  "4ea2": {
    "id": "4ea2",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "e4ea"
    ]
  },
  "532b": {
    "id": "532b",
    "label": "bufferCount"
  },
  "2b36": {
    "id": "2b36",
    "label": "and emit the group as an array",
    "options": [
      "532b"
    ]
  },
  "156d": {
    "id": "156d",
    "label": "and emit the group as a nested Observable",
    "options": [
      "4646"
    ]
  },
  "6be2": {
    "id": "6be2",
    "label": "in batches of a particular size",
    "options": [
      "2b36",
      "156d"
    ]
  },
  "495d": {
    "id": "495d",
    "label": "bufferTime"
  },
  "397d": {
    "id": "397d",
    "label": "and emit the group as an array",
    "options": [
      "495d"
    ]
  },
  "4ccc": {
    "id": "4ccc",
    "label": "windowTime"
  },
  "7e0e": {
    "id": "7e0e",
    "label": "and emit the group as a nested Observable",
    "options": [
      "4ccc"
    ]
  },
  "dee3": {
    "id": "dee3",
    "label": "based on time",
    "options": [
      "397d",
      "7e0e"
    ]
  },
  "5b66": {
    "id": "5b66",
    "label": "buffer"
  },
  "4b03": {
    "id": "4b03",
    "label": "and emit the group as an array",
    "options": [
      "5b66"
    ]
  },
  "9d6f": {
    "id": "9d6f",
    "label": "and emit the group as a nested Observable",
    "options": [
      "8453"
    ]
  },
  "f676": {
    "id": "f676",
    "label": "until another Observable emits",
    "options": [
      "4b03",
      "9d6f"
    ]
  },
  "fb00": {
    "id": "fb00",
    "label": "bufferWhen"
  },
  "d741": {
    "id": "d741",
    "label": "windowWhen"
  },
  "9c80": {
    "id": "9c80",
    "label": "and emit the group as a nested Observable",
    "options": [
      "d741"
    ]
  },
  "e4d9": {
    "id": "e4d9",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "4813",
      "9c80"
    ]
  },
  "0e46": {
    "id": "0e46",
    "label": "bufferToggle"
  },
  "a413": {
    "id": "a413",
    "label": "and emit the group as an array",
    "options": [
      "0e46"
    ]
  },
  "c914": {
    "id": "c914",
    "label": "windowToggle"
  },
  "528e": {
    "id": "528e",
    "label": "and emit the group as a nested Observable",
    "options": [
      "c914"
    ]
  },
  "10f5": {
    "id": "10f5",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "a413",
      "528e"
    ]
  },
  "a77c": {
    "id": "a77c",
    "label": "groupBy"
  },
  "e3ca": {
    "id": "e3ca",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "a77c"
    ]
  },
  "dd4e": {
    "id": "dd4e",
    "label": "I want to group the values",
    "options": [
      "fe6b",
      "ca80",
      "4ea2",
      "6be2",
      "dee3",
      "f676",
      "e4d9",
      "10f5",
      "e3ca"
    ]
  },
  "e975": {
    "id": "e975",
    "label": "mergeMapTo"
  },
  "118a": {
    "id": "118a",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "e975"
    ]
  },
  "3b7b": {
    "id": "3b7b",
    "label": "mergeMap"
  },
  "8be8": {
    "id": "8be8",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "3b7b"
    ]
  },
  "08ad": {
    "id": "08ad",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "118a",
      "8be8"
    ]
  },
  "c015": {
    "id": "c015",
    "label": "concatMapTo"
  },
  "b597": {
    "id": "b597",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "c015"
    ]
  },
  "2b58": {
    "id": "2b58",
    "label": "concatMap"
  },
  "b37d": {
    "id": "b37d",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "2b58"
    ]
  },
  "6a18": {
    "id": "6a18",
    "label": "switchMapTo"
  },
  "0562": {
    "id": "0562",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "6a18"
    ]
  },
  "42d4": {
    "id": "42d4",
    "label": "switchMap"
  },
  "da06": {
    "id": "da06",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "42d4"
    ]
  },
  "ec18": {
    "id": "ec18",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "0562",
      "da06"
    ]
  },
  "833b": {
    "id": "833b",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "5272"
    ]
  },
  "1a6b": {
    "id": "1a6b",
    "label": "expand"
  },
  "a0a7": {
    "id": "a0a7",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "1a6b"
    ]
  },
  "3fb3": {
    "id": "3fb3",
    "label": "pipe"
  },
  "9d1b": {
    "id": "9d1b",
    "label": "I want to perform custom operations",
    "options": [
      "3fb3"
    ]
  },
  "b96c": {
    "id": "b96c",
    "label": "share"
  },
  "057b": {
    "id": "057b",
    "label": "publish"
  },
  "569f": {
    "id": "569f",
    "label": "and start it manually or imperatively",
    "options": [
      "057b"
    ]
  },
  "44e4": {
    "id": "44e4",
    "label": "using a conventional Subject",
    "options": [
      "5579",
      "569f"
    ]
  },
  "8d13": {
    "id": "8d13",
    "label": "publishBehavior"
  },
  "00b9": {
    "id": "00b9",
    "label": "using a BehaviorSubject",
    "options": [
      "8d13"
    ]
  },
  "cd4c": {
    "id": "cd4c",
    "label": "publishReplay"
  },
  "ce28": {
    "id": "ce28",
    "label": "using a ReplaySubject",
    "options": [
      "cd4c"
    ]
  },
  "b581": {
    "id": "b581",
    "label": "publishLast"
  },
  "73d8": {
    "id": "73d8",
    "label": "using an AsyncSubject",
    "options": [
      "b581"
    ]
  },
  "66d6": {
    "id": "66d6",
    "label": "multicast"
  },
  "c27a": {
    "id": "c27a",
    "label": "using a specific subject implementation",
    "options": [
      "66d6"
    ]
  },
  "feaa": {
    "id": "feaa",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "44e4",
      "00b9",
      "ce28",
      "73d8",
      "c27a"
    ]
  },
  "e1f9": {
    "id": "e1f9",
    "label": "catchError"
  },
  "275a": {
    "id": "275a",
    "label": "I want to start a new Observable",
    "options": [
      "e1f9"
    ]
  },
  "1c6c": {
    "id": "1c6c",
    "label": "retry"
  },
  "7eb4": {
    "id": "7eb4",
    "label": "immediately",
    "options": [
      "1c6c"
    ]
  },
  "777f": {
    "id": "777f",
    "label": "retryWhen"
  },
  "18a6": {
    "id": "18a6",
    "label": "when another Observable emits",
    "options": [
      "777f"
    ]
  },
  "d285": {
    "id": "d285",
    "label": "I want to re-subscribe",
    "options": [
      "7eb4",
      "18a6"
    ]
  },
  "d731": {
    "id": "d731",
    "label": "repeat"
  },
  "039f": {
    "id": "039f",
    "label": "immediately",
    "options": [
      "d731"
    ]
  },
  "c64d": {
    "id": "c64d",
    "label": "repeatWhen"
  },
  "f480": {
    "id": "f480",
    "label": "when another Observable emits",
    "options": [
      "c64d"
    ]
  },
  "0f50": {
    "id": "0f50",
    "label": "I want to re-subscribe",
    "options": [
      "039f",
      "f480"
    ]
  },
  "dc08": {
    "id": "dc08",
    "label": "I want to start a new Observable",
    "options": [
      "9040"
    ]
  },
  "137c": {
    "id": "137c",
    "label": "when it completes",
    "options": [
      "0f50",
      "dc08"
    ]
  },
  "49cb": {
    "id": "49cb",
    "label": "finalize"
  },
  "0f23": {
    "id": "0f23",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "49cb"
    ]
  },
  "7e9e": {
    "id": "7e9e",
    "label": "subscribeOn"
  },
  "b704": {
    "id": "b704",
    "label": "that routes calls to subscribe",
    "options": [
      "7e9e"
    ]
  },
  "bd04": {
    "id": "bd04",
    "label": "observeOn"
  },
  "868e": {
    "id": "868e",
    "label": "that routes values to observers",
    "options": [
      "bd04"
    ]
  },
  "8a7f": {
    "id": "8a7f",
    "label": "I want to change the scheduler",
    "options": [
      "b704",
      "868e"
    ]
  },
  "be84": {
    "id": "be84",
    "label": "race"
  },
  "4c0b": {
    "id": "4c0b",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "be84"
    ]
  },
  "2b10": {
    "id": "2b10",
    "label": "merge"
  },
  "3b8e": {
    "id": "3b8e",
    "label": "I want to output the values from either of them",
    "options": [
      "2b10"
    ]
  },
  "1d21": {
    "id": "1d21",
    "label": "combineLatest"
  },
  "981b": {
    "id": "981b",
    "label": "withLatestFrom"
  },
  "f6ab": {
    "id": "f6ab",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "981b"
    ]
  },
  "7f5b": {
    "id": "7f5b",
    "label": "zip"
  },
  "037d": {
    "id": "037d",
    "label": "using each source value only once",
    "options": [
      "7f5b"
    ]
  },
  "ea43": {
    "id": "ea43",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "1320",
      "f6ab",
      "037d"
    ]
  },
  "9d52": {
    "id": "9d52",
    "label": "I have one existing Observable, and",
    "options": [
      "687a",
      "e158",
      "6983",
      "c16b",
      "fba1",
      "508b",
      "402a",
      "313d",
      "8664",
      "3dbe",
      "065e",
      "5f52",
      "dd4e",
      "6779",
      "9d1b",
      "feaa",
      "6859",
      "137c",
      "0f23",
      "8a7f",
      "2242"
    ]
  },
  "b8f2": {
    "id": "b8f2",
    "label": "race"
  },
  "db7d": {
    "id": "db7d",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "b8f2"
    ]
  },
  "a4aa": {
    "id": "a4aa",
    "label": "forkJoin"
  },
  "6f89": {
    "id": "6f89",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "a4aa"
    ]
  },
  "03c4": {
    "id": "03c4",
    "label": "merge"
  },
  "fbe5": {
    "id": "fbe5",
    "label": "I want to output the values from either of them",
    "options": [
      "03c4"
    ]
  },
  "cda7": {
    "id": "cda7",
    "label": "combineLatest"
  },
  "96c8": {
    "id": "96c8",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "cda7"
    ]
  },
  "9f42": {
    "id": "9f42",
    "label": "zip"
  },
  "4a01": {
    "id": "4a01",
    "label": "using each source value only once",
    "options": [
      "9f42"
    ]
  },
  "b21b": {
    "id": "b21b",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "96c8",
      "4a01"
    ]
  },
  "60f2": {
    "id": "60f2",
    "label": "concat"
  },
  "99a7": {
    "id": "99a7",
    "label": "I want to subscribe to each in order",
    "options": [
      "60f2"
    ]
  },
  "d79b": {
    "id": "d79b",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "db7d",
      "6f89",
      "fbe5",
      "b21b",
      "99a7"
    ]
  },
  "dae3": {
    "id": "dae3",
    "label": "using custom logic",
    "options": [
      "9359"
    ]
  },
  "7dfa": {
    "id": "7dfa",
    "label": "generate"
  },
  "d3fd": {
    "id": "d3fd",
    "label": "using a state machine similar to a for loop",
    "options": [
      "7dfa"
    ]
  },
  "8e7c": {
    "id": "8e7c",
    "label": "throwError"
  },
  "0b19": {
    "id": "0b19",
    "label": "that throws an error",
    "options": [
      "8e7c"
    ]
  },
  "96c2": {
    "id": "96c2",
    "label": "that just completes, without emitting values",
    "options": [
      "6490"
    ]
  },
  "c407": {
    "id": "c407",
    "label": "NEVER"
  },
  "40fb": {
    "id": "40fb",
    "label": "that never emits anything",
    "options": [
      "c407"
    ]
  },
  "c34f": {
    "id": "c34f",
    "label": "fromEvent"
  },
  "4b9c": {
    "id": "4b9c",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "c34f"
    ]
  },
  "a955": {
    "id": "a955",
    "label": "fromEventPattern"
  },
  "f886": {
    "id": "f886",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "a955"
    ]
  },
  "ebbe": {
    "id": "ebbe",
    "label": "from an existing source of events",
    "options": [
      "4b9c",
      "f886"
    ]
  },
  "b752": {
    "id": "b752",
    "label": "from"
  },
  "93e9": {
    "id": "93e9",
    "label": "over the values in an array",
    "options": [
      "b752"
    ]
  },
  "718d": {
    "id": "718d",
    "label": "over values in a numeric range",
    "options": [
      "6455"
    ]
  },
  "7e30": {
    "id": "7e30",
    "label": "of"
  },
  "9ee4": {
    "id": "9ee4",
    "label": "over prefined values given as arguments",
    "options": [
      "7e30"
    ]
  },
  "d776": {
    "id": "d776",
    "label": "that iterates",
    "options": [
      "93e9",
      "718d",
      "9ee4"
    ]
  },
  "e203": {
    "id": "e203",
    "label": "interval"
  },
  "90c7": {
    "id": "90c7",
    "label": "regularly",
    "options": [
      "e203"
    ]
  },
  "3e80": {
    "id": "3e80",
    "label": "timer"
  },
  "98be": {
    "id": "98be",
    "label": "with an optional initial delay",
    "options": [
      "3e80"
    ]
  },
  "db02": {
    "id": "db02",
    "label": "defer"
  },
  "0abf": {
    "id": "0abf",
    "label": "which is built on demand when subscribed",
    "options": [
      "db02"
    ]
  },
  "a26c": {
    "id": "a26c",
    "label": "I want to create a new Observable",
    "options": [
      "dae3",
      "d3fd",
      "0b19",
      "96c2",
      "40fb",
      "ebbe",
      "9650",
      "d776",
      "3836",
      "0abf"
    ]
  },
  "b638": {
    "id": "b638",
    "label": "bindCallback"
  },
  "06cc": {
    "id": "06cc",
    "label": "supporting a conventional callback API",
    "options": [
      "b638"
    ]
  },
  "3dff": {
    "id": "3dff",
    "label": "bindNodeCallback"
  },
  "9de4": {
    "id": "9de4",
    "label": "supporting Node.js callback style API",
    "options": [
      "3dff"
    ]
  },
  "6bf0": {
    "id": "6bf0",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "06cc",
      "9de4"
    ]
  },
  "b214": {
    "id": "b214",
    "label": "I have no Observables yet, and",
    "options": [
      "a26c",
      "6bf0"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "9d52",
      "d79b",
      "b214"
    ]
  }
}