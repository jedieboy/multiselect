{
  "1020": {
    "id": "1020",
    "label": "over prefined values given as arguments",
    "options": [
      "90f5"
    ]
  },
  "1105": {
    "id": "1105",
    "label": "when another Observable emits",
    "options": [
      "61c1"
    ]
  },
  "1890": {
    "id": "1890",
    "label": "and only the first value",
    "options": [
      "a670"
    ]
  },
  "2175": {
    "id": "2175",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "7188",
      "28ca"
    ]
  },
  "2214": {
    "id": "2214",
    "label": "publish"
  },
  "2373": {
    "id": "2373",
    "label": "takeLast"
  },
  "2614": {
    "id": "2614",
    "label": "concatMap"
  },
  "2640": {
    "id": "2640",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "c32d"
    ]
  },
  "2736": {
    "id": "2736",
    "label": "that routes values to observers",
    "options": [
      "7630"
    ]
  },
  "2935": {
    "id": "2935",
    "label": "partition"
  },
  "2939": {
    "id": "2939",
    "label": "windowTime"
  },
  "2970": {
    "id": "2970",
    "label": "using each source value only once",
    "options": [
      "1ed8"
    ]
  },
  "3416": {
    "id": "3416",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "0a91",
      "1ef5"
    ]
  },
  "3903": {
    "id": "3903",
    "label": "catchError"
  },
  "4046": {
    "id": "4046",
    "label": "I want to re-subscribe",
    "options": [
      "a16e",
      "9818"
    ]
  },
  "4783": {
    "id": "4783",
    "label": "startWith"
  },
  "4979": {
    "id": "4979",
    "label": "fromEventPattern"
  },
  "5315": {
    "id": "5315",
    "label": "publishReplay"
  },
  "5489": {
    "id": "5489",
    "label": "over the values in an array",
    "options": [
      "5978"
    ]
  },
  "5906": {
    "id": "5906",
    "label": "bindCallback"
  },
  "5978": {
    "id": "5978",
    "label": "from"
  },
  "6681": {
    "id": "6681",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "2935"
    ]
  },
  "7168": {
    "id": "7168",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "952d"
    ]
  },
  "7188": {
    "id": "7188",
    "label": "and emit the group as an array",
    "options": [
      "c448"
    ]
  },
  "7392": {
    "id": "7392",
    "label": "I want to ensure there is only one value",
    "options": [
      "22c0"
    ]
  },
  "7630": {
    "id": "7630",
    "label": "observeOn"
  },
  "7846": {
    "id": "7846",
    "label": "bufferTime"
  },
  "8009": {
    "id": "8009",
    "label": "publishLast"
  },
  "8563": {
    "id": "8563",
    "label": "takeUntil"
  },
  "9655": {
    "id": "9655",
    "label": "audit"
  },
  "9818": {
    "id": "9818",
    "label": "when another Observable emits",
    "options": [
      "7a3a"
    ]
  },
  "9959": {
    "id": "9959",
    "label": "from the start of the Observable",
    "options": [
      "b403",
      "c55b"
    ]
  },
  "fa9e": {
    "id": "fa9e",
    "label": "mapTo"
  },
  "a230": {
    "id": "a230",
    "label": "to be a constant value",
    "options": [
      "fa9e"
    ]
  },
  "5b44": {
    "id": "5b44",
    "label": "map"
  },
  "48ec": {
    "id": "48ec",
    "label": "to be a value calculated through a formula",
    "options": [
      "5b44"
    ]
  },
  "ebbf": {
    "id": "ebbf",
    "label": "I want to change each emitted value",
    "options": [
      "a230",
      "48ec"
    ]
  },
  "5a4d": {
    "id": "5a4d",
    "label": "pluck"
  },
  "b5dc": {
    "id": "b5dc",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "5a4d"
    ]
  },
  "14aa": {
    "id": "14aa",
    "label": "tap"
  },
  "72a1": {
    "id": "72a1",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "14aa"
    ]
  },
  "dfb3": {
    "id": "dfb3",
    "label": "filter"
  },
  "975e": {
    "id": "975e",
    "label": "based on custom logic",
    "options": [
      "dfb3"
    ]
  },
  "a670": {
    "id": "a670",
    "label": "first"
  },
  "e28c": {
    "id": "e28c",
    "label": "take"
  },
  "779b": {
    "id": "779b",
    "label": "based on a given amount",
    "options": [
      "e28c"
    ]
  },
  "df6b": {
    "id": "df6b",
    "label": "takeWhile"
  },
  "3ce1": {
    "id": "3ce1",
    "label": "based on custom logic",
    "options": [
      "df6b"
    ]
  },
  "da7d": {
    "id": "da7d",
    "label": "if they are at the start of the Observable",
    "options": [
      "1890",
      "779b",
      "3ce1"
    ]
  },
  "0181": {
    "id": "0181",
    "label": "elementAt"
  },
  "87cf": {
    "id": "87cf",
    "label": "if they are exactly the n-th emission",
    "options": [
      "0181"
    ]
  },
  "6bc4": {
    "id": "6bc4",
    "label": "last"
  },
  "06de": {
    "id": "06de",
    "label": "and only the last value",
    "options": [
      "6bc4"
    ]
  },
  "02da": {
    "id": "02da",
    "label": "based on a given amount",
    "options": [
      "2373"
    ]
  },
  "06b1": {
    "id": "06b1",
    "label": "if they are at the end of the Observable",
    "options": [
      "06de",
      "02da"
    ]
  },
  "42c2": {
    "id": "42c2",
    "label": "until another Observable emits a value",
    "options": [
      "8563"
    ]
  },
  "e7b5": {
    "id": "e7b5",
    "label": "I want to allow some values to pass",
    "options": [
      "975e",
      "da7d",
      "87cf",
      "06b1",
      "42c2"
    ]
  },
  "d686": {
    "id": "d686",
    "label": "ignoreElements"
  },
  "61af": {
    "id": "61af",
    "label": "altogether",
    "options": [
      "d686"
    ]
  },
  "4f98": {
    "id": "4f98",
    "label": "skip"
  },
  "b403": {
    "id": "b403",
    "label": "based on a given amount",
    "options": [
      "4f98"
    ]
  },
  "27d2": {
    "id": "27d2",
    "label": "skipWhile"
  },
  "c55b": {
    "id": "c55b",
    "label": "based on custom logic",
    "options": [
      "27d2"
    ]
  },
  "afb1": {
    "id": "afb1",
    "label": "skipLast"
  },
  "97e0": {
    "id": "97e0",
    "label": "from the end of the Observable",
    "options": [
      "afb1"
    ]
  },
  "d047": {
    "id": "d047",
    "label": "skipUntil"
  },
  "d8fa": {
    "id": "d8fa",
    "label": "until another Observable emits a value",
    "options": [
      "d047"
    ]
  },
  "c1a5": {
    "id": "c1a5",
    "label": "distinctUntilChanged"
  },
  "d246": {
    "id": "d246",
    "label": "emitted just before the current value",
    "options": [
      "c1a5"
    ]
  },
  "bd78": {
    "id": "bd78",
    "label": "distinct"
  },
  "b03b": {
    "id": "b03b",
    "label": "emitted some time in the past",
    "options": [
      "bd78"
    ]
  },
  "4c14": {
    "id": "4c14",
    "label": "according to value equality",
    "options": [
      "d246",
      "b03b"
    ]
  },
  "e97f": {
    "id": "e97f",
    "label": "distinctUntilKeyChanged"
  },
  "a2ca": {
    "id": "a2ca",
    "label": "emitted just before the current value",
    "options": [
      "e97f"
    ]
  },
  "e76c": {
    "id": "e76c",
    "label": "according to a key or object property",
    "options": [
      "a2ca"
    ]
  },
  "677a": {
    "id": "677a",
    "label": "that match some previous value",
    "options": [
      "4c14",
      "e76c"
    ]
  },
  "b5cb": {
    "id": "b5cb",
    "label": "throttle"
  },
  "f136": {
    "id": "f136",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "b5cb"
    ]
  },
  "cb56": {
    "id": "cb56",
    "label": "throttleTime"
  },
  "a829": {
    "id": "a829",
    "label": "where time windows are determined by a time duration",
    "options": [
      "cb56"
    ]
  },
  "f0b2": {
    "id": "f0b2",
    "label": "by emitting the first value in each time window",
    "options": [
      "f136",
      "a829"
    ]
  },
  "a675": {
    "id": "a675",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "9655"
    ]
  },
  "02f0": {
    "id": "02f0",
    "label": "auditTime"
  },
  "c26e": {
    "id": "c26e",
    "label": "where time windows are determined by a time duration",
    "options": [
      "02f0"
    ]
  },
  "e097": {
    "id": "e097",
    "label": "by emitting the last value in each time window",
    "options": [
      "a675",
      "c26e"
    ]
  },
  "b4ad": {
    "id": "b4ad",
    "label": "debounce"
  },
  "a335": {
    "id": "a335",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "b4ad"
    ]
  },
  "952d": {
    "id": "952d",
    "label": "debounceTime"
  },
  "6d71": {
    "id": "6d71",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "a335",
      "7168"
    ]
  },
  "68bf": {
    "id": "68bf",
    "label": "that occur too frequently",
    "options": [
      "f0b2",
      "e097",
      "6d71"
    ]
  },
  "1e39": {
    "id": "1e39",
    "label": "I want to ignore values",
    "options": [
      "61af",
      "9959",
      "97e0",
      "d8fa",
      "677a",
      "68bf"
    ]
  },
  "bd55": {
    "id": "bd55",
    "label": "reduce"
  },
  "05cb": {
    "id": "05cb",
    "label": "and only output the final computed value",
    "options": [
      "bd55"
    ]
  },
  "4b8c": {
    "id": "4b8c",
    "label": "scan"
  },
  "2dcb": {
    "id": "2dcb",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "4b8c"
    ]
  },
  "533e": {
    "id": "533e",
    "label": "mergeScan"
  },
  "c5b1": {
    "id": "c5b1",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "533e"
    ]
  },
  "72e8": {
    "id": "72e8",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "05cb",
      "2dcb",
      "c5b1"
    ]
  },
  "9d99": {
    "id": "9d99",
    "label": "materialize"
  },
  "6dc4": {
    "id": "6dc4",
    "label": "in batches of a particular size",
    "options": [
      "f873",
      "c01b"
    ]
  },
  "1e94": {
    "id": "1e94",
    "label": "timeInterval"
  },
  "23c7": {
    "id": "23c7",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "1e94"
    ]
  },
  "d00d": {
    "id": "d00d",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "6dc4",
      "23c7"
    ]
  },
  "e8f3": {
    "id": "e8f3",
    "label": "timeout"
  },
  "2af8": {
    "id": "2af8",
    "label": "I want to throw an error",
    "options": [
      "e8f3"
    ]
  },
  "da4f": {
    "id": "da4f",
    "label": "timeoutWith"
  },
  "9a69": {
    "id": "9a69",
    "label": "I want to switch to another Observable",
    "options": [
      "da4f"
    ]
  },
  "4ebc": {
    "id": "4ebc",
    "label": "after a period of inactivity",
    "options": [
      "2af8",
      "9a69"
    ]
  },
  "22c0": {
    "id": "22c0",
    "label": "single"
  },
  "e775": {
    "id": "e775",
    "label": "count"
  },
  "f898": {
    "id": "f898",
    "label": "I want to know how many values it emits",
    "options": [
      "e775"
    ]
  },
  "04a2": {
    "id": "04a2",
    "label": "I want to prepend one value",
    "options": [
      "4783"
    ]
  },
  "28a2": {
    "id": "28a2",
    "label": "delay"
  },
  "f9fd": {
    "id": "f9fd",
    "label": "based on a given amount of time",
    "options": [
      "28a2"
    ]
  },
  "8f0a": {
    "id": "8f0a",
    "label": "delayWhen"
  },
  "a5d0": {
    "id": "a5d0",
    "label": "based on the emissions of another Observable",
    "options": [
      "8f0a"
    ]
  },
  "65f2": {
    "id": "65f2",
    "label": "I want to delay the emissions",
    "options": [
      "f9fd",
      "a5d0"
    ]
  },
  "6e0f": {
    "id": "6e0f",
    "label": "toArray"
  },
  "c657": {
    "id": "c657",
    "label": "and convert to an array",
    "options": [
      "6e0f"
    ]
  },
  "561d": {
    "id": "561d",
    "label": "Observable",
    "method": "toPromise"
  },
  "421b": {
    "id": "421b",
    "label": "and convert to a Promise",
    "options": [
      "561d"
    ]
  },
  "6ca3": {
    "id": "6ca3",
    "label": "until the Observable completes",
    "options": [
      "c657",
      "421b"
    ]
  },
  "46df": {
    "id": "46df",
    "label": "pairwise"
  },
  "0327": {
    "id": "0327",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "46df"
    ]
  },
  "6be9": {
    "id": "6be9",
    "label": "bufferCount"
  },
  "f873": {
    "id": "f873",
    "label": "and emit the group as an array",
    "options": [
      "6be9"
    ]
  },
  "d27e": {
    "id": "d27e",
    "label": "windowCount"
  },
  "c01b": {
    "id": "c01b",
    "label": "and emit the group as a nested Observable",
    "options": [
      "d27e"
    ]
  },
  "0c04": {
    "id": "0c04",
    "label": "and emit the group as an array",
    "options": [
      "7846"
    ]
  },
  "00e6": {
    "id": "00e6",
    "label": "and emit the group as a nested Observable",
    "options": [
      "2939"
    ]
  },
  "79d4": {
    "id": "79d4",
    "label": "based on time",
    "options": [
      "0c04",
      "00e6"
    ]
  },
  "3bce": {
    "id": "3bce",
    "label": "buffer"
  },
  "18ab": {
    "id": "18ab",
    "label": "and emit the group as an array",
    "options": [
      "3bce"
    ]
  },
  "4ca6": {
    "id": "4ca6",
    "label": "window"
  },
  "ef25": {
    "id": "ef25",
    "label": "and emit the group as a nested Observable",
    "options": [
      "4ca6"
    ]
  },
  "05f4": {
    "id": "05f4",
    "label": "until another Observable emits",
    "options": [
      "18ab",
      "ef25"
    ]
  },
  "c448": {
    "id": "c448",
    "label": "bufferWhen"
  },
  "f1dd": {
    "id": "f1dd",
    "label": "windowWhen"
  },
  "28ca": {
    "id": "28ca",
    "label": "and emit the group as a nested Observable",
    "options": [
      "f1dd"
    ]
  },
  "aa07": {
    "id": "aa07",
    "label": "bufferToggle"
  },
  "c1ce": {
    "id": "c1ce",
    "label": "and emit the group as an array",
    "options": [
      "aa07"
    ]
  },
  "0807": {
    "id": "0807",
    "label": "windowToggle"
  },
  "4e8a": {
    "id": "4e8a",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "65fe",
      "daca"
    ]
  },
  "967f": {
    "id": "967f",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "c1ce",
      "4e8a"
    ]
  },
  "f83f": {
    "id": "f83f",
    "label": "groupBy"
  },
  "b4e8": {
    "id": "b4e8",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "f83f"
    ]
  },
  "86c9": {
    "id": "86c9",
    "label": "I want to group the values",
    "options": [
      "6ca3",
      "0327",
      "6681",
      "6dc4",
      "79d4",
      "05f4",
      "2175",
      "967f",
      "b4e8"
    ]
  },
  "742f": {
    "id": "742f",
    "label": "mergeMapTo"
  },
  "ce09": {
    "id": "ce09",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "742f"
    ]
  },
  "b5c5": {
    "id": "b5c5",
    "label": "mergeMap"
  },
  "565d": {
    "id": "565d",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "b5c5"
    ]
  },
  "0d07": {
    "id": "0d07",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "ce09",
      "565d"
    ]
  },
  "dd09": {
    "id": "dd09",
    "label": "concatMapTo"
  },
  "b1b3": {
    "id": "b1b3",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "dd09"
    ]
  },
  "fae4": {
    "id": "fae4",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "2614"
    ]
  },
  "ca74": {
    "id": "ca74",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "b1b3",
      "fae4"
    ]
  },
  "fe60": {
    "id": "fe60",
    "label": "switchMapTo"
  },
  "083d": {
    "id": "083d",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "fe60"
    ]
  },
  "f5ec": {
    "id": "f5ec",
    "label": "switchMap"
  },
  "7e6a": {
    "id": "7e6a",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "f5ec"
    ]
  },
  "fc7b": {
    "id": "fc7b",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "083d",
      "7e6a"
    ]
  },
  "424b": {
    "id": "424b",
    "label": "exhaustMap"
  },
  "60e9": {
    "id": "60e9",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "424b"
    ]
  },
  "ddda": {
    "id": "ddda",
    "label": "expand"
  },
  "f331": {
    "id": "f331",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "ddda"
    ]
  },
  "2ad4": {
    "id": "2ad4",
    "label": "I want to start a new Observable for each value",
    "options": [
      "0d07",
      "ca74",
      "fc7b",
      "60e9",
      "f331"
    ]
  },
  "3b13": {
    "id": "3b13",
    "label": "pipe"
  },
  "c09e": {
    "id": "c09e",
    "label": "I want to perform custom operations",
    "options": [
      "3b13"
    ]
  },
  "0987": {
    "id": "0987",
    "label": "share"
  },
  "aa78": {
    "id": "aa78",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "0987"
    ]
  },
  "f158": {
    "id": "f158",
    "label": "and start it manually or imperatively",
    "options": [
      "2214"
    ]
  },
  "e45f": {
    "id": "e45f",
    "label": "using a conventional Subject",
    "options": [
      "aa78",
      "f158"
    ]
  },
  "0dac": {
    "id": "0dac",
    "label": "publishBehavior"
  },
  "dc30": {
    "id": "dc30",
    "label": "using a BehaviorSubject",
    "options": [
      "0dac"
    ]
  },
  "e1af": {
    "id": "e1af",
    "label": "using a ReplaySubject",
    "options": [
      "5315"
    ]
  },
  "a922": {
    "id": "a922",
    "label": "using an AsyncSubject",
    "options": [
      "8009"
    ]
  },
  "ec05": {
    "id": "ec05",
    "label": "multicast"
  },
  "223d": {
    "id": "223d",
    "label": "using a specific subject implementation",
    "options": [
      "ec05"
    ]
  },
  "648d": {
    "id": "648d",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "e45f",
      "dc30",
      "e1af",
      "a922",
      "223d"
    ]
  },
  "fbef": {
    "id": "fbef",
    "label": "I want to start a new Observable",
    "options": [
      "3903"
    ]
  },
  "94b5": {
    "id": "94b5",
    "label": "retry"
  },
  "a16e": {
    "id": "a16e",
    "label": "immediately",
    "options": [
      "94b5"
    ]
  },
  "7a3a": {
    "id": "7a3a",
    "label": "retryWhen"
  },
  "777e": {
    "id": "777e",
    "label": "when an error occurs",
    "options": [
      "fbef",
      "4046"
    ]
  },
  "e637": {
    "id": "e637",
    "label": "repeat"
  },
  "1f78": {
    "id": "1f78",
    "label": "immediately",
    "options": [
      "e637"
    ]
  },
  "61c1": {
    "id": "61c1",
    "label": "repeatWhen"
  },
  "a043": {
    "id": "a043",
    "label": "I want to re-subscribe",
    "options": [
      "1f78",
      "1105"
    ]
  },
  "70d4": {
    "id": "70d4",
    "label": "concat"
  },
  "eeb6": {
    "id": "eeb6",
    "label": "I want to start a new Observable",
    "options": [
      "70d4"
    ]
  },
  "f108": {
    "id": "f108",
    "label": "when it completes",
    "options": [
      "a043",
      "eeb6"
    ]
  },
  "cb76": {
    "id": "cb76",
    "label": "finalize"
  },
  "24d6": {
    "id": "24d6",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "cb76"
    ]
  },
  "3b3c": {
    "id": "3b3c",
    "label": "subscribeOn"
  },
  "c358": {
    "id": "c358",
    "label": "that routes calls to subscribe",
    "options": [
      "3b3c"
    ]
  },
  "6b27": {
    "id": "6b27",
    "label": "I want to change the scheduler",
    "options": [
      "c358",
      "2736"
    ]
  },
  "67dd": {
    "id": "67dd",
    "label": "race"
  },
  "8d63": {
    "id": "8d63",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "67dd"
    ]
  },
  "b337": {
    "id": "b337",
    "label": "merge"
  },
  "1b29": {
    "id": "1b29",
    "label": "I want to output the values from either of them",
    "options": [
      "b337"
    ]
  },
  "c2bb": {
    "id": "c2bb",
    "label": "combineLatest"
  },
  "f5c4": {
    "id": "f5c4",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "c2bb"
    ]
  },
  "60c9": {
    "id": "60c9",
    "label": "withLatestFrom"
  },
  "db3e": {
    "id": "db3e",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "60c9"
    ]
  },
  "1ed8": {
    "id": "1ed8",
    "label": "zip"
  },
  "4f53": {
    "id": "4f53",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "f5c4",
      "db3e",
      "2970"
    ]
  },
  "d698": {
    "id": "d698",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "8d63",
      "1b29",
      "4f53"
    ]
  },
  "f730": {
    "id": "f730",
    "label": "I have one existing Observable, and",
    "options": [
      "ebbf",
      "b5dc",
      "72a1",
      "e7b5",
      "1e39",
      "72e8",
      "d00d",
      "4ebc",
      "7392",
      "f898",
      "04a2",
      "65f2",
      "86c9",
      "2ad4",
      "c09e",
      "648d",
      "777e",
      "f108",
      "24d6",
      "6b27",
      "d698"
    ]
  },
  "e60c": {
    "id": "e60c",
    "label": "race"
  },
  "4a54": {
    "id": "4a54",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "e60c"
    ]
  },
  "c32d": {
    "id": "c32d",
    "label": "forkJoin"
  },
  "dcf7": {
    "id": "dcf7",
    "label": "merge"
  },
  "0b54": {
    "id": "0b54",
    "label": "I want to output the values from either of them",
    "options": [
      "dcf7"
    ]
  },
  "23f7": {
    "id": "23f7",
    "label": "combineLatest"
  },
  "0a91": {
    "id": "0a91",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "23f7"
    ]
  },
  "27c9": {
    "id": "27c9",
    "label": "zip"
  },
  "1ef5": {
    "id": "1ef5",
    "label": "using each source value only once",
    "options": [
      "27c9"
    ]
  },
  "f652": {
    "id": "f652",
    "label": "concat"
  },
  "c198": {
    "id": "c198",
    "label": "I want to subscribe to each in order",
    "options": [
      "f652"
    ]
  },
  "6a9c": {
    "id": "6a9c",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "4a54",
      "2640",
      "0b54",
      "3416",
      "c198"
    ]
  },
  "7efd": {
    "id": "7efd",
    "label": "Observable",
    "method": "create"
  },
  "2eba": {
    "id": "2eba",
    "label": "using custom logic",
    "options": [
      "7efd"
    ]
  },
  "89be": {
    "id": "89be",
    "label": "generate"
  },
  "a2fb": {
    "id": "a2fb",
    "label": "using a state machine similar to a for loop",
    "options": [
      "89be"
    ]
  },
  "9c2b": {
    "id": "9c2b",
    "label": "throwError"
  },
  "eca4": {
    "id": "eca4",
    "label": "that throws an error",
    "options": [
      "9c2b"
    ]
  },
  "f03e": {
    "id": "f03e",
    "label": "EMPTY"
  },
  "ff90": {
    "id": "ff90",
    "label": "that just completes, without emitting values",
    "options": [
      "f03e"
    ]
  },
  "3e7d": {
    "id": "3e7d",
    "label": "NEVER"
  },
  "778d": {
    "id": "778d",
    "label": "that never emits anything",
    "options": [
      "3e7d"
    ]
  },
  "6a57": {
    "id": "6a57",
    "label": "fromEvent"
  },
  "f757": {
    "id": "f757",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "6a57"
    ]
  },
  "11f7": {
    "id": "11f7",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "4979"
    ]
  },
  "fc1d": {
    "id": "fc1d",
    "label": "from an existing source of events",
    "options": [
      "f757",
      "11f7"
    ]
  },
  "32cf": {
    "id": "32cf",
    "label": "from"
  },
  "a43e": {
    "id": "a43e",
    "label": "from a Promise or an event source",
    "options": [
      "32cf"
    ]
  },
  "a237": {
    "id": "a237",
    "label": "range"
  },
  "089d": {
    "id": "089d",
    "label": "over values in a numeric range",
    "options": [
      "a237"
    ]
  },
  "90f5": {
    "id": "90f5",
    "label": "of"
  },
  "fe18": {
    "id": "fe18",
    "label": "that iterates",
    "options": [
      "5489",
      "089d",
      "1020"
    ]
  },
  "b364": {
    "id": "b364",
    "label": "interval"
  },
  "f5a5": {
    "id": "f5a5",
    "label": "regularly",
    "options": [
      "b364"
    ]
  },
  "8c15": {
    "id": "8c15",
    "label": "timer"
  },
  "55fd": {
    "id": "55fd",
    "label": "with an optional initial delay",
    "options": [
      "8c15"
    ]
  },
  "9af4": {
    "id": "9af4",
    "label": "that emits values on a timer",
    "options": [
      "f5a5",
      "55fd"
    ]
  },
  "0b7d": {
    "id": "0b7d",
    "label": "defer"
  },
  "bdff": {
    "id": "bdff",
    "label": "which is built on demand when subscribed",
    "options": [
      "0b7d"
    ]
  },
  "f293": {
    "id": "f293",
    "label": "I want to create a new Observable",
    "options": [
      "2eba",
      "a2fb",
      "eca4",
      "ff90",
      "778d",
      "fc1d",
      "a43e",
      "fe18",
      "9af4",
      "bdff"
    ]
  },
  "65fe": {
    "id": "65fe",
    "label": "supporting a conventional callback API",
    "options": [
      "5906"
    ]
  },
  "de8a": {
    "id": "de8a",
    "label": "bindNodeCallback"
  },
  "daca": {
    "id": "daca",
    "label": "supporting Node.js callback style API",
    "options": [
      "de8a"
    ]
  },
  "9a51": {
    "id": "9a51",
    "label": "I have no Observables yet, and",
    "options": [
      "f293",
      "4e8a"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "f730",
      "6a9c",
      "9a51"
    ]
  }
}