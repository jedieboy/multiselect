{
  "1579": {
    "id": "1579",
    "label": "and start it manually or imperatively",
    "options": [
      "ae14"
    ]
  },
  "2133": {
    "id": "2133",
    "label": "ignoreElements"
  },
  "2175": {
    "id": "2175",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "e0b2"
    ]
  },
  "2423": {
    "id": "2423",
    "label": "toArray"
  },
  "2467": {
    "id": "2467",
    "label": "mapTo"
  },
  "2661": {
    "id": "2661",
    "label": "and emit the group as a nested Observable",
    "options": [
      "8edb"
    ]
  },
  "2664": {
    "id": "2664",
    "label": "delay"
  },
  "2992": {
    "id": "2992",
    "label": "and only the first value",
    "options": [
      "cf93"
    ]
  },
  "3004": {
    "id": "3004",
    "label": "mergeScan"
  },
  "3578": {
    "id": "3578",
    "label": "and emit the group as an array",
    "options": [
      "da1b"
    ]
  },
  "3795": {
    "id": "3795",
    "label": "auditTime"
  },
  "3849": {
    "id": "3849",
    "label": "groupBy"
  },
  "4571": {
    "id": "4571",
    "label": "bindNodeCallback"
  },
  "5240": {
    "id": "5240",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "83a0"
    ]
  },
  "5547": {
    "id": "5547",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "0bf8"
    ]
  },
  "5808": {
    "id": "5808",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "05fb",
      "5b4b",
      "6fdd"
    ]
  },
  "5851": {
    "id": "5851",
    "label": "from an existing source of events",
    "options": [
      "2175",
      "4c6d"
    ]
  },
  "5904": {
    "id": "5904",
    "label": "throttle"
  },
  "6063": {
    "id": "6063",
    "label": "repeatWhen"
  },
  "6308": {
    "id": "6308",
    "label": "that never emits anything",
    "options": [
      "09bf"
    ]
  },
  "6379": {
    "id": "6379",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "1c6d"
    ]
  },
  "6785": {
    "id": "6785",
    "label": "distinct"
  },
  "7084": {
    "id": "7084",
    "label": "and emit the group as an array",
    "options": [
      "9819"
    ]
  },
  "7166": {
    "id": "7166",
    "label": "reduce"
  },
  "7384": {
    "id": "7384",
    "label": "catchError"
  },
  "7843": {
    "id": "7843",
    "label": "emitted just before the current value",
    "options": [
      "f42f"
    ]
  },
  "8335": {
    "id": "8335",
    "label": "combineLatest"
  },
  "8420": {
    "id": "8420",
    "label": "based on a given amount",
    "options": [
      "0841"
    ]
  },
  "8858": {
    "id": "8858",
    "label": "filter"
  },
  "9127": {
    "id": "9127",
    "label": "that just completes, without emitting values",
    "options": [
      "9211"
    ]
  },
  "9211": {
    "id": "9211",
    "label": "EMPTY"
  },
  "9365": {
    "id": "9365",
    "label": "based on custom logic",
    "options": [
      "8858"
    ]
  },
  "9694": {
    "id": "9694",
    "label": "I want to create a new Observable",
    "options": [
      "ae4c",
      "fbcd",
      "4e34",
      "9127",
      "6308",
      "5851",
      "76d1",
      "f7d3",
      "72f6",
      "c130"
    ]
  },
  "9819": {
    "id": "9819",
    "label": "bufferToggle"
  },
  "9880": {
    "id": "9880",
    "label": "emitted some time in the past",
    "options": [
      "6785"
    ]
  },
  "77f2": {
    "id": "77f2",
    "label": "to be a constant value",
    "options": [
      "2467"
    ]
  },
  "c4d2": {
    "id": "c4d2",
    "label": "map"
  },
  "00cf": {
    "id": "00cf",
    "label": "to be a value calculated through a formula",
    "options": [
      "c4d2"
    ]
  },
  "1de0": {
    "id": "1de0",
    "label": "I want to change each emitted value",
    "options": [
      "77f2",
      "00cf"
    ]
  },
  "09e4": {
    "id": "09e4",
    "label": "pluck"
  },
  "0c56": {
    "id": "0c56",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "09e4"
    ]
  },
  "0bc5": {
    "id": "0bc5",
    "label": "tap"
  },
  "153a": {
    "id": "153a",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "0bc5"
    ]
  },
  "cf93": {
    "id": "cf93",
    "label": "first"
  },
  "4a3a": {
    "id": "4a3a",
    "label": "take"
  },
  "4b3e": {
    "id": "4b3e",
    "label": "based on a given amount",
    "options": [
      "4a3a"
    ]
  },
  "51f7": {
    "id": "51f7",
    "label": "takeWhile"
  },
  "1aa3": {
    "id": "1aa3",
    "label": "based on custom logic",
    "options": [
      "51f7"
    ]
  },
  "8b47": {
    "id": "8b47",
    "label": "if they are at the start of the Observable",
    "options": [
      "2992",
      "4b3e",
      "1aa3"
    ]
  },
  "5be8": {
    "id": "5be8",
    "label": "elementAt"
  },
  "3cf3": {
    "id": "3cf3",
    "label": "if they are exactly the n-th emission",
    "options": [
      "5be8"
    ]
  },
  "a1c7": {
    "id": "a1c7",
    "label": "last"
  },
  "db08": {
    "id": "db08",
    "label": "and only the last value",
    "options": [
      "a1c7"
    ]
  },
  "5ee9": {
    "id": "5ee9",
    "label": "takeLast"
  },
  "0d6f": {
    "id": "0d6f",
    "label": "based on a given amount",
    "options": [
      "5ee9"
    ]
  },
  "f58f": {
    "id": "f58f",
    "label": "if they are at the end of the Observable",
    "options": [
      "db08",
      "0d6f"
    ]
  },
  "585c": {
    "id": "585c",
    "label": "takeUntil"
  },
  "82eb": {
    "id": "82eb",
    "label": "until another Observable emits a value",
    "options": [
      "585c"
    ]
  },
  "2eef": {
    "id": "2eef",
    "label": "I want to allow some values to pass",
    "options": [
      "9365",
      "8b47",
      "3cf3",
      "f58f",
      "82eb"
    ]
  },
  "938b": {
    "id": "938b",
    "label": "altogether",
    "options": [
      "2133"
    ]
  },
  "0841": {
    "id": "0841",
    "label": "skip"
  },
  "e5f4": {
    "id": "e5f4",
    "label": "skipWhile"
  },
  "7e26": {
    "id": "7e26",
    "label": "based on custom logic",
    "options": [
      "e5f4"
    ]
  },
  "9d32": {
    "id": "9d32",
    "label": "from the start of the Observable",
    "options": [
      "8420",
      "7e26"
    ]
  },
  "29c5": {
    "id": "29c5",
    "label": "windowTime"
  },
  "61b4": {
    "id": "61b4",
    "label": "from the end of the Observable",
    "options": [
      "29c5"
    ]
  },
  "3c39": {
    "id": "3c39",
    "label": "skipUntil"
  },
  "b329": {
    "id": "b329",
    "label": "until another Observable emits a value",
    "options": [
      "3c39"
    ]
  },
  "87b2": {
    "id": "87b2",
    "label": "distinctUntilChanged"
  },
  "d089": {
    "id": "d089",
    "label": "emitted just before the current value",
    "options": [
      "87b2"
    ]
  },
  "a52c": {
    "id": "a52c",
    "label": "according to value equality",
    "options": [
      "d089",
      "9880"
    ]
  },
  "f42f": {
    "id": "f42f",
    "label": "distinctUntilKeyChanged"
  },
  "fcb9": {
    "id": "fcb9",
    "label": "according to a key or object property",
    "options": [
      "7843"
    ]
  },
  "ea1b": {
    "id": "ea1b",
    "label": "that match some previous value",
    "options": [
      "a52c",
      "fcb9"
    ]
  },
  "380c": {
    "id": "380c",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "5904"
    ]
  },
  "dc88": {
    "id": "dc88",
    "label": "throttleTime"
  },
  "79e7": {
    "id": "79e7",
    "label": "where time windows are determined by a time duration",
    "options": [
      "dc88"
    ]
  },
  "bb02": {
    "id": "bb02",
    "label": "by emitting the first value in each time window",
    "options": [
      "380c",
      "79e7"
    ]
  },
  "28a3": {
    "id": "28a3",
    "label": "audit"
  },
  "f8ff": {
    "id": "f8ff",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "28a3"
    ]
  },
  "7be5": {
    "id": "7be5",
    "label": "where time windows are determined by a time duration",
    "options": [
      "3795"
    ]
  },
  "6c1b": {
    "id": "6c1b",
    "label": "by emitting the last value in each time window",
    "options": [
      "f8ff",
      "7be5"
    ]
  },
  "7cf9": {
    "id": "7cf9",
    "label": "debounce"
  },
  "7fff": {
    "id": "7fff",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "7cf9"
    ]
  },
  "0bf8": {
    "id": "0bf8",
    "label": "debounceTime"
  },
  "5c55": {
    "id": "5c55",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "7fff",
      "5547"
    ]
  },
  "68b7": {
    "id": "68b7",
    "label": "that occur too frequently",
    "options": [
      "bb02",
      "6c1b",
      "5c55"
    ]
  },
  "f2e9": {
    "id": "f2e9",
    "label": "I want to ignore values",
    "options": [
      "938b",
      "9d32",
      "61b4",
      "b329",
      "ea1b",
      "68b7"
    ]
  },
  "05fb": {
    "id": "05fb",
    "label": "and only output the final computed value",
    "options": [
      "7166"
    ]
  },
  "7f2a": {
    "id": "7f2a",
    "label": "scan"
  },
  "5b4b": {
    "id": "5b4b",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "7f2a"
    ]
  },
  "6fdd": {
    "id": "6fdd",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "3004"
    ]
  },
  "83a0": {
    "id": "83a0",
    "label": "materialize"
  },
  "b537": {
    "id": "b537",
    "label": "timeInterval"
  },
  "0d2b": {
    "id": "0d2b",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "b537"
    ]
  },
  "ab0c": {
    "id": "ab0c",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "5240",
      "0d2b"
    ]
  },
  "d919": {
    "id": "d919",
    "label": "timeout"
  },
  "58c0": {
    "id": "58c0",
    "label": "I want to throw an error",
    "options": [
      "d919"
    ]
  },
  "35e3": {
    "id": "35e3",
    "label": "timeoutWith"
  },
  "b593": {
    "id": "b593",
    "label": "I want to switch to another Observable",
    "options": [
      "35e3"
    ]
  },
  "bef5": {
    "id": "bef5",
    "label": "after a period of inactivity",
    "options": [
      "58c0",
      "b593"
    ]
  },
  "d102": {
    "id": "d102",
    "label": "single"
  },
  "f809": {
    "id": "f809",
    "label": "I want to ensure there is only one value",
    "options": [
      "d102"
    ]
  },
  "821f": {
    "id": "821f",
    "label": "count"
  },
  "ce9c": {
    "id": "ce9c",
    "label": "I want to know how many values it emits",
    "options": [
      "821f"
    ]
  },
  "68dd": {
    "id": "68dd",
    "label": "startWith"
  },
  "f259": {
    "id": "f259",
    "label": "I want to prepend one value",
    "options": [
      "68dd"
    ]
  },
  "cdbd": {
    "id": "cdbd",
    "label": "based on a given amount of time",
    "options": [
      "2664"
    ]
  },
  "9ac7": {
    "id": "9ac7",
    "label": "delayWhen"
  },
  "c9cf": {
    "id": "c9cf",
    "label": "based on the emissions of another Observable",
    "options": [
      "9ac7"
    ]
  },
  "3b53": {
    "id": "3b53",
    "label": "I want to delay the emissions",
    "options": [
      "cdbd",
      "c9cf"
    ]
  },
  "3f4f": {
    "id": "3f4f",
    "label": "and convert to an array",
    "options": [
      "2423"
    ]
  },
  "63e7": {
    "id": "63e7",
    "label": "Observable",
    "method": "toPromise"
  },
  "c0c5": {
    "id": "c0c5",
    "label": "and convert to a Promise",
    "options": [
      "63e7"
    ]
  },
  "fba9": {
    "id": "fba9",
    "label": "until the Observable completes",
    "options": [
      "3f4f",
      "c0c5"
    ]
  },
  "0a20": {
    "id": "0a20",
    "label": "pairwise"
  },
  "0a0c": {
    "id": "0a0c",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "0a20"
    ]
  },
  "ebbe": {
    "id": "ebbe",
    "label": "partition"
  },
  "fa91": {
    "id": "fa91",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "ebbe"
    ]
  },
  "da1b": {
    "id": "da1b",
    "label": "bufferCount"
  },
  "4f26": {
    "id": "4f26",
    "label": "windowCount"
  },
  "d623": {
    "id": "d623",
    "label": "and emit the group as a nested Observable",
    "options": [
      "4f26"
    ]
  },
  "0c79": {
    "id": "0c79",
    "label": "in batches of a particular size",
    "options": [
      "3578",
      "d623"
    ]
  },
  "1fc1": {
    "id": "1fc1",
    "label": "bufferTime"
  },
  "e6d6": {
    "id": "e6d6",
    "label": "and emit the group as an array",
    "options": [
      "1fc1"
    ]
  },
  "b7d1": {
    "id": "b7d1",
    "label": "and emit the group as a nested Observable",
    "options": [
      "29c5"
    ]
  },
  "e3b0": {
    "id": "e3b0",
    "label": "based on time",
    "options": [
      "e6d6",
      "b7d1"
    ]
  },
  "0853": {
    "id": "0853",
    "label": "buffer"
  },
  "bcae": {
    "id": "bcae",
    "label": "and emit the group as an array",
    "options": [
      "0853"
    ]
  },
  "e865": {
    "id": "e865",
    "label": "window"
  },
  "3dc6": {
    "id": "3dc6",
    "label": "and emit the group as a nested Observable",
    "options": [
      "e865"
    ]
  },
  "06f6": {
    "id": "06f6",
    "label": "until another Observable emits",
    "options": [
      "bcae",
      "3dc6"
    ]
  },
  "b48b": {
    "id": "b48b",
    "label": "bufferWhen"
  },
  "e2b1": {
    "id": "e2b1",
    "label": "and emit the group as an array",
    "options": [
      "b48b"
    ]
  },
  "8c12": {
    "id": "8c12",
    "label": "windowWhen"
  },
  "e0bd": {
    "id": "e0bd",
    "label": "and emit the group as a nested Observable",
    "options": [
      "8c12"
    ]
  },
  "3a76": {
    "id": "3a76",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "e2b1",
      "e0bd"
    ]
  },
  "8edb": {
    "id": "8edb",
    "label": "windowToggle"
  },
  "4e38": {
    "id": "4e38",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "7084",
      "2661"
    ]
  },
  "909e": {
    "id": "909e",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "3849"
    ]
  },
  "48c1": {
    "id": "48c1",
    "label": "I want to group the values",
    "options": [
      "fba9",
      "0a0c",
      "fa91",
      "0c79",
      "e3b0",
      "06f6",
      "3a76",
      "4e38",
      "909e"
    ]
  },
  "158f": {
    "id": "158f",
    "label": "mergeMapTo"
  },
  "19ef": {
    "id": "19ef",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "158f"
    ]
  },
  "2b2f": {
    "id": "2b2f",
    "label": "mergeMap"
  },
  "6f24": {
    "id": "6f24",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "2b2f"
    ]
  },
  "a51d": {
    "id": "a51d",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "19ef",
      "6f24"
    ]
  },
  "5c36": {
    "id": "5c36",
    "label": "concatMapTo"
  },
  "995d": {
    "id": "995d",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "5c36"
    ]
  },
  "6b2e": {
    "id": "6b2e",
    "label": "concatMap"
  },
  "c723": {
    "id": "c723",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "6b2e"
    ]
  },
  "1cd4": {
    "id": "1cd4",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "995d",
      "c723"
    ]
  },
  "8afe": {
    "id": "8afe",
    "label": "switchMapTo"
  },
  "f05a": {
    "id": "f05a",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "8afe"
    ]
  },
  "78da": {
    "id": "78da",
    "label": "switchMap"
  },
  "e9f6": {
    "id": "e9f6",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "78da"
    ]
  },
  "2a43": {
    "id": "2a43",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "f05a",
      "e9f6"
    ]
  },
  "ea12": {
    "id": "ea12",
    "label": "exhaustMap"
  },
  "658b": {
    "id": "658b",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "ea12"
    ]
  },
  "721f": {
    "id": "721f",
    "label": "expand"
  },
  "d659": {
    "id": "d659",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "721f"
    ]
  },
  "e749": {
    "id": "e749",
    "label": "I want to start a new Observable for each value",
    "options": [
      "a51d",
      "1cd4",
      "2a43",
      "658b",
      "d659"
    ]
  },
  "ee64": {
    "id": "ee64",
    "label": "pipe"
  },
  "d2d4": {
    "id": "d2d4",
    "label": "I want to perform custom operations",
    "options": [
      "ee64"
    ]
  },
  "e31a": {
    "id": "e31a",
    "label": "share"
  },
  "7d4c": {
    "id": "7d4c",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "e31a"
    ]
  },
  "ae14": {
    "id": "ae14",
    "label": "publish"
  },
  "f641": {
    "id": "f641",
    "label": "using a conventional Subject",
    "options": [
      "7d4c",
      "1579"
    ]
  },
  "0093": {
    "id": "0093",
    "label": "publishBehavior"
  },
  "d272": {
    "id": "d272",
    "label": "using a BehaviorSubject",
    "options": [
      "0093"
    ]
  },
  "df01": {
    "id": "df01",
    "label": "publishReplay"
  },
  "7c95": {
    "id": "7c95",
    "label": "using a ReplaySubject",
    "options": [
      "df01"
    ]
  },
  "7f93": {
    "id": "7f93",
    "label": "publishLast"
  },
  "e7aa": {
    "id": "e7aa",
    "label": "using an AsyncSubject",
    "options": [
      "7f93"
    ]
  },
  "7b79": {
    "id": "7b79",
    "label": "multicast"
  },
  "ade3": {
    "id": "ade3",
    "label": "using a specific subject implementation",
    "options": [
      "7b79"
    ]
  },
  "d773": {
    "id": "d773",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "f641",
      "d272",
      "7c95",
      "e7aa",
      "ade3"
    ]
  },
  "d879": {
    "id": "d879",
    "label": "I want to start a new Observable",
    "options": [
      "7384"
    ]
  },
  "0694": {
    "id": "0694",
    "label": "retry"
  },
  "e961": {
    "id": "e961",
    "label": "immediately",
    "options": [
      "0694"
    ]
  },
  "989d": {
    "id": "989d",
    "label": "retryWhen"
  },
  "0040": {
    "id": "0040",
    "label": "when another Observable emits",
    "options": [
      "989d"
    ]
  },
  "f999": {
    "id": "f999",
    "label": "I want to re-subscribe",
    "options": [
      "e961",
      "0040"
    ]
  },
  "5e43": {
    "id": "5e43",
    "label": "when an error occurs",
    "options": [
      "d879",
      "f999"
    ]
  },
  "e9f9": {
    "id": "e9f9",
    "label": "repeat"
  },
  "3dfe": {
    "id": "3dfe",
    "label": "immediately",
    "options": [
      "e9f9"
    ]
  },
  "bdef": {
    "id": "bdef",
    "label": "when another Observable emits",
    "options": [
      "6063"
    ]
  },
  "664d": {
    "id": "664d",
    "label": "I want to re-subscribe",
    "options": [
      "3dfe",
      "bdef"
    ]
  },
  "f689": {
    "id": "f689",
    "label": "concat"
  },
  "7a35": {
    "id": "7a35",
    "label": "I want to start a new Observable",
    "options": [
      "f689"
    ]
  },
  "1d92": {
    "id": "1d92",
    "label": "when it completes",
    "options": [
      "664d",
      "7a35"
    ]
  },
  "b490": {
    "id": "b490",
    "label": "finalize"
  },
  "0399": {
    "id": "0399",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "b490"
    ]
  },
  "6fbe": {
    "id": "6fbe",
    "label": "subscribeOn"
  },
  "2c37": {
    "id": "2c37",
    "label": "that routes calls to subscribe",
    "options": [
      "6fbe"
    ]
  },
  "fed0": {
    "id": "fed0",
    "label": "observeOn"
  },
  "22a3": {
    "id": "22a3",
    "label": "that routes values to observers",
    "options": [
      "fed0"
    ]
  },
  "650a": {
    "id": "650a",
    "label": "I want to change the scheduler",
    "options": [
      "2c37",
      "22a3"
    ]
  },
  "56d1": {
    "id": "56d1",
    "label": "race"
  },
  "26a5": {
    "id": "26a5",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "56d1"
    ]
  },
  "9cb2": {
    "id": "9cb2",
    "label": "merge"
  },
  "b9bc": {
    "id": "b9bc",
    "label": "I want to output the values from either of them",
    "options": [
      "9cb2"
    ]
  },
  "6e52": {
    "id": "6e52",
    "label": "combineLatest"
  },
  "30d5": {
    "id": "30d5",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "6e52"
    ]
  },
  "b809": {
    "id": "b809",
    "label": "withLatestFrom"
  },
  "317a": {
    "id": "317a",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "b809"
    ]
  },
  "3f00": {
    "id": "3f00",
    "label": "zip"
  },
  "2fab": {
    "id": "2fab",
    "label": "using each source value only once",
    "options": [
      "3f00"
    ]
  },
  "ac0d": {
    "id": "ac0d",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "30d5",
      "317a",
      "2fab"
    ]
  },
  "a975": {
    "id": "a975",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "26a5",
      "b9bc",
      "ac0d"
    ]
  },
  "7de2": {
    "id": "7de2",
    "label": "I have one existing Observable, and",
    "options": [
      "1de0",
      "0c56",
      "153a",
      "2eef",
      "f2e9",
      "5808",
      "ab0c",
      "bef5",
      "f809",
      "ce9c",
      "f259",
      "3b53",
      "48c1",
      "e749",
      "d2d4",
      "d773",
      "5e43",
      "1d92",
      "0399",
      "650a",
      "a975"
    ]
  },
  "1c6d": {
    "id": "1c6d",
    "label": "race"
  },
  "1c2f": {
    "id": "1c2f",
    "label": "forkJoin"
  },
  "781e": {
    "id": "781e",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "1c2f"
    ]
  },
  "0406": {
    "id": "0406",
    "label": "merge"
  },
  "e53a": {
    "id": "e53a",
    "label": "I want to output the values from either of them",
    "options": [
      "0406"
    ]
  },
  "ce4d": {
    "id": "ce4d",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "8335"
    ]
  },
  "f4d3": {
    "id": "f4d3",
    "label": "zip"
  },
  "6a1b": {
    "id": "6a1b",
    "label": "using each source value only once",
    "options": [
      "f4d3"
    ]
  },
  "40b6": {
    "id": "40b6",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "ce4d",
      "6a1b"
    ]
  },
  "4b81": {
    "id": "4b81",
    "label": "concat"
  },
  "abfe": {
    "id": "abfe",
    "label": "I want to subscribe to each in order",
    "options": [
      "4b81"
    ]
  },
  "de61": {
    "id": "de61",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "6379",
      "781e",
      "e53a",
      "40b6",
      "abfe"
    ]
  },
  "ea80": {
    "id": "ea80",
    "label": "Observable",
    "method": "create"
  },
  "ae4c": {
    "id": "ae4c",
    "label": "using custom logic",
    "options": [
      "ea80"
    ]
  },
  "92c7": {
    "id": "92c7",
    "label": "generate"
  },
  "fbcd": {
    "id": "fbcd",
    "label": "using a state machine similar to a for loop",
    "options": [
      "92c7"
    ]
  },
  "c1a5": {
    "id": "c1a5",
    "label": "throwError"
  },
  "4e34": {
    "id": "4e34",
    "label": "that throws an error",
    "options": [
      "c1a5"
    ]
  },
  "09bf": {
    "id": "09bf",
    "label": "NEVER"
  },
  "e0b2": {
    "id": "e0b2",
    "label": "fromEvent"
  },
  "90bf": {
    "id": "90bf",
    "label": "fromEventPattern"
  },
  "4c6d": {
    "id": "4c6d",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "90bf"
    ]
  },
  "b23b": {
    "id": "b23b",
    "label": "from"
  },
  "76d1": {
    "id": "76d1",
    "label": "from a Promise or an event source",
    "options": [
      "b23b"
    ]
  },
  "e4af": {
    "id": "e4af",
    "label": "from"
  },
  "1efe": {
    "id": "1efe",
    "label": "over the values in an array",
    "options": [
      "e4af"
    ]
  },
  "6f51": {
    "id": "6f51",
    "label": "range"
  },
  "b9c7": {
    "id": "b9c7",
    "label": "over values in a numeric range",
    "options": [
      "6f51"
    ]
  },
  "e7b0": {
    "id": "e7b0",
    "label": "of"
  },
  "5e8d": {
    "id": "5e8d",
    "label": "over prefined values given as arguments",
    "options": [
      "e7b0"
    ]
  },
  "f7d3": {
    "id": "f7d3",
    "label": "that iterates",
    "options": [
      "1efe",
      "b9c7",
      "5e8d"
    ]
  },
  "f596": {
    "id": "f596",
    "label": "interval"
  },
  "eb1e": {
    "id": "eb1e",
    "label": "regularly",
    "options": [
      "f596"
    ]
  },
  "8a2d": {
    "id": "8a2d",
    "label": "timer"
  },
  "fb0b": {
    "id": "fb0b",
    "label": "with an optional initial delay",
    "options": [
      "8a2d"
    ]
  },
  "72f6": {
    "id": "72f6",
    "label": "that emits values on a timer",
    "options": [
      "eb1e",
      "fb0b"
    ]
  },
  "bc57": {
    "id": "bc57",
    "label": "defer"
  },
  "c130": {
    "id": "c130",
    "label": "which is built on demand when subscribed",
    "options": [
      "bc57"
    ]
  },
  "67fa": {
    "id": "67fa",
    "label": "bindCallback"
  },
  "965d": {
    "id": "965d",
    "label": "supporting a conventional callback API",
    "options": [
      "67fa"
    ]
  },
  "e280": {
    "id": "e280",
    "label": "supporting Node.js callback style API",
    "options": [
      "4571"
    ]
  },
  "ec3b": {
    "id": "ec3b",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "965d",
      "e280"
    ]
  },
  "66be": {
    "id": "66be",
    "label": "I have no Observables yet, and",
    "options": [
      "9694",
      "ec3b"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "7de2",
      "de61",
      "66be"
    ]
  }
}