{
  "1014": {
    "id": "1014",
    "label": "combineLatest"
  },
  "1134": {
    "id": "1134",
    "label": "I want to ignore values",
    "options": [
      "3178",
      "80bb",
      "2383",
      "7954",
      "2b57",
      "be95"
    ]
  },
  "1933": {
    "id": "1933",
    "label": "I want to switch to another Observable",
    "options": [
      "16eb"
    ]
  },
  "2015": {
    "id": "2015",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "6df8"
    ]
  },
  "2259": {
    "id": "2259",
    "label": "based on time",
    "options": [
      "54ae",
      "82e6"
    ]
  },
  "2383": {
    "id": "2383",
    "label": "from the end of the Observable",
    "options": [
      "69bd"
    ]
  },
  "2479": {
    "id": "2479",
    "label": "bufferToggle"
  },
  "2567": {
    "id": "2567",
    "label": "and convert to an array",
    "options": [
      "9284"
    ]
  },
  "2686": {
    "id": "2686",
    "label": "and emit the group as a nested Observable",
    "options": [
      "ff33"
    ]
  },
  "2720": {
    "id": "2720",
    "label": "concatMapTo"
  },
  "3037": {
    "id": "3037",
    "label": "distinctUntilChanged"
  },
  "3178": {
    "id": "3178",
    "label": "altogether",
    "options": [
      "7cd2"
    ]
  },
  "3282": {
    "id": "3282",
    "label": "defer"
  },
  "3530": {
    "id": "3530",
    "label": "using a BehaviorSubject",
    "options": [
      "6b7d"
    ]
  },
  "3707": {
    "id": "3707",
    "label": "groupBy"
  },
  "4288": {
    "id": "4288",
    "label": "that just completes, without emitting values",
    "options": [
      "d403"
    ]
  },
  "4449": {
    "id": "4449",
    "label": "when it completes",
    "options": [
      "f748",
      "c5b2"
    ]
  },
  "4615": {
    "id": "4615",
    "label": "until the Observable completes",
    "options": [
      "2567",
      "797e"
    ]
  },
  "5691": {
    "id": "5691",
    "label": "using a specific subject implementation",
    "options": [
      "976c"
    ]
  },
  "5893": {
    "id": "5893",
    "label": "I want to group the values",
    "options": [
      "4615",
      "c98c",
      "c8ec",
      "c36b",
      "2259",
      "dc9f",
      "c7ed",
      "b2b3",
      "0fcb"
    ]
  },
  "6163": {
    "id": "6163",
    "label": "that routes calls to subscribe",
    "options": [
      "358f"
    ]
  },
  "6522": {
    "id": "6522",
    "label": "based on a given amount",
    "options": [
      "4bbf"
    ]
  },
  "6824": {
    "id": "6824",
    "label": "debounce"
  },
  "6968": {
    "id": "6968",
    "label": "after a period of inactivity",
    "options": [
      "fb2f",
      "1933"
    ]
  },
  "7431": {
    "id": "7431",
    "label": "publishLast"
  },
  "7526": {
    "id": "7526",
    "label": "I want to re-subscribe",
    "options": [
      "c6d1",
      "fec2"
    ]
  },
  "7747": {
    "id": "7747",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "1a1c"
    ]
  },
  "7875": {
    "id": "7875",
    "label": "using a ReplaySubject",
    "options": [
      "d3f9"
    ]
  },
  "7954": {
    "id": "7954",
    "label": "until another Observable emits a value",
    "options": [
      "5bb5"
    ]
  },
  "7989": {
    "id": "7989",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "66ef"
    ]
  },
  "8647": {
    "id": "8647",
    "label": "count"
  },
  "8870": {
    "id": "8870",
    "label": "reduce"
  },
  "9284": {
    "id": "9284",
    "label": "toArray"
  },
  "9477": {
    "id": "9477",
    "label": "buffer"
  },
  "c375": {
    "id": "c375",
    "label": "mapTo"
  },
  "3c89": {
    "id": "3c89",
    "label": "to be a constant value",
    "options": [
      "c375"
    ]
  },
  "c983": {
    "id": "c983",
    "label": "map"
  },
  "fca4": {
    "id": "fca4",
    "label": "to be a value calculated through a formula",
    "options": [
      "c983"
    ]
  },
  "0c5e": {
    "id": "0c5e",
    "label": "I want to change each emitted value",
    "options": [
      "3c89",
      "fca4"
    ]
  },
  "e28b": {
    "id": "e28b",
    "label": "pluck"
  },
  "0372": {
    "id": "0372",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "e28b"
    ]
  },
  "ee26": {
    "id": "ee26",
    "label": "tap"
  },
  "3a39": {
    "id": "3a39",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "ee26"
    ]
  },
  "93f7": {
    "id": "93f7",
    "label": "filter"
  },
  "1bc6": {
    "id": "1bc6",
    "label": "based on custom logic",
    "options": [
      "93f7"
    ]
  },
  "cea7": {
    "id": "cea7",
    "label": "first"
  },
  "fce1": {
    "id": "fce1",
    "label": "and only the first value",
    "options": [
      "cea7"
    ]
  },
  "a644": {
    "id": "a644",
    "label": "take"
  },
  "476c": {
    "id": "476c",
    "label": "based on a given amount",
    "options": [
      "a644"
    ]
  },
  "754e": {
    "id": "754e",
    "label": "takeWhile"
  },
  "eddd": {
    "id": "eddd",
    "label": "based on custom logic",
    "options": [
      "754e"
    ]
  },
  "8f5b": {
    "id": "8f5b",
    "label": "if they are at the start of the Observable",
    "options": [
      "fce1",
      "476c",
      "eddd"
    ]
  },
  "30ac": {
    "id": "30ac",
    "label": "elementAt"
  },
  "b636": {
    "id": "b636",
    "label": "if they are exactly the n-th emission",
    "options": [
      "30ac"
    ]
  },
  "34dc": {
    "id": "34dc",
    "label": "last"
  },
  "a234": {
    "id": "a234",
    "label": "and only the last value",
    "options": [
      "34dc"
    ]
  },
  "4bbf": {
    "id": "4bbf",
    "label": "takeLast"
  },
  "e9d4": {
    "id": "e9d4",
    "label": "if they are at the end of the Observable",
    "options": [
      "a234",
      "6522"
    ]
  },
  "fe27": {
    "id": "fe27",
    "label": "takeUntil"
  },
  "8cd9": {
    "id": "8cd9",
    "label": "until another Observable emits a value",
    "options": [
      "fe27"
    ]
  },
  "73ef": {
    "id": "73ef",
    "label": "I want to allow some values to pass",
    "options": [
      "1bc6",
      "8f5b",
      "b636",
      "e9d4",
      "8cd9"
    ]
  },
  "7cd2": {
    "id": "7cd2",
    "label": "ignoreElements"
  },
  "0dab": {
    "id": "0dab",
    "label": "skip"
  },
  "ab21": {
    "id": "ab21",
    "label": "based on a given amount",
    "options": [
      "0dab"
    ]
  },
  "6a17": {
    "id": "6a17",
    "label": "skipWhile"
  },
  "d57c": {
    "id": "d57c",
    "label": "based on custom logic",
    "options": [
      "6a17"
    ]
  },
  "80bb": {
    "id": "80bb",
    "label": "from the start of the Observable",
    "options": [
      "ab21",
      "d57c"
    ]
  },
  "69bd": {
    "id": "69bd",
    "label": "skipLast"
  },
  "5bb5": {
    "id": "5bb5",
    "label": "skipUntil"
  },
  "644d": {
    "id": "644d",
    "label": "emitted just before the current value",
    "options": [
      "3037"
    ]
  },
  "f971": {
    "id": "f971",
    "label": "distinct"
  },
  "346f": {
    "id": "346f",
    "label": "emitted some time in the past",
    "options": [
      "f971"
    ]
  },
  "31b1": {
    "id": "31b1",
    "label": "according to value equality",
    "options": [
      "644d",
      "346f"
    ]
  },
  "9b7c": {
    "id": "9b7c",
    "label": "distinctUntilKeyChanged"
  },
  "d579": {
    "id": "d579",
    "label": "emitted just before the current value",
    "options": [
      "9b7c"
    ]
  },
  "0ca9": {
    "id": "0ca9",
    "label": "according to a key or object property",
    "options": [
      "d579"
    ]
  },
  "2b57": {
    "id": "2b57",
    "label": "that match some previous value",
    "options": [
      "31b1",
      "0ca9"
    ]
  },
  "fcf4": {
    "id": "fcf4",
    "label": "throttle"
  },
  "a2ba": {
    "id": "a2ba",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "fcf4"
    ]
  },
  "133a": {
    "id": "133a",
    "label": "throttleTime"
  },
  "6a4b": {
    "id": "6a4b",
    "label": "where time windows are determined by a time duration",
    "options": [
      "133a"
    ]
  },
  "b389": {
    "id": "b389",
    "label": "by emitting the first value in each time window",
    "options": [
      "a2ba",
      "6a4b"
    ]
  },
  "6bcf": {
    "id": "6bcf",
    "label": "audit"
  },
  "a404": {
    "id": "a404",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "6bcf"
    ]
  },
  "f269": {
    "id": "f269",
    "label": "auditTime"
  },
  "1d3d": {
    "id": "1d3d",
    "label": "where time windows are determined by a time duration",
    "options": [
      "f269"
    ]
  },
  "ec36": {
    "id": "ec36",
    "label": "by emitting the last value in each time window",
    "options": [
      "a404",
      "1d3d"
    ]
  },
  "f667": {
    "id": "f667",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "6824"
    ]
  },
  "153f": {
    "id": "153f",
    "label": "debounceTime"
  },
  "c9a6": {
    "id": "c9a6",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "153f"
    ]
  },
  "9acf": {
    "id": "9acf",
    "label": "by emitting the last value as soon as enough silence has occured",
    "options": [
      "f667",
      "c9a6"
    ]
  },
  "be95": {
    "id": "be95",
    "label": "that occur too frequently",
    "options": [
      "b389",
      "ec36",
      "9acf"
    ]
  },
  "9f11": {
    "id": "9f11",
    "label": "and only output the final computed value",
    "options": [
      "8870"
    ]
  },
  "09bc": {
    "id": "09bc",
    "label": "scan"
  },
  "fabc": {
    "id": "fabc",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "09bc"
    ]
  },
  "ce84": {
    "id": "ce84",
    "label": "mergeScan"
  },
  "fea0": {
    "id": "fea0",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "ce84"
    ]
  },
  "e756": {
    "id": "e756",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "9f11",
      "fabc",
      "fea0"
    ]
  },
  "aea6": {
    "id": "aea6",
    "label": "materialize"
  },
  "cd4d": {
    "id": "cd4d",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "aea6"
    ]
  },
  "66ef": {
    "id": "66ef",
    "label": "timeInterval"
  },
  "07fd": {
    "id": "07fd",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "cd4d",
      "7989"
    ]
  },
  "33d6": {
    "id": "33d6",
    "label": "timeout"
  },
  "fb2f": {
    "id": "fb2f",
    "label": "I want to throw an error",
    "options": [
      "33d6"
    ]
  },
  "16eb": {
    "id": "16eb",
    "label": "timeoutWith"
  },
  "b9a9": {
    "id": "b9a9",
    "label": "single"
  },
  "368f": {
    "id": "368f",
    "label": "I want to ensure there is only one value",
    "options": [
      "b9a9"
    ]
  },
  "a294": {
    "id": "a294",
    "label": "I want to know how many values it emits",
    "options": [
      "8647"
    ]
  },
  "994e": {
    "id": "994e",
    "label": "startWith"
  },
  "a6db": {
    "id": "a6db",
    "label": "I want to prepend one value",
    "options": [
      "994e"
    ]
  },
  "896b": {
    "id": "896b",
    "label": "delay"
  },
  "cb11": {
    "id": "cb11",
    "label": "based on a given amount of time",
    "options": [
      "896b"
    ]
  },
  "338a": {
    "id": "338a",
    "label": "delayWhen"
  },
  "fb64": {
    "id": "fb64",
    "label": "based on the emissions of another Observable",
    "options": [
      "338a"
    ]
  },
  "3e47": {
    "id": "3e47",
    "label": "I want to delay the emissions",
    "options": [
      "cb11",
      "fb64"
    ]
  },
  "fe66": {
    "id": "fe66",
    "label": "Observable",
    "method": "toPromise"
  },
  "797e": {
    "id": "797e",
    "label": "and convert to a Promise",
    "options": [
      "fe66"
    ]
  },
  "0cc3": {
    "id": "0cc3",
    "label": "pairwise"
  },
  "c98c": {
    "id": "c98c",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "0cc3"
    ]
  },
  "a124": {
    "id": "a124",
    "label": "partition"
  },
  "c8ec": {
    "id": "c8ec",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "a124"
    ]
  },
  "e36f": {
    "id": "e36f",
    "label": "bufferCount"
  },
  "4fbe": {
    "id": "4fbe",
    "label": "and emit the group as an array",
    "options": [
      "e36f"
    ]
  },
  "ff10": {
    "id": "ff10",
    "label": "windowCount"
  },
  "514e": {
    "id": "514e",
    "label": "and emit the group as a nested Observable",
    "options": [
      "ff10"
    ]
  },
  "c36b": {
    "id": "c36b",
    "label": "in batches of a particular size",
    "options": [
      "4fbe",
      "514e"
    ]
  },
  "3ff0": {
    "id": "3ff0",
    "label": "bufferTime"
  },
  "54ae": {
    "id": "54ae",
    "label": "and emit the group as an array",
    "options": [
      "3ff0"
    ]
  },
  "0c55": {
    "id": "0c55",
    "label": "windowTime"
  },
  "82e6": {
    "id": "82e6",
    "label": "and emit the group as a nested Observable",
    "options": [
      "0c55"
    ]
  },
  "38b2": {
    "id": "38b2",
    "label": "and emit the group as an array",
    "options": [
      "9477"
    ]
  },
  "1ab7": {
    "id": "1ab7",
    "label": "window"
  },
  "a90d": {
    "id": "a90d",
    "label": "and emit the group as a nested Observable",
    "options": [
      "1ab7"
    ]
  },
  "dc9f": {
    "id": "dc9f",
    "label": "until another Observable emits",
    "options": [
      "38b2",
      "a90d"
    ]
  },
  "845e": {
    "id": "845e",
    "label": "bufferWhen"
  },
  "9ac1": {
    "id": "9ac1",
    "label": "and emit the group as an array",
    "options": [
      "845e"
    ]
  },
  "b988": {
    "id": "b988",
    "label": "windowWhen"
  },
  "0a87": {
    "id": "0a87",
    "label": "and emit the group as a nested Observable",
    "options": [
      "b988"
    ]
  },
  "c7ed": {
    "id": "c7ed",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "9ac1",
      "0a87"
    ]
  },
  "ac01": {
    "id": "ac01",
    "label": "and emit the group as an array",
    "options": [
      "2479"
    ]
  },
  "ff33": {
    "id": "ff33",
    "label": "windowToggle"
  },
  "b2b3": {
    "id": "b2b3",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "ac01",
      "2686"
    ]
  },
  "0fcb": {
    "id": "0fcb",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "3707"
    ]
  },
  "10dd": {
    "id": "10dd",
    "label": "mergeMapTo"
  },
  "490b": {
    "id": "490b",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "10dd"
    ]
  },
  "40ef": {
    "id": "40ef",
    "label": "mergeMap"
  },
  "18d8": {
    "id": "18d8",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "40ef"
    ]
  },
  "706c": {
    "id": "706c",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "490b",
      "18d8"
    ]
  },
  "d3be": {
    "id": "d3be",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "2720"
    ]
  },
  "7e58": {
    "id": "7e58",
    "label": "concatMap"
  },
  "ea51": {
    "id": "ea51",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "7e58"
    ]
  },
  "0f7b": {
    "id": "0f7b",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "d3be",
      "ea51"
    ]
  },
  "6a00": {
    "id": "6a00",
    "label": "switchMapTo"
  },
  "ab7d": {
    "id": "ab7d",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "6a00"
    ]
  },
  "b22b": {
    "id": "b22b",
    "label": "switchMap"
  },
  "b6a2": {
    "id": "b6a2",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "b22b"
    ]
  },
  "8a4e": {
    "id": "8a4e",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "ab7d",
      "b6a2"
    ]
  },
  "6df8": {
    "id": "6df8",
    "label": "exhaustMap"
  },
  "a325": {
    "id": "a325",
    "label": "expand"
  },
  "4aff": {
    "id": "4aff",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "a325"
    ]
  },
  "b48c": {
    "id": "b48c",
    "label": "I want to start a new Observable for each value",
    "options": [
      "706c",
      "0f7b",
      "8a4e",
      "2015",
      "4aff"
    ]
  },
  "0317": {
    "id": "0317",
    "label": "pipe"
  },
  "8b66": {
    "id": "8b66",
    "label": "I want to perform custom operations",
    "options": [
      "0317"
    ]
  },
  "f62a": {
    "id": "f62a",
    "label": "share"
  },
  "440d": {
    "id": "440d",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "f62a"
    ]
  },
  "3ce0": {
    "id": "3ce0",
    "label": "publish"
  },
  "cb3c": {
    "id": "cb3c",
    "label": "and start it manually or imperatively",
    "options": [
      "3ce0"
    ]
  },
  "a6fa": {
    "id": "a6fa",
    "label": "using a conventional Subject",
    "options": [
      "440d",
      "cb3c"
    ]
  },
  "6b7d": {
    "id": "6b7d",
    "label": "publishBehavior"
  },
  "d3f9": {
    "id": "d3f9",
    "label": "publishReplay"
  },
  "57ad": {
    "id": "57ad",
    "label": "using an AsyncSubject",
    "options": [
      "7431"
    ]
  },
  "976c": {
    "id": "976c",
    "label": "multicast"
  },
  "4ccf": {
    "id": "4ccf",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "a6fa",
      "3530",
      "7875",
      "57ad",
      "5691"
    ]
  },
  "b4de": {
    "id": "b4de",
    "label": "catchError"
  },
  "f2e8": {
    "id": "f2e8",
    "label": "I want to start a new Observable",
    "options": [
      "b4de"
    ]
  },
  "ee33": {
    "id": "ee33",
    "label": "retry"
  },
  "c6d1": {
    "id": "c6d1",
    "label": "immediately",
    "options": [
      "ee33"
    ]
  },
  "9fa0": {
    "id": "9fa0",
    "label": "retryWhen"
  },
  "fec2": {
    "id": "fec2",
    "label": "when another Observable emits",
    "options": [
      "9fa0"
    ]
  },
  "623c": {
    "id": "623c",
    "label": "when an error occurs",
    "options": [
      "f2e8",
      "7526"
    ]
  },
  "83f0": {
    "id": "83f0",
    "label": "repeat"
  },
  "8f6b": {
    "id": "8f6b",
    "label": "immediately",
    "options": [
      "83f0"
    ]
  },
  "fa21": {
    "id": "fa21",
    "label": "repeatWhen"
  },
  "07e0": {
    "id": "07e0",
    "label": "when another Observable emits",
    "options": [
      "fa21"
    ]
  },
  "f748": {
    "id": "f748",
    "label": "I want to re-subscribe",
    "options": [
      "8f6b",
      "07e0"
    ]
  },
  "f29b": {
    "id": "f29b",
    "label": "concat"
  },
  "c5b2": {
    "id": "c5b2",
    "label": "I want to start a new Observable",
    "options": [
      "f29b"
    ]
  },
  "246c": {
    "id": "246c",
    "label": "finalize"
  },
  "6bc9": {
    "id": "6bc9",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "246c"
    ]
  },
  "358f": {
    "id": "358f",
    "label": "subscribeOn"
  },
  "8d7f": {
    "id": "8d7f",
    "label": "observeOn"
  },
  "bf38": {
    "id": "bf38",
    "label": "that routes values to observers",
    "options": [
      "8d7f"
    ]
  },
  "f83e": {
    "id": "f83e",
    "label": "I want to change the scheduler",
    "options": [
      "6163",
      "bf38"
    ]
  },
  "1a1c": {
    "id": "1a1c",
    "label": "race"
  },
  "23d6": {
    "id": "23d6",
    "label": "merge"
  },
  "cf2d": {
    "id": "cf2d",
    "label": "I want to output the values from either of them",
    "options": [
      "23d6"
    ]
  },
  "aa44": {
    "id": "aa44",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "1014"
    ]
  },
  "3c5c": {
    "id": "3c5c",
    "label": "withLatestFrom"
  },
  "167b": {
    "id": "167b",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "3c5c"
    ]
  },
  "56b3": {
    "id": "56b3",
    "label": "zip"
  },
  "518c": {
    "id": "518c",
    "label": "using each source value only once",
    "options": [
      "56b3"
    ]
  },
  "602d": {
    "id": "602d",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "aa44",
      "167b",
      "518c"
    ]
  },
  "62a2": {
    "id": "62a2",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "7747",
      "cf2d",
      "602d"
    ]
  },
  "b960": {
    "id": "b960",
    "label": "I have one existing Observable, and",
    "options": [
      "0c5e",
      "0372",
      "3a39",
      "73ef",
      "1134",
      "e756",
      "07fd",
      "6968",
      "368f",
      "a294",
      "a6db",
      "3e47",
      "5893",
      "b48c",
      "8b66",
      "4ccf",
      "623c",
      "4449",
      "6bc9",
      "f83e",
      "62a2"
    ]
  },
  "225f": {
    "id": "225f",
    "label": "race"
  },
  "ff36": {
    "id": "ff36",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "225f"
    ]
  },
  "bc9b": {
    "id": "bc9b",
    "label": "forkJoin"
  },
  "96d0": {
    "id": "96d0",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "bc9b"
    ]
  },
  "07a8": {
    "id": "07a8",
    "label": "merge"
  },
  "d26f": {
    "id": "d26f",
    "label": "I want to output the values from either of them",
    "options": [
      "07a8"
    ]
  },
  "8f53": {
    "id": "8f53",
    "label": "combineLatest"
  },
  "28d2": {
    "id": "28d2",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "8f53"
    ]
  },
  "0009": {
    "id": "0009",
    "label": "zip"
  },
  "5d5c": {
    "id": "5d5c",
    "label": "using each source value only once",
    "options": [
      "0009"
    ]
  },
  "c5bd": {
    "id": "c5bd",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "28d2",
      "5d5c"
    ]
  },
  "50fd": {
    "id": "50fd",
    "label": "concat"
  },
  "5ff8": {
    "id": "5ff8",
    "label": "I want to subscribe to each in order",
    "options": [
      "50fd"
    ]
  },
  "e345": {
    "id": "e345",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "ff36",
      "96d0",
      "d26f",
      "c5bd",
      "5ff8"
    ]
  },
  "46bb": {
    "id": "46bb",
    "label": "Observable",
    "method": "create"
  },
  "506f": {
    "id": "506f",
    "label": "using custom logic",
    "options": [
      "46bb"
    ]
  },
  "d875": {
    "id": "d875",
    "label": "generate"
  },
  "31f2": {
    "id": "31f2",
    "label": "using a state machine similar to a for loop",
    "options": [
      "d875"
    ]
  },
  "23e1": {
    "id": "23e1",
    "label": "throwError"
  },
  "02b4": {
    "id": "02b4",
    "label": "that throws an error",
    "options": [
      "23e1"
    ]
  },
  "d403": {
    "id": "d403",
    "label": "EMPTY"
  },
  "1f27": {
    "id": "1f27",
    "label": "NEVER"
  },
  "0bca": {
    "id": "0bca",
    "label": "that never emits anything",
    "options": [
      "1f27"
    ]
  },
  "8bf4": {
    "id": "8bf4",
    "label": "fromEvent"
  },
  "f8e7": {
    "id": "f8e7",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "8bf4"
    ]
  },
  "1ecf": {
    "id": "1ecf",
    "label": "fromEventPattern"
  },
  "f1cf": {
    "id": "f1cf",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "1ecf"
    ]
  },
  "bff7": {
    "id": "bff7",
    "label": "from an existing source of events",
    "options": [
      "f8e7",
      "f1cf"
    ]
  },
  "88e7": {
    "id": "88e7",
    "label": "from"
  },
  "a4e5": {
    "id": "a4e5",
    "label": "from a Promise or an event source",
    "options": [
      "88e7"
    ]
  },
  "f34b": {
    "id": "f34b",
    "label": "from"
  },
  "872d": {
    "id": "872d",
    "label": "over the values in an array",
    "options": [
      "f34b"
    ]
  },
  "391e": {
    "id": "391e",
    "label": "range"
  },
  "1a97": {
    "id": "1a97",
    "label": "over values in a numeric range",
    "options": [
      "391e"
    ]
  },
  "0049": {
    "id": "0049",
    "label": "of"
  },
  "7ca9": {
    "id": "7ca9",
    "label": "over prefined values given as arguments",
    "options": [
      "0049"
    ]
  },
  "8c8c": {
    "id": "8c8c",
    "label": "that iterates",
    "options": [
      "872d",
      "1a97",
      "7ca9"
    ]
  },
  "9e8c": {
    "id": "9e8c",
    "label": "interval"
  },
  "582f": {
    "id": "582f",
    "label": "regularly",
    "options": [
      "9e8c"
    ]
  },
  "3aa7": {
    "id": "3aa7",
    "label": "timer"
  },
  "365d": {
    "id": "365d",
    "label": "with an optional initial delay",
    "options": [
      "3aa7"
    ]
  },
  "5cc2": {
    "id": "5cc2",
    "label": "that emits values on a timer",
    "options": [
      "582f",
      "365d"
    ]
  },
  "2fd0": {
    "id": "2fd0",
    "label": "which is built on demand when subscribed",
    "options": [
      "3282"
    ]
  },
  "29a5": {
    "id": "29a5",
    "label": "I want to create a new Observable",
    "options": [
      "506f",
      "31f2",
      "02b4",
      "4288",
      "0bca",
      "bff7",
      "a4e5",
      "8c8c",
      "5cc2",
      "2fd0"
    ]
  },
  "d928": {
    "id": "d928",
    "label": "bindCallback"
  },
  "ce0a": {
    "id": "ce0a",
    "label": "supporting a conventional callback API",
    "options": [
      "d928"
    ]
  },
  "d30f": {
    "id": "d30f",
    "label": "bindNodeCallback"
  },
  "8b19": {
    "id": "8b19",
    "label": "supporting Node.js callback style API",
    "options": [
      "d30f"
    ]
  },
  "2cbc": {
    "id": "2cbc",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "ce0a",
      "8b19"
    ]
  },
  "a003": {
    "id": "a003",
    "label": "I have no Observables yet, and",
    "options": [
      "29a5",
      "2cbc"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "b960",
      "e345",
      "a003"
    ]
  }
}