{
  "id": "guide/property-mapping",
  "title": "Property Mapping",
  "contents": "\n<div class=\"content\">\n<h1 id=\"property-mapping\">Property Mapping<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"/guide/property-mapping#property-mapping\"><i class=\"material-icons\">link</i></a></h1>\n<p>Multiselect options list requires data in a predefined format, format looks like below.</p>\n<code-example language=\"js\">\n{\n  \"id\": 3,\n  \"name\": \"Test 3\",\n  \"disabled\": true\n}\n</code-example>\n<p>If the data is not present in the exact format, you can use <code>propertyMap</code> which will be used to transform your current dataset to the expected object structure. For example, the data appears as below:</p>\n<code-example language=\"js\">\n{\n  \"empId\": 3,\n  \"empName\": \"Test 3\",\n  \"empActive\": true\n}\n</code-example>\n<p>The <code>propertyMap</code> should look like below</p>\n<code-example language=\"js\">\npropertyMap = {\n  \"empId\" : \"id\",\n  \"empName\" : \"name\",\n  \"empActive\" : \"disabled\"\n}\n</code-example>\n<p>So, the multiselect API internally takes care of converting the collection to the desired format based on <code>propertyMap</code> mapping.</p>\n<code-example language=\"js\">\n{\n  \"id\": 3,\n  \"name\": \"Test 3\",\n  \"disabled\": true\n}\n</code-example>\n<h3 id=\"property-mapping-demo\">Property Mapping Demo<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"/guide/property-mapping#property-mapping-demo\"><i class=\"material-icons\">link</i></a></h3>\n<p><ms-property-map></ms-property-map></p>\n<code-tabs>\n  <code-pane title=\"app/property-map.component.html\" path=\"property-map/src/app/property-map.component.html\">\n&#x3C;ngx-multiselect\n  [propertyMap]=\"propertyMap\"\n  [multiple]=\"true\"\n  [options]=\"options\"\n  multiple=\"true\"\n  ngDefaultControl\n>\n&#x3C;/ngx-multiselect>\n\n\n\n</code-pane>\n  <code-pane title=\"app/property-map.component.ts\" path=\"property-map/src/app/property-map.component.ts\">\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ms-property-map',\n  templateUrl: './property-map.component.html'\n})\nexport class PropertyMapComponent implements OnInit {\n  options;\n\n  propertyMap = {\n    teamId : \"id\",\n    teamName : \"name\"\n  }\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.options = [{\n      \"teamId\": 1,\n      \"teamName\": \"Manchester United\"\n    },\n    {\n      \"teamId\": 2,\n      \"teamName\": \"Liverpool F.C.\"\n    },\n    {\n      \"teamId\": 3,\n      \"teamName\": \"Chelsea F.C.\"\n    },\n    {\n      \"teamId\": 4,\n      \"teamName\": \"Arsenal F.C.\"\n    },\n    {\n      \"teamId\": 5,\n      \"teamName\": \"FC Barcelona\"\n    }];\n\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /guide/property-mapping#property-mapping\n - /guide/property-mapping#property-mapping-demo\n-->"
}