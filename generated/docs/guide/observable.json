{
  "id": "guide/observable",
  "title": "Observable",
  "contents": "\n<div class=\"content\">\n<h1 id=\"observable\">Observable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"/guide/observable#observable\"><i class=\"material-icons\">link</i></a></h1>\n<p>Multiselect dropdown works pretty well with observables as it does with data collection.\nThere are two ways to use observable with multiselect.\n1. Manual Subscription\n2. Async Pipe</p>\n<h2 id=\"1-manual-subscription\">1. Manual subscription:<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"/guide/observable#1-manual-subscription\"><i class=\"material-icons\">link</i></a></h2>\n<p>You can use traditional way to retrieve a data from a stream inside <code>.subscribe</code> method and assign it to a local component variable and then you can pass that variable to <code>options</code> binding of multiselect dropdown.</p>\n<h3 id=\"demo\">Demo<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"/guide/observable#demo\"><i class=\"material-icons\">link</i></a></h3>\n<p><ms-observable-async></ms-observable-async></p>\n<code-tabs>\n  <code-pane title=\"app/observable-async.component.html\" path=\"observable/src/app/observable-async.component.html\">\n&#x3C;p>Observable Async Demo&#x3C;/p>\n&#x3C;ngx-multiselect\n  [formControl]=\"selectedOptions\"\n  ngDefaultControl\n  [options]=\"observableOptions | async\"\n  [multiple]=\"true\">\n&#x3C;/ngx-multiselect>\n\n\n</code-pane>\n  <code-pane title=\"app/observable-async.component.ts\" path=\"observable/src/app/observable-async.component.ts\">\nimport { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'ms-observable-async',\n  templateUrl: './observable-async.component.html'\n})\nexport class ObservableAsyncComponent implements OnInit {\n\n  observableOptions;\n  selectedOptions;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.selectedOptions = new FormControl([\n      { \"id\": 2, \"name\": \"Liverpool F.C.\" },\n      { \"id\": 3, \"name\": \"Chelsea F.C.\" }\n    ]);\n\n    this.observableOptions = new Observable((observer) => {\n      observer.next([\n        { \"id\": 1, \"name\": \"Manchester United\" }, \n        { \"id\": 2, \"name\": \"Liverpool F.C.\" },\n        { \"id\": 3, \"name\": \"Chelsea F.C.\" },\n        { \"id\": 4, \"name\": \"Arsenal F.C.\" },\n        { \"id\": 5, \"name\": \"FC Barcelona\" }\n      ]);\n    });\n\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"2-using-async-pipe\">2. Using async pipe<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"/guide/observable#2-using-async-pipe\"><i class=\"material-icons\">link</i></a></h2>\n<p>You can directly assign the observable data stream (with async pipe) to multiselect <code>options</code> binding. <code>Async</code> pipe helps here to unwrap the data from stream.</p>\n<h3 id=\"demo-1\">Demo<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"/guide/observable#demo-1\"><i class=\"material-icons\">link</i></a></h3>\n<p><ms-observable-async-service></ms-observable-async-service></p>\n<code-tabs>\n  <code-pane title=\"app/observable-async-service.component.ts\" path=\"observable/src/app/observable-async-service.component.ts\">\nimport { Component, OnInit } from '@angular/core';\nimport { AppService } from '../../../app.service';\n\n@Component({\n  selector: 'ms-observable-async-service',\n  templateUrl: './observable-async-service.component.html'\n})\nexport class ObservableAsyncServiceComponent implements OnInit {\n\n  selectedOptions;\n  options;\n\n  constructor(private _appService: AppService) { }\n\n  ngOnInit() {\n    this.selectedOptions = [{\n      \"id\": 2,\n      \"name\": \"Liverpool F.C.\"\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Chelsea F.C.\"\n    }];\n    this.options = this._appService.getObservableOptions();\n  }\n\n}\n\n\n</code-pane>\n  <code-pane title=\"app/observable-async-service.component.html\" path=\"observable/src/app/observable-async-service.component.html\">\n\n&#x3C;p>Select your favourite teams from the following:&#x3C;/p>\n&#x3C;ngx-multiselect\n  ngDefaultControl\n  [(ngModel)]=\"selectedOptions\"\n  [options]=\"options | async\"\n  [multiple]=\"true\">\n&#x3C;/ngx-multiselect>\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"tldr\">TL;DR<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"/guide/observable#tldr\"><i class=\"material-icons\">link</i></a></h2>\n<p>If you want to dynamically update the multiselect datasource, you can do it just by creating the whole new copy of json array and pass that array to <code>observer.next</code> function as shown below. Changing the data collection value in between would directly reflect on to the screen.</p>\n<p><ms-observable-dynamic-update></ms-observable-dynamic-update></p>\n<code-tabs>\n  <code-pane title=\"app/observable-dynamic-update.component.ts\" path=\"observable/src/app/observable-dynamic-update.component.ts\">\nimport { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'ms-observable-dynamic-update',\n  templateUrl: './observable-dynamic-update.component.html'\n})\nexport class ObservableDynamicUpdateComponent implements OnInit {\n\n  observableOptions;\n  observableOptionsObserver;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.observableOptions = new Observable((observer) => {\n      this.observableOptionsObserver = observer;\n    });\n  }\n\n  populateDropdown(){\n    this.observableOptionsObserver.next([\n      { \"id\": 1, \"name\": \"Manchester United\" },\n      { \"id\": 2, \"name\": \"Liverpool F.C.\" },\n      { \"id\": 3, \"name\": \"Chelsea F.C.\" },\n      { \"id\": 4, \"name\": \"Arsenal F.C.\"},\n      { \"id\": 5, \"name\": \"FC Barcelona\" }\n  ]);\n  }\n}\n\n\n</code-pane>\n  <code-pane title=\"app/observable-dynamic-update.component.html\" path=\"observable/src/app/observable-dynamic-update.component.html\">\n&#x3C;p>Observable Dynamic Update Demo&#x3C;/p>\n&#x3C;ngx-multiselect\n  ngDefaultControl\n  [options]=\"observableOptions | async\"\n  [multiple]=\"true\">\n&#x3C;/ngx-multiselect>\n\n&#x3C;button (click)=\"populateDropdown()\">Click Here to populate dropdown&#x3C;/button>\n\n\n\n</code-pane>\n</code-tabs>\n\n</div>\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /guide/observable#1-manual-subscription\n - /guide/observable#2-using-async-pipe\n - /guide/observable#demo\n - /guide/observable#demo-1\n - /guide/observable#observable\n - /guide/observable#tldr\n-->"
}